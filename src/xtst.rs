/* automatically generated by rust-bindgen */


use xlib::*;


// #define RECORD_NAME     "RECORD"
// #define RECORD_MAJOR_VERSION    1
// #define RECORD_MINOR_VERSION    13
// #define RECORD_LOWEST_MAJOR_VERSION 1
// #define RECORD_LOWEST_MINOR_VERSION 12

// #define XRecordBadContext       0 /* Not a valid RC */

// #define RecordNumErrors         (XRecordBadContext + 1)
// #define RecordNumEvents   0L

// /*
//  * Constants for arguments of various requests
//  */
// #define XRecordFromServerTime   0x01
// #define XRecordFromClientTime   0x02
// #define XRecordFromClientSequence 0x04

// #define XRecordCurrentClients   1
// #define XRecordFutureClients    2
// #define XRecordAllClients   3

// #define XRecordFromServer             0
// #define XRecordFromClient               1
// #define XRecordClientStarted            2
// #define XRecordClientDied               3
// #define XRecordStartOfData    4
// #define XRecordEndOfData    5

pub const XRecordCurrentClients: ::libc::c_ulong = 1;
pub const XRecordFutureClients: ::libc::c_ulong = 2;
pub const XRecordAllClients: ::libc::c_ulong = 3;

pub const XRecordFromServer: ::libc::c_int = 0;
pub const XRecordFromClient: ::libc::c_int = 1;
pub const XRecordClientStarted: ::libc::c_int = 2;
pub const XRecordClientDied: ::libc::c_int = 3;
pub const XRecordStartOfData: ::libc::c_int = 4;
pub const XRecordEndOfData: ::libc::c_int = 5;

pub type XRecordClientSpec = ::libc::c_ulong;
pub type XRecordContext = ::libc::c_ulong;

/* Event names.  Used in "type" field in XEvent structures.  Not to be
confused with event masks above.  They start from 2 because 0 and 1
are reserved in the protocol for errors and replies. */

pub const KeyPress: ::libc::c_uchar = 2;
pub const KeyRelease: ::libc::c_uchar = 3;
pub const ButtonPress: ::libc::c_uchar = 4;
pub const ButtonRelease: ::libc::c_uchar = 5;
pub const MotionNotify: ::libc::c_uchar = 6;
pub const EnterNotify: ::libc::c_uchar = 7;
pub const LeaveNotify: ::libc::c_uchar = 8;
pub const FocusIn: ::libc::c_uchar = 9;
pub const FocusOut: ::libc::c_uchar = 10;
pub const KeymapNotify: ::libc::c_uchar = 11;
pub const Expose: ::libc::c_uchar = 12;
pub const GraphicsExpose: ::libc::c_uchar = 13;
pub const NoExpose: ::libc::c_uchar = 14;
pub const VisibilityNotify: ::libc::c_uchar = 15;
pub const CreateNotify: ::libc::c_uchar = 16;
pub const DestroyNotify: ::libc::c_uchar = 17;
pub const UnmapNotify: ::libc::c_uchar = 18;
pub const MapNotify: ::libc::c_uchar = 19;
pub const MapRequest: ::libc::c_uchar = 20;
pub const ReparentNotify: ::libc::c_uchar = 21;
pub const ConfigureNotify: ::libc::c_uchar = 22;
pub const ConfigureRequest: ::libc::c_uchar = 23;
pub const GravityNotify: ::libc::c_uchar = 24;
pub const ResizeRequest: ::libc::c_uchar = 25;
pub const CirculateNotify: ::libc::c_uchar = 26;
pub const CirculateRequest: ::libc::c_uchar = 27;
pub const PropertyNotify: ::libc::c_uchar = 28;
pub const SelectionClear: ::libc::c_uchar = 29;
pub const SelectionRequest: ::libc::c_uchar = 30;
pub const SelectionNotify: ::libc::c_uchar = 31;
pub const ColormapNotify: ::libc::c_uchar = 32;
pub const ClientMessage: ::libc::c_uchar = 33;
pub const MappingNotify: ::libc::c_uchar = 34;
pub const GenericEvent: ::libc::c_uchar = 35;
pub const LASTEvent: ::libc::c_uchar = 36;

#[repr(C)]
pub struct Struct_Unnamed1 {
    pub first: ::libc::c_uchar,
    pub last: ::libc::c_uchar,
}
pub type XRecordRange8 = Struct_Unnamed1;
#[repr(C)]
pub struct Struct_Unnamed2 {
    pub first: ::libc::c_ushort,
    pub last: ::libc::c_ushort,
}
pub type XRecordRange16 = Struct_Unnamed2;
#[repr(C)]
pub struct Struct_Unnamed3 {
    pub ext_major: XRecordRange8,
    pub ext_minor: XRecordRange16,
}
pub type XRecordExtRange = Struct_Unnamed3;
#[repr(C)]
pub struct Struct_Unnamed4 {
    pub core_requests: XRecordRange8,
    pub core_replies: XRecordRange8,
    pub ext_requests: XRecordExtRange,
    pub ext_replies: XRecordExtRange,
    pub delivered_events: XRecordRange8,
    pub device_events: XRecordRange8,
    pub errors: XRecordRange8,
    pub client_started: ::libc::c_int,
    pub client_died: ::libc::c_int,
}
pub type XRecordRange = Struct_Unnamed4;
#[repr(C)]
pub struct Struct_Unnamed5 {
    pub client: XRecordClientSpec,
    pub nranges: ::libc::c_ulong,
    pub ranges: *mut *mut XRecordRange,
}
pub type XRecordClientInfo = Struct_Unnamed5;
#[repr(C)]
pub struct Struct_Unnamed6 {
    pub enabled: ::libc::c_int,
    pub datum_flags: ::libc::c_int,
    pub nclients: ::libc::c_ulong,
    pub client_info: *mut *mut XRecordClientInfo,
}
pub type XRecordState = Struct_Unnamed6;
#[repr(C)]
pub struct Struct_Unnamed7 {
    pub id_base: XID,
    pub server_time: Time,
    pub client_seq: ::libc::c_ulong,
    pub category: ::libc::c_int,
    pub client_swapped: ::libc::c_int,
    pub data: *mut ::libc::c_uchar,
    pub data_len: ::libc::c_ulong,
}
pub type XRecordInterceptData = Struct_Unnamed7;
pub type XRecordInterceptProc =
    ::std::option::Option<extern "C" fn
                              (arg1: XPointer,
                               arg2: *mut XRecordInterceptData)>;
#[link(name = "Xtst")]
extern "C" {
    pub fn XRecordIdBaseMask(dpy: *mut Display) -> XID;
    pub fn XRecordQueryVersion(arg1: *mut Display, arg2: *mut ::libc::c_int,
                               arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XRecordCreateContext(arg1: *mut Display, arg2: ::libc::c_int,
                                arg3: *mut XRecordClientSpec,
                                arg4: ::libc::c_int,
                                arg5: *mut *mut XRecordRange,
                                arg6: ::libc::c_int) -> XRecordContext;
    pub fn XRecordAllocRange() -> *mut XRecordRange;
    pub fn XRecordRegisterClients(arg1: *mut Display, arg2: XRecordContext,
                                  arg3: ::libc::c_int,
                                  arg4: *mut XRecordClientSpec,
                                  arg5: ::libc::c_int,
                                  arg6: *mut *mut XRecordRange,
                                  arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn XRecordUnregisterClients(arg1: *mut Display, arg2: XRecordContext,
                                    arg3: *mut XRecordClientSpec,
                                    arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XRecordGetContext(arg1: *mut Display, arg2: XRecordContext,
                             arg3: *mut *mut XRecordState) -> ::libc::c_int;
    pub fn XRecordFreeState(arg1: *mut XRecordState);
    pub fn XRecordEnableContext(arg1: *mut Display, arg2: XRecordContext,
                                arg3: XRecordInterceptProc, arg4: XPointer) ->
     ::libc::c_int;
    pub fn XRecordEnableContextAsync(arg1: *mut Display, arg2: XRecordContext,
                                     arg3: XRecordInterceptProc,
                                     arg4: XPointer) -> ::libc::c_int;
    pub fn XRecordProcessReplies(arg1: *mut Display);
    pub fn XRecordFreeData(arg1: *mut XRecordInterceptData);
    pub fn XRecordDisableContext(arg1: *mut Display, arg2: XRecordContext) ->
     ::libc::c_int;
    pub fn XRecordFreeContext(arg1: *mut Display, arg2: XRecordContext) ->
     ::libc::c_int;
}
