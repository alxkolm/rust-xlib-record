/* automatically generated by rust-bindgen */

pub type XID = ::libc::c_ulong;
pub type Mask = ::libc::c_ulong;
pub type Atom = ::libc::c_ulong;
pub type VisualID = ::libc::c_ulong;
pub type Time = ::libc::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = ::libc::c_uchar;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
struct Struct_Unnamed1 {
    pub __val: [::libc::c_int, ..2u],
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong, ..16u],
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
pub struct Union_Unnamed4 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed4 {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..40u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
pub struct Union_Unnamed5 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed5 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
pub struct Union_Unnamed6 {
    pub data: [u64, ..6u],
}
impl Union_Unnamed6 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed7 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..48u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
pub struct Union_Unnamed8 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed8 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed9 {
    pub data: [u64, ..7u],
}
impl Union_Unnamed9 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed10 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
pub struct Union_Unnamed11 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed11 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..8u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed12 {
    pub data: [u64, ..4u],
}
impl Union_Unnamed12 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..32u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
pub struct Union_Unnamed13 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed13 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
pub type ptrdiff_t = ::libc::c_long;
pub type wchar_t = ::libc::c_int;
pub type XPointer = *mut ::libc::c_char;
#[repr(C)]
pub struct Struct__XExtData {
    pub number: ::libc::c_int,
    pub next: *mut Struct__XExtData,
    pub free_private: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Struct__XExtData)
                                                -> ::libc::c_int>,
    pub private_data: XPointer,
}
pub type XExtData = Struct__XExtData;
#[repr(C)]
struct Struct_Unnamed14 {
    pub extension: ::libc::c_int,
    pub major_opcode: ::libc::c_int,
    pub first_event: ::libc::c_int,
    pub first_error: ::libc::c_int,
}
pub type XExtCodes = Struct_Unnamed14;
#[repr(C)]
struct Struct_Unnamed15 {
    pub depth: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub scanline_pad: ::libc::c_int,
}
pub type XPixmapFormatValues = Struct_Unnamed15;
#[repr(C)]
struct Struct_Unnamed16 {
    pub function: ::libc::c_int,
    pub plane_mask: ::libc::c_ulong,
    pub foreground: ::libc::c_ulong,
    pub background: ::libc::c_ulong,
    pub line_width: ::libc::c_int,
    pub line_style: ::libc::c_int,
    pub cap_style: ::libc::c_int,
    pub join_style: ::libc::c_int,
    pub fill_style: ::libc::c_int,
    pub fill_rule: ::libc::c_int,
    pub arc_mode: ::libc::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::libc::c_int,
    pub ts_y_origin: ::libc::c_int,
    pub font: Font,
    pub subwindow_mode: ::libc::c_int,
    pub graphics_exposures: ::libc::c_int,
    pub clip_x_origin: ::libc::c_int,
    pub clip_y_origin: ::libc::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::libc::c_int,
    pub dashes: ::libc::c_char,
}
pub type XGCValues = Struct_Unnamed16;
pub enum Struct__XGC { }
pub type GC = *mut Struct__XGC;
#[repr(C)]
struct Struct_Unnamed17 {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::libc::c_int,
    pub red_mask: ::libc::c_ulong,
    pub green_mask: ::libc::c_ulong,
    pub blue_mask: ::libc::c_ulong,
    pub bits_per_rgb: ::libc::c_int,
    pub map_entries: ::libc::c_int,
}
pub type Visual = Struct_Unnamed17;
#[repr(C)]
struct Struct_Unnamed18 {
    pub depth: ::libc::c_int,
    pub nvisuals: ::libc::c_int,
    pub visuals: *mut Visual,
}
pub type Depth = Struct_Unnamed18;
pub enum Struct__XDisplay { }
#[repr(C)]
struct Struct_Unnamed19 {
    pub ext_data: *mut XExtData,
    pub display: *mut Struct__XDisplay,
    pub root: Window,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub mwidth: ::libc::c_int,
    pub mheight: ::libc::c_int,
    pub ndepths: ::libc::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::libc::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::libc::c_ulong,
    pub black_pixel: ::libc::c_ulong,
    pub max_maps: ::libc::c_int,
    pub min_maps: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub save_unders: ::libc::c_int,
    pub root_input_mask: ::libc::c_long,
}
pub type Screen = Struct_Unnamed19;
#[repr(C)]
struct Struct_Unnamed20 {
    pub ext_data: *mut XExtData,
    pub depth: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub scanline_pad: ::libc::c_int,
}
pub type ScreenFormat = Struct_Unnamed20;
#[repr(C)]
struct Struct_Unnamed21 {
    pub background_pixmap: Pixmap,
    pub background_pixel: ::libc::c_ulong,
    pub border_pixmap: Pixmap,
    pub border_pixel: ::libc::c_ulong,
    pub bit_gravity: ::libc::c_int,
    pub win_gravity: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub backing_planes: ::libc::c_ulong,
    pub backing_pixel: ::libc::c_ulong,
    pub save_under: ::libc::c_int,
    pub event_mask: ::libc::c_long,
    pub do_not_propagate_mask: ::libc::c_long,
    pub override_redirect: ::libc::c_int,
    pub colormap: Colormap,
    pub cursor: Cursor,
}
pub type XSetWindowAttributes = Struct_Unnamed21;
#[repr(C)]
struct Struct_Unnamed22 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub visual: *mut Visual,
    pub root: Window,
    pub class: ::libc::c_int,
    pub bit_gravity: ::libc::c_int,
    pub win_gravity: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub backing_planes: ::libc::c_ulong,
    pub backing_pixel: ::libc::c_ulong,
    pub save_under: ::libc::c_int,
    pub colormap: Colormap,
    pub map_installed: ::libc::c_int,
    pub map_state: ::libc::c_int,
    pub all_event_masks: ::libc::c_long,
    pub your_event_mask: ::libc::c_long,
    pub do_not_propagate_mask: ::libc::c_long,
    pub override_redirect: ::libc::c_int,
    pub screen: *mut Screen,
}
pub type XWindowAttributes = Struct_Unnamed22;
#[repr(C)]
struct Struct_Unnamed23 {
    pub family: ::libc::c_int,
    pub length: ::libc::c_int,
    pub address: *mut ::libc::c_char,
}
pub type XHostAddress = Struct_Unnamed23;
#[repr(C)]
struct Struct_Unnamed24 {
    pub typelength: ::libc::c_int,
    pub valuelength: ::libc::c_int,
    pub _type: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
pub type XServerInterpretedAddress = Struct_Unnamed24;
#[repr(C)]
pub struct Struct__XImage {
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub xoffset: ::libc::c_int,
    pub format: ::libc::c_int,
    pub data: *mut ::libc::c_char,
    pub byte_order: ::libc::c_int,
    pub bitmap_unit: ::libc::c_int,
    pub bitmap_bit_order: ::libc::c_int,
    pub bitmap_pad: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub bytes_per_line: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub red_mask: ::libc::c_ulong,
    pub green_mask: ::libc::c_ulong,
    pub blue_mask: ::libc::c_ulong,
    pub obdata: XPointer,
    pub f: Struct_funcs,
}
#[repr(C)]
pub struct Struct_funcs {
    pub create_image: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Struct__XDisplay,
                                                 arg2: *mut Visual,
                                                 arg3: ::libc::c_uint,
                                                 arg4: ::libc::c_int,
                                                 arg5: ::libc::c_int,
                                                 arg6: *mut ::libc::c_char,
                                                 arg7: ::libc::c_uint,
                                                 arg8: ::libc::c_uint,
                                                 arg9: ::libc::c_int,
                                                 arg10: ::libc::c_int)
                                                -> *mut Struct__XImage>,
    pub destroy_image: ::std::option::Option<extern "C" fn
                                                 (arg1: *mut Struct__XImage)
                                                 -> ::libc::c_int>,
    pub get_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int)
                                             -> ::libc::c_ulong>,
    pub put_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_ulong)
                                             -> ::libc::c_int>,
    pub sub_image: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_uint,
                                              arg5: ::libc::c_uint)
                                             -> *mut Struct__XImage>,
    pub add_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_long)
                                             -> ::libc::c_int>,
}
pub type XImage = Struct__XImage;
#[repr(C)]
struct Struct_Unnamed25 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub sibling: Window,
    pub stack_mode: ::libc::c_int,
}
pub type XWindowChanges = Struct_Unnamed25;
#[repr(C)]
struct Struct_Unnamed26 {
    pub pixel: ::libc::c_ulong,
    pub red: ::libc::c_ushort,
    pub green: ::libc::c_ushort,
    pub blue: ::libc::c_ushort,
    pub flags: ::libc::c_char,
    pub pad: ::libc::c_char,
}
pub type XColor = Struct_Unnamed26;
#[repr(C)]
struct Struct_Unnamed27 {
    pub x1: ::libc::c_short,
    pub y1: ::libc::c_short,
    pub x2: ::libc::c_short,
    pub y2: ::libc::c_short,
}
pub type XSegment = Struct_Unnamed27;
#[repr(C)]
struct Struct_Unnamed28 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
}
pub type XPoint = Struct_Unnamed28;
#[repr(C)]
struct Struct_Unnamed29 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
    pub width: ::libc::c_ushort,
    pub height: ::libc::c_ushort,
}
pub type XRectangle = Struct_Unnamed29;
#[repr(C)]
struct Struct_Unnamed30 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
    pub width: ::libc::c_ushort,
    pub height: ::libc::c_ushort,
    pub angle1: ::libc::c_short,
    pub angle2: ::libc::c_short,
}
pub type XArc = Struct_Unnamed30;
#[repr(C)]
struct Struct_Unnamed31 {
    pub key_click_percent: ::libc::c_int,
    pub bell_percent: ::libc::c_int,
    pub bell_pitch: ::libc::c_int,
    pub bell_duration: ::libc::c_int,
    pub led: ::libc::c_int,
    pub led_mode: ::libc::c_int,
    pub key: ::libc::c_int,
    pub auto_repeat_mode: ::libc::c_int,
}
pub type XKeyboardControl = Struct_Unnamed31;
#[repr(C)]
struct Struct_Unnamed32 {
    pub key_click_percent: ::libc::c_int,
    pub bell_percent: ::libc::c_int,
    pub bell_pitch: ::libc::c_uint,
    pub bell_duration: ::libc::c_uint,
    pub led_mask: ::libc::c_ulong,
    pub global_auto_repeat: ::libc::c_int,
    pub auto_repeats: [::libc::c_char, ..32u],
}
pub type XKeyboardState = Struct_Unnamed32;
#[repr(C)]
struct Struct_Unnamed33 {
    pub time: Time,
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
}
pub type XTimeCoord = Struct_Unnamed33;
#[repr(C)]
struct Struct_Unnamed34 {
    pub max_keypermod: ::libc::c_int,
    pub modifiermap: *mut KeyCode,
}
pub type XModifierKeymap = Struct_Unnamed34;
pub type Display = Struct__XDisplay;
pub enum Struct__XPrivate { }
pub enum Struct__XrmHashBucketRec { }
#[repr(C)]
struct Struct_Unnamed35 {
    pub ext_data: *mut XExtData,
    pub private1: *mut Struct__XPrivate,
    pub fd: ::libc::c_int,
    pub private2: ::libc::c_int,
    pub proto_major_version: ::libc::c_int,
    pub proto_minor_version: ::libc::c_int,
    pub vendor: *mut ::libc::c_char,
    pub private3: XID,
    pub private4: XID,
    pub private5: XID,
    pub private6: ::libc::c_int,
    pub resource_alloc: ::std::option::Option<extern "C" fn
                                                  (arg1:
                                                       *mut Struct__XDisplay)
                                                  -> XID>,
    pub byte_order: ::libc::c_int,
    pub bitmap_unit: ::libc::c_int,
    pub bitmap_pad: ::libc::c_int,
    pub bitmap_bit_order: ::libc::c_int,
    pub nformats: ::libc::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub private8: ::libc::c_int,
    pub release: ::libc::c_int,
    pub private9: *mut Struct__XPrivate,
    pub private10: *mut Struct__XPrivate,
    pub qlen: ::libc::c_int,
    pub last_request_read: ::libc::c_ulong,
    pub request: ::libc::c_ulong,
    pub private11: XPointer,
    pub private12: XPointer,
    pub private13: XPointer,
    pub private14: XPointer,
    pub max_request_size: ::libc::c_uint,
    pub db: *mut Struct__XrmHashBucketRec,
    pub private15: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XDisplay)
                                             -> ::libc::c_int>,
    pub display_name: *mut ::libc::c_char,
    pub default_screen: ::libc::c_int,
    pub nscreens: ::libc::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::libc::c_ulong,
    pub private16: ::libc::c_ulong,
    pub min_keycode: ::libc::c_int,
    pub max_keycode: ::libc::c_int,
    pub private17: XPointer,
    pub private18: XPointer,
    pub private19: ::libc::c_int,
    pub xdefaults: *mut ::libc::c_char,
}
pub type _XPrivDisplay = *mut Struct_Unnamed35;
#[repr(C)]
struct Struct_Unnamed36 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub keycode: ::libc::c_uint,
    pub same_screen: ::libc::c_int,
}
pub type XKeyEvent = Struct_Unnamed36;
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
#[repr(C)]
struct Struct_Unnamed37 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub button: ::libc::c_uint,
    pub same_screen: ::libc::c_int,
}
pub type XButtonEvent = Struct_Unnamed37;
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
#[repr(C)]
struct Struct_Unnamed38 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub is_hint: ::libc::c_char,
    pub same_screen: ::libc::c_int,
}
pub type XMotionEvent = Struct_Unnamed38;
pub type XPointerMovedEvent = XMotionEvent;
#[repr(C)]
struct Struct_Unnamed39 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub mode: ::libc::c_int,
    pub detail: ::libc::c_int,
    pub same_screen: ::libc::c_int,
    pub focus: ::libc::c_int,
    pub state: ::libc::c_uint,
}
pub type XCrossingEvent = Struct_Unnamed39;
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
#[repr(C)]
struct Struct_Unnamed40 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub mode: ::libc::c_int,
    pub detail: ::libc::c_int,
}
pub type XFocusChangeEvent = Struct_Unnamed40;
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
#[repr(C)]
struct Struct_Unnamed41 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub key_vector: [::libc::c_char, ..32u],
}
pub type XKeymapEvent = Struct_Unnamed41;
#[repr(C)]
struct Struct_Unnamed42 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub count: ::libc::c_int,
}
pub type XExposeEvent = Struct_Unnamed42;
#[repr(C)]
struct Struct_Unnamed43 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub count: ::libc::c_int,
    pub major_code: ::libc::c_int,
    pub minor_code: ::libc::c_int,
}
pub type XGraphicsExposeEvent = Struct_Unnamed43;
#[repr(C)]
struct Struct_Unnamed44 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::libc::c_int,
    pub minor_code: ::libc::c_int,
}
pub type XNoExposeEvent = Struct_Unnamed44;
#[repr(C)]
struct Struct_Unnamed45 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub state: ::libc::c_int,
}
pub type XVisibilityEvent = Struct_Unnamed45;
#[repr(C)]
struct Struct_Unnamed46 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub override_redirect: ::libc::c_int,
}
pub type XCreateWindowEvent = Struct_Unnamed46;
#[repr(C)]
struct Struct_Unnamed47 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
}
pub type XDestroyWindowEvent = Struct_Unnamed47;
#[repr(C)]
struct Struct_Unnamed48 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::libc::c_int,
}
pub type XUnmapEvent = Struct_Unnamed48;
#[repr(C)]
struct Struct_Unnamed49 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::libc::c_int,
}
pub type XMapEvent = Struct_Unnamed49;
#[repr(C)]
struct Struct_Unnamed50 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
}
pub type XMapRequestEvent = Struct_Unnamed50;
#[repr(C)]
struct Struct_Unnamed51 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub override_redirect: ::libc::c_int,
}
pub type XReparentEvent = Struct_Unnamed51;
#[repr(C)]
struct Struct_Unnamed52 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub above: Window,
    pub override_redirect: ::libc::c_int,
}
pub type XConfigureEvent = Struct_Unnamed52;
#[repr(C)]
struct Struct_Unnamed53 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
}
pub type XGravityEvent = Struct_Unnamed53;
#[repr(C)]
struct Struct_Unnamed54 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
pub type XResizeRequestEvent = Struct_Unnamed54;
#[repr(C)]
struct Struct_Unnamed55 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub above: Window,
    pub detail: ::libc::c_int,
    pub value_mask: ::libc::c_ulong,
}
pub type XConfigureRequestEvent = Struct_Unnamed55;
#[repr(C)]
struct Struct_Unnamed56 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub place: ::libc::c_int,
}
pub type XCirculateEvent = Struct_Unnamed56;
#[repr(C)]
struct Struct_Unnamed57 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub place: ::libc::c_int,
}
pub type XCirculateRequestEvent = Struct_Unnamed57;
#[repr(C)]
struct Struct_Unnamed58 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::libc::c_int,
}
pub type XPropertyEvent = Struct_Unnamed58;
#[repr(C)]
struct Struct_Unnamed59 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
pub type XSelectionClearEvent = Struct_Unnamed59;
#[repr(C)]
struct Struct_Unnamed60 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
pub type XSelectionRequestEvent = Struct_Unnamed60;
#[repr(C)]
struct Struct_Unnamed61 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
pub type XSelectionEvent = Struct_Unnamed61;
#[repr(C)]
struct Struct_Unnamed62 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::libc::c_int,
    pub state: ::libc::c_int,
}
pub type XColormapEvent = Struct_Unnamed62;
#[repr(C)]
struct Struct_Unnamed63 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::libc::c_int,
    pub data: Union_Unnamed64,
}
#[repr(C)]
pub struct Union_Unnamed64 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed64 {
    pub fn b(&mut self) -> *mut [::libc::c_char, ..20u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn s(&mut self) -> *mut [::libc::c_short, ..10u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn l(&mut self) -> *mut [::libc::c_long, ..5u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XClientMessageEvent = Struct_Unnamed63;
#[repr(C)]
struct Struct_Unnamed65 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub request: ::libc::c_int,
    pub first_keycode: ::libc::c_int,
    pub count: ::libc::c_int,
}
pub type XMappingEvent = Struct_Unnamed65;
#[repr(C)]
struct Struct_Unnamed66 {
    pub _type: ::libc::c_int,
    pub display: *mut Display,
    pub resourceid: XID,
    pub serial: ::libc::c_ulong,
    pub error_code: ::libc::c_uchar,
    pub request_code: ::libc::c_uchar,
    pub minor_code: ::libc::c_uchar,
}
pub type XErrorEvent = Struct_Unnamed66;
#[repr(C)]
struct Struct_Unnamed67 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
}
pub type XAnyEvent = Struct_Unnamed67;
#[repr(C)]
struct Struct_Unnamed68 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub extension: ::libc::c_int,
    pub evtype: ::libc::c_int,
}
pub type XGenericEvent = Struct_Unnamed68;
#[repr(C)]
struct Struct_Unnamed69 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub extension: ::libc::c_int,
    pub evtype: ::libc::c_int,
    pub cookie: ::libc::c_uint,
    pub data: *mut ::libc::c_void,
}
pub type XGenericEventCookie = Struct_Unnamed69;
#[repr(C)]
pub struct Union__XEvent {
    pub data: [u64, ..24u],
}
impl Union__XEvent {
    pub fn _type(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xany(&mut self) -> *mut XAnyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xkey(&mut self) -> *mut XKeyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xbutton(&mut self) -> *mut XButtonEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmotion(&mut self) -> *mut XMotionEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcrossing(&mut self) -> *mut XCrossingEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xfocus(&mut self) -> *mut XFocusChangeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xexpose(&mut self) -> *mut XExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgraphicsexpose(&mut self) -> *mut XGraphicsExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xnoexpose(&mut self) -> *mut XNoExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xvisibility(&mut self) -> *mut XVisibilityEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcreatewindow(&mut self) -> *mut XCreateWindowEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xdestroywindow(&mut self) -> *mut XDestroyWindowEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xunmap(&mut self) -> *mut XUnmapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmap(&mut self) -> *mut XMapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmaprequest(&mut self) -> *mut XMapRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xreparent(&mut self) -> *mut XReparentEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xconfigure(&mut self) -> *mut XConfigureEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgravity(&mut self) -> *mut XGravityEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xresizerequest(&mut self) -> *mut XResizeRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xconfigurerequest(&mut self) -> *mut XConfigureRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcirculate(&mut self) -> *mut XCirculateEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcirculaterequest(&mut self) -> *mut XCirculateRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xproperty(&mut self) -> *mut XPropertyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselectionclear(&mut self) -> *mut XSelectionClearEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselectionrequest(&mut self) -> *mut XSelectionRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselection(&mut self) -> *mut XSelectionEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcolormap(&mut self) -> *mut XColormapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xclient(&mut self) -> *mut XClientMessageEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmapping(&mut self) -> *mut XMappingEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xerror(&mut self) -> *mut XErrorEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xkeymap(&mut self) -> *mut XKeymapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgeneric(&mut self) -> *mut XGenericEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcookie(&mut self) -> *mut XGenericEventCookie {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pad(&mut self) -> *mut [::libc::c_long, ..24u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XEvent = Union__XEvent;
#[repr(C)]
struct Struct_Unnamed70 {
    pub lbearing: ::libc::c_short,
    pub rbearing: ::libc::c_short,
    pub width: ::libc::c_short,
    pub ascent: ::libc::c_short,
    pub descent: ::libc::c_short,
    pub attributes: ::libc::c_ushort,
}
pub type XCharStruct = Struct_Unnamed70;
#[repr(C)]
struct Struct_Unnamed71 {
    pub name: Atom,
    pub card32: ::libc::c_ulong,
}
pub type XFontProp = Struct_Unnamed71;
#[repr(C)]
struct Struct_Unnamed72 {
    pub ext_data: *mut XExtData,
    pub fid: Font,
    pub direction: ::libc::c_uint,
    pub min_char_or_byte2: ::libc::c_uint,
    pub max_char_or_byte2: ::libc::c_uint,
    pub min_byte1: ::libc::c_uint,
    pub max_byte1: ::libc::c_uint,
    pub all_chars_exist: ::libc::c_int,
    pub default_char: ::libc::c_uint,
    pub n_properties: ::libc::c_int,
    pub properties: *mut XFontProp,
    pub min_bounds: XCharStruct,
    pub max_bounds: XCharStruct,
    pub per_char: *mut XCharStruct,
    pub ascent: ::libc::c_int,
    pub descent: ::libc::c_int,
}
pub type XFontStruct = Struct_Unnamed72;
#[repr(C)]
struct Struct_Unnamed73 {
    pub chars: *mut ::libc::c_char,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font: Font,
}
pub type XTextItem = Struct_Unnamed73;
#[repr(C)]
struct Struct_Unnamed74 {
    pub byte1: ::libc::c_uchar,
    pub byte2: ::libc::c_uchar,
}
pub type XChar2b = Struct_Unnamed74;
#[repr(C)]
struct Struct_Unnamed75 {
    pub chars: *mut XChar2b,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font: Font,
}
pub type XTextItem16 = Struct_Unnamed75;
#[repr(C)]
pub struct Union_Unnamed76 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed76 {
    pub fn display(&mut self) -> *mut *mut Display {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn gc(&mut self) -> *mut GC { unsafe { ::std::mem::transmute(self) } }
    pub fn visual(&mut self) -> *mut *mut Visual {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn screen(&mut self) -> *mut *mut Screen {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pixmap_format(&mut self) -> *mut *mut ScreenFormat {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn font(&mut self) -> *mut *mut XFontStruct {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XEDataObject = Union_Unnamed76;
#[repr(C)]
struct Struct_Unnamed77 {
    pub max_ink_extent: XRectangle,
    pub max_logical_extent: XRectangle,
}
pub type XFontSetExtents = Struct_Unnamed77;
pub enum Struct__XOM { }
pub type XOM = *mut Struct__XOM;
pub enum Struct__XOC { }
pub type XOC = *mut Struct__XOC;
pub type XFontSet = *mut Struct__XOC;
#[repr(C)]
struct Struct_Unnamed78 {
    pub chars: *mut ::libc::c_char,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font_set: XFontSet,
}
pub type XmbTextItem = Struct_Unnamed78;
#[repr(C)]
struct Struct_Unnamed79 {
    pub chars: *mut wchar_t,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font_set: XFontSet,
}
pub type XwcTextItem = Struct_Unnamed79;
#[repr(C)]
struct Struct_Unnamed80 {
    pub charset_count: ::libc::c_int,
    pub charset_list: *mut *mut ::libc::c_char,
}
pub type XOMCharSetList = Struct_Unnamed80;
pub type Enum_Unnamed81 = ::libc::c_uint;
pub const XOMOrientation_LTR_TTB: ::libc::c_uint = 0;
pub const XOMOrientation_RTL_TTB: ::libc::c_uint = 1;
pub const XOMOrientation_TTB_LTR: ::libc::c_uint = 2;
pub const XOMOrientation_TTB_RTL: ::libc::c_uint = 3;
pub const XOMOrientation_Context: ::libc::c_uint = 4;
pub type XOrientation = Enum_Unnamed81;
#[repr(C)]
struct Struct_Unnamed82 {
    pub num_orientation: ::libc::c_int,
    pub orientation: *mut XOrientation,
}
pub type XOMOrientation = Struct_Unnamed82;
#[repr(C)]
struct Struct_Unnamed83 {
    pub num_font: ::libc::c_int,
    pub font_struct_list: *mut *mut XFontStruct,
    pub font_name_list: *mut *mut ::libc::c_char,
}
pub type XOMFontInfo = Struct_Unnamed83;
pub enum Struct__XIM { }
pub type XIM = *mut Struct__XIM;
pub enum Struct__XIC { }
pub type XIC = *mut Struct__XIC;
pub type XIMProc =
    ::std::option::Option<extern "C" fn
                              (arg1: XIM, arg2: XPointer, arg3: XPointer)>;
pub type XICProc =
    ::std::option::Option<extern "C" fn
                              (arg1: XIC, arg2: XPointer, arg3: XPointer)
                              -> ::libc::c_int>;
pub type XIDProc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: XPointer,
                               arg3: XPointer)>;
pub type XIMStyle = ::libc::c_ulong;
#[repr(C)]
struct Struct_Unnamed84 {
    pub count_styles: ::libc::c_ushort,
    pub supported_styles: *mut XIMStyle,
}
pub type XIMStyles = Struct_Unnamed84;
pub type XVaNestedList = *mut ::libc::c_void;
#[repr(C)]
struct Struct_Unnamed85 {
    pub client_data: XPointer,
    pub callback: XIMProc,
}
pub type XIMCallback = Struct_Unnamed85;
#[repr(C)]
struct Struct_Unnamed86 {
    pub client_data: XPointer,
    pub callback: XICProc,
}
pub type XICCallback = Struct_Unnamed86;
pub type XIMFeedback = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMText {
    pub length: ::libc::c_ushort,
    pub feedback: *mut XIMFeedback,
    pub encoding_is_wchar: ::libc::c_int,
    pub string: Union_Unnamed87,
}
#[repr(C)]
pub struct Union_Unnamed87 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed87 {
    pub fn multi_byte(&mut self) -> *mut *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn wide_char(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMText = Struct__XIMText;
pub type XIMPreeditState = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMPreeditStateNotifyCallbackStruct {
    pub state: XIMPreeditState,
}
pub type XIMPreeditStateNotifyCallbackStruct =
    Struct__XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = ::libc::c_ulong;
pub type XIMStringConversionFeedback = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMStringConversionText {
    pub length: ::libc::c_ushort,
    pub feedback: *mut XIMStringConversionFeedback,
    pub encoding_is_wchar: ::libc::c_int,
    pub string: Union_Unnamed88,
}
#[repr(C)]
pub struct Union_Unnamed88 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed88 {
    pub fn mbs(&mut self) -> *mut *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn wcs(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMStringConversionText = Struct__XIMStringConversionText;
pub type XIMStringConversionPosition = ::libc::c_ushort;
pub type XIMStringConversionType = ::libc::c_ushort;
pub type XIMStringConversionOperation = ::libc::c_ushort;
pub type Enum_Unnamed89 = ::libc::c_uint;
pub const XIMForwardChar: ::libc::c_uint = 0;
pub const XIMBackwardChar: ::libc::c_uint = 1;
pub const XIMForwardWord: ::libc::c_uint = 2;
pub const XIMBackwardWord: ::libc::c_uint = 3;
pub const XIMCaretUp: ::libc::c_uint = 4;
pub const XIMCaretDown: ::libc::c_uint = 5;
pub const XIMNextLine: ::libc::c_uint = 6;
pub const XIMPreviousLine: ::libc::c_uint = 7;
pub const XIMLineStart: ::libc::c_uint = 8;
pub const XIMLineEnd: ::libc::c_uint = 9;
pub const XIMAbsolutePosition: ::libc::c_uint = 10;
pub const XIMDontChange: ::libc::c_uint = 11;
pub type XIMCaretDirection = Enum_Unnamed89;
#[repr(C)]
pub struct Struct__XIMStringConversionCallbackStruct {
    pub position: XIMStringConversionPosition,
    pub direction: XIMCaretDirection,
    pub operation: XIMStringConversionOperation,
    pub factor: ::libc::c_ushort,
    pub text: *mut XIMStringConversionText,
}
pub type XIMStringConversionCallbackStruct =
    Struct__XIMStringConversionCallbackStruct;
#[repr(C)]
pub struct Struct__XIMPreeditDrawCallbackStruct {
    pub caret: ::libc::c_int,
    pub chg_first: ::libc::c_int,
    pub chg_length: ::libc::c_int,
    pub text: *mut XIMText,
}
pub type XIMPreeditDrawCallbackStruct = Struct__XIMPreeditDrawCallbackStruct;
pub type Enum_Unnamed90 = ::libc::c_uint;
pub const XIMIsInvisible: ::libc::c_uint = 0;
pub const XIMIsPrimary: ::libc::c_uint = 1;
pub const XIMIsSecondary: ::libc::c_uint = 2;
pub type XIMCaretStyle = Enum_Unnamed90;
#[repr(C)]
pub struct Struct__XIMPreeditCaretCallbackStruct {
    pub position: ::libc::c_int,
    pub direction: XIMCaretDirection,
    pub style: XIMCaretStyle,
}
pub type XIMPreeditCaretCallbackStruct =
    Struct__XIMPreeditCaretCallbackStruct;
pub type Enum_Unnamed91 = ::libc::c_uint;
pub const XIMTextType: ::libc::c_uint = 0;
pub const XIMBitmapType: ::libc::c_uint = 1;
pub type XIMStatusDataType = Enum_Unnamed91;
#[repr(C)]
pub struct Struct__XIMStatusDrawCallbackStruct {
    pub _type: XIMStatusDataType,
    pub data: Union_Unnamed92,
}
#[repr(C)]
pub struct Union_Unnamed92 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed92 {
    pub fn text(&mut self) -> *mut *mut XIMText {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn bitmap(&mut self) -> *mut Pixmap {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMStatusDrawCallbackStruct = Struct__XIMStatusDrawCallbackStruct;
#[repr(C)]
pub struct Struct__XIMHotKeyTrigger {
    pub keysym: KeySym,
    pub modifier: ::libc::c_int,
    pub modifier_mask: ::libc::c_int,
}
pub type XIMHotKeyTrigger = Struct__XIMHotKeyTrigger;
#[repr(C)]
pub struct Struct__XIMHotKeyTriggers {
    pub num_hot_key: ::libc::c_int,
    pub key: *mut XIMHotKeyTrigger,
}
pub type XIMHotKeyTriggers = Struct__XIMHotKeyTriggers;
pub type XIMHotKeyState = ::libc::c_ulong;
#[repr(C)]
struct Struct_Unnamed93 {
    pub count_values: ::libc::c_ushort,
    pub supported_values: *mut *mut ::libc::c_char,
}
pub type XIMValuesList = Struct_Unnamed93;
pub type XErrorHandler =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XErrorEvent)
                              -> ::libc::c_int>;
pub type XIOErrorHandler =
    ::std::option::Option<extern "C" fn(arg1: *mut Display) -> ::libc::c_int>;
pub type XConnectionWatchProc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: XPointer,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: *mut XPointer)>;
#[link(name = "X11")]
extern "C" {
    pub static mut _Xdebug: ::libc::c_int;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn _Xmblen(str: *mut ::libc::c_char, len: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XLoadQueryFont(arg1: *mut Display, arg2: *const ::libc::c_char) ->
     *mut XFontStruct;
    pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
    pub fn XGetMotionEvents(arg1: *mut Display, arg2: Window, arg3: Time,
                            arg4: Time, arg5: *mut ::libc::c_int) ->
     *mut XTimeCoord;
    pub fn XDeleteModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: ::libc::c_int) ->
     *mut XModifierKeymap;
    pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
    pub fn XInsertModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: ::libc::c_int) ->
     *mut XModifierKeymap;
    pub fn XNewModifiermap(arg1: ::libc::c_int) -> *mut XModifierKeymap;
    pub fn XCreateImage(arg1: *mut Display, arg2: *mut Visual,
                        arg3: ::libc::c_uint, arg4: ::libc::c_int,
                        arg5: ::libc::c_int, arg6: *mut ::libc::c_char,
                        arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                        arg9: ::libc::c_int, arg10: ::libc::c_int) ->
     *mut XImage;
    pub fn XInitImage(arg1: *mut XImage) -> ::libc::c_int;
    pub fn XGetImage(arg1: *mut Display, arg2: Drawable, arg3: ::libc::c_int,
                     arg4: ::libc::c_int, arg5: ::libc::c_uint,
                     arg6: ::libc::c_uint, arg7: ::libc::c_ulong,
                     arg8: ::libc::c_int) -> *mut XImage;
    pub fn XGetSubImage(arg1: *mut Display, arg2: Drawable,
                        arg3: ::libc::c_int, arg4: ::libc::c_int,
                        arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                        arg7: ::libc::c_ulong, arg8: ::libc::c_int,
                        arg9: *mut XImage, arg10: ::libc::c_int,
                        arg11: ::libc::c_int) -> *mut XImage;
    pub fn XOpenDisplay(arg1: *const ::libc::c_char) -> *mut Display;
    pub fn XrmInitialize();
    pub fn XFetchBytes(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn XFetchBuffer(arg1: *mut Display, arg2: *mut ::libc::c_int,
                        arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) ->
     *mut ::libc::c_char;
    pub fn XGetAtomNames(arg1: *mut Display, arg2: *mut Atom,
                         arg3: ::libc::c_int, arg4: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn XGetDefault(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn XDisplayName(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn XKeysymToString(arg1: KeySym) -> *mut ::libc::c_char;
    pub fn XSynchronize(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::std::option::Option<extern "C" fn(arg1: *mut Display)
                               -> ::libc::c_int>;
    pub fn XSetAfterFunction(arg1: *mut Display,
                             arg2:
                                 ::std::option::Option<extern "C" fn
                                                           (arg1:
                                                                *mut Display)
                                                           -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn(arg1: *mut Display)
                               -> ::libc::c_int>;
    pub fn XInternAtom(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: ::libc::c_int) -> Atom;
    pub fn XInternAtoms(arg1: *mut Display, arg2: *mut *mut ::libc::c_char,
                        arg3: ::libc::c_int, arg4: ::libc::c_int,
                        arg5: *mut Atom) -> ::libc::c_int;
    pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) ->
     Colormap;
    pub fn XCreateColormap(arg1: *mut Display, arg2: Window,
                           arg3: *mut Visual, arg4: ::libc::c_int) ->
     Colormap;
    pub fn XCreatePixmapCursor(arg1: *mut Display, arg2: Pixmap, arg3: Pixmap,
                               arg4: *mut XColor, arg5: *mut XColor,
                               arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     Cursor;
    pub fn XCreateGlyphCursor(arg1: *mut Display, arg2: Font, arg3: Font,
                              arg4: ::libc::c_uint, arg5: ::libc::c_uint,
                              arg6: *const XColor, arg7: *const XColor) ->
     Cursor;
    pub fn XCreateFontCursor(arg1: *mut Display, arg2: ::libc::c_uint) ->
     Cursor;
    pub fn XLoadFont(arg1: *mut Display, arg2: *const ::libc::c_char) -> Font;
    pub fn XCreateGC(arg1: *mut Display, arg2: Drawable,
                     arg3: ::libc::c_ulong, arg4: *mut XGCValues) -> GC;
    pub fn XGContextFromGC(arg1: GC) -> GContext;
    pub fn XFlushGC(arg1: *mut Display, arg2: GC);
    pub fn XCreatePixmap(arg1: *mut Display, arg2: Drawable,
                         arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                         arg5: ::libc::c_uint) -> Pixmap;
    pub fn XCreateBitmapFromData(arg1: *mut Display, arg2: Drawable,
                                 arg3: *const ::libc::c_char,
                                 arg4: ::libc::c_uint, arg5: ::libc::c_uint)
     -> Pixmap;
    pub fn XCreatePixmapFromBitmapData(arg1: *mut Display, arg2: Drawable,
                                       arg3: *mut ::libc::c_char,
                                       arg4: ::libc::c_uint,
                                       arg5: ::libc::c_uint,
                                       arg6: ::libc::c_ulong,
                                       arg7: ::libc::c_ulong,
                                       arg8: ::libc::c_uint) -> Pixmap;
    pub fn XCreateSimpleWindow(arg1: *mut Display, arg2: Window,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                               arg7: ::libc::c_uint, arg8: ::libc::c_ulong,
                               arg9: ::libc::c_ulong) -> Window;
    pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
    pub fn XCreateWindow(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_int, arg4: ::libc::c_int,
                         arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                         arg7: ::libc::c_uint, arg8: ::libc::c_int,
                         arg9: ::libc::c_uint, arg10: *mut Visual,
                         arg11: ::libc::c_ulong,
                         arg12: *mut XSetWindowAttributes) -> Window;
    pub fn XListInstalledColormaps(arg1: *mut Display, arg2: Window,
                                   arg3: *mut ::libc::c_int) -> *mut Colormap;
    pub fn XListFonts(arg1: *mut Display, arg2: *const ::libc::c_char,
                      arg3: ::libc::c_int, arg4: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListFontsWithInfo(arg1: *mut Display, arg2: *const ::libc::c_char,
                              arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                              arg5: *mut *mut XFontStruct) ->
     *mut *mut ::libc::c_char;
    pub fn XGetFontPath(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListExtensions(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListProperties(arg1: *mut Display, arg2: Window,
                           arg3: *mut ::libc::c_int) -> *mut Atom;
    pub fn XListHosts(arg1: *mut Display, arg2: *mut ::libc::c_int,
                      arg3: *mut ::libc::c_int) -> *mut XHostAddress;
    pub fn XKeycodeToKeysym(arg1: *mut Display, arg2: KeyCode,
                            arg3: ::libc::c_int) -> KeySym;
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::libc::c_int) -> KeySym;
    pub fn XGetKeyboardMapping(arg1: *mut Display, arg2: KeyCode,
                               arg3: ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut KeySym;
    pub fn XStringToKeysym(arg1: *const ::libc::c_char) -> KeySym;
    pub fn XMaxRequestSize(arg1: *mut Display) -> ::libc::c_long;
    pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> ::libc::c_long;
    pub fn XResourceManagerString(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::libc::c_char;
    pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
    pub fn XInitThreads() -> ::libc::c_int;
    pub fn XLockDisplay(arg1: *mut Display);
    pub fn XUnlockDisplay(arg1: *mut Display);
    pub fn XInitExtension(arg1: *mut Display, arg2: *const ::libc::c_char) ->
     *mut XExtCodes;
    pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
    pub fn XFindOnExtensionList(arg1: *mut *mut XExtData, arg2: ::libc::c_int)
     -> *mut XExtData;
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
    pub fn XRootWindow(arg1: *mut Display, arg2: ::libc::c_int) -> Window;
    pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
    pub fn XDefaultVisual(arg1: *mut Display, arg2: ::libc::c_int) ->
     *mut Visual;
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
    pub fn XDefaultGC(arg1: *mut Display, arg2: ::libc::c_int) -> GC;
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
    pub fn XBlackPixel(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_ulong;
    pub fn XWhitePixel(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_ulong;
    pub fn XAllPlanes() -> ::libc::c_ulong;
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::libc::c_ulong;
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::libc::c_ulong;
    pub fn XNextRequest(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XServerVendor(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XDisplayString(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XDefaultColormap(arg1: *mut Display, arg2: ::libc::c_int) ->
     Colormap;
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
    pub fn XScreenOfDisplay(arg1: *mut Display, arg2: ::libc::c_int) ->
     *mut Screen;
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::libc::c_long;
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
    pub fn XListPixmapFormats(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut XPixmapFormatValues;
    pub fn XListDepths(arg1: *mut Display, arg2: ::libc::c_int,
                       arg3: *mut ::libc::c_int) -> *mut ::libc::c_int;
    pub fn XReconfigureWMWindow(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_int, arg4: ::libc::c_uint,
                                arg5: *mut XWindowChanges) -> ::libc::c_int;
    pub fn XGetWMProtocols(arg1: *mut Display, arg2: Window,
                           arg3: *mut *mut Atom, arg4: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetWMProtocols(arg1: *mut Display, arg2: Window, arg3: *mut Atom,
                           arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XIconifyWindow(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XWithdrawWindow(arg1: *mut Display, arg2: Window,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut *mut ::libc::c_char,
                       arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut *mut Window,
                                 arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XSetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut Window, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFreeStringList(arg1: *mut *mut ::libc::c_char);
    pub fn XSetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: Window) -> ::libc::c_int;
    pub fn XActivateScreenSaver(arg1: *mut Display) -> ::libc::c_int;
    pub fn XAddHost(arg1: *mut Display, arg2: *mut XHostAddress) ->
     ::libc::c_int;
    pub fn XAddHosts(arg1: *mut Display, arg2: *mut XHostAddress,
                     arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XAddToExtensionList(arg1: *mut *mut Struct__XExtData,
                               arg2: *mut XExtData) -> ::libc::c_int;
    pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XAllocColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XAllocColorCells(arg1: *mut Display, arg2: Colormap,
                            arg3: ::libc::c_int, arg4: *mut ::libc::c_ulong,
                            arg5: ::libc::c_uint, arg6: *mut ::libc::c_ulong,
                            arg7: ::libc::c_uint) -> ::libc::c_int;
    pub fn XAllocColorPlanes(arg1: *mut Display, arg2: Colormap,
                             arg3: ::libc::c_int, arg4: *mut ::libc::c_ulong,
                             arg5: ::libc::c_int, arg6: ::libc::c_int,
                             arg7: ::libc::c_int, arg8: ::libc::c_int,
                             arg9: *mut ::libc::c_ulong,
                             arg10: *mut ::libc::c_ulong,
                             arg11: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn XAllocNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *const ::libc::c_char, arg4: *mut XColor,
                            arg5: *mut XColor) -> ::libc::c_int;
    pub fn XAllowEvents(arg1: *mut Display, arg2: ::libc::c_int, arg3: Time)
     -> ::libc::c_int;
    pub fn XAutoRepeatOff(arg1: *mut Display) -> ::libc::c_int;
    pub fn XAutoRepeatOn(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBell(arg1: *mut Display, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn XBitmapBitOrder(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBitmapPad(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBitmapUnit(arg1: *mut Display) -> ::libc::c_int;
    pub fn XCellsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XChangeActivePointerGrab(arg1: *mut Display, arg2: ::libc::c_uint,
                                    arg3: Cursor, arg4: Time) ->
     ::libc::c_int;
    pub fn XChangeGC(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                     arg4: *mut XGCValues) -> ::libc::c_int;
    pub fn XChangeKeyboardControl(arg1: *mut Display, arg2: ::libc::c_ulong,
                                  arg3: *mut XKeyboardControl) ->
     ::libc::c_int;
    pub fn XChangeKeyboardMapping(arg1: *mut Display, arg2: ::libc::c_int,
                                  arg3: ::libc::c_int, arg4: *mut KeySym,
                                  arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangePointerControl(arg1: *mut Display, arg2: ::libc::c_int,
                                 arg3: ::libc::c_int, arg4: ::libc::c_int,
                                 arg5: ::libc::c_int, arg6: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XChangeProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                           arg4: Atom, arg5: ::libc::c_int,
                           arg6: ::libc::c_int, arg7: *const ::libc::c_uchar,
                           arg8: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangeSaveSet(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangeWindowAttributes(arg1: *mut Display, arg2: Window,
                                   arg3: ::libc::c_ulong,
                                   arg4: *mut XSetWindowAttributes) ->
     ::libc::c_int;
    pub fn XCheckIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                         arg3:
                             ::std::option::Option<extern "C" fn
                                                       (arg1: *mut Display,
                                                        arg2: *mut XEvent,
                                                        arg3: XPointer)
                                                       -> ::libc::c_int>,
                         arg4: XPointer) -> ::libc::c_int;
    pub fn XCheckMaskEvent(arg1: *mut Display, arg2: ::libc::c_long,
                           arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XCheckTypedEvent(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XCheckTypedWindowEvent(arg1: *mut Display, arg2: Window,
                                  arg3: ::libc::c_int, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XCheckWindowEvent(arg1: *mut Display, arg2: Window,
                             arg3: ::libc::c_long, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XCirculateSubwindows(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XCirculateSubwindowsDown(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XCirculateSubwindowsUp(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XClearArea(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                      arg4: ::libc::c_int, arg5: ::libc::c_uint,
                      arg6: ::libc::c_uint, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XCloseDisplay(arg1: *mut Display) -> ::libc::c_int;
    pub fn XConfigureWindow(arg1: *mut Display, arg2: Window,
                            arg3: ::libc::c_uint, arg4: *mut XWindowChanges)
     -> ::libc::c_int;
    pub fn XConnectionNumber(arg1: *mut Display) -> ::libc::c_int;
    pub fn XConvertSelection(arg1: *mut Display, arg2: Atom, arg3: Atom,
                             arg4: Atom, arg5: Window, arg6: Time) ->
     ::libc::c_int;
    pub fn XCopyArea(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                     arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                     arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                     arg9: ::libc::c_int, arg10: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XCopyGC(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                   arg4: GC) -> ::libc::c_int;
    pub fn XCopyPlane(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                      arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                      arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                      arg9: ::libc::c_int, arg10: ::libc::c_int,
                      arg11: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XDefaultDepth(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDefaultScreen(arg1: *mut Display) -> ::libc::c_int;
    pub fn XDefineCursor(arg1: *mut Display, arg2: Window, arg3: Cursor) ->
     ::libc::c_int;
    pub fn XDeleteProperty(arg1: *mut Display, arg2: Window, arg3: Atom) ->
     ::libc::c_int;
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XDestroySubwindows(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XDoesBackingStore(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDisableAccessControl(arg1: *mut Display) -> ::libc::c_int;
    pub fn XDisplayCells(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayHeight(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayHeightMM(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayKeycodes(arg1: *mut Display, arg2: *mut ::libc::c_int,
                            arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XDisplayPlanes(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayWidth(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayWidthMM(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawArc(arg1: *mut Display, arg2: Drawable, arg3: GC,
                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                    arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                    arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawImageString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                            arg4: ::libc::c_int, arg5: ::libc::c_int,
                            arg6: *const ::libc::c_char, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn XDrawImageString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                              arg4: ::libc::c_int, arg5: ::libc::c_int,
                              arg6: *const XChar2b, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawLine(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: ::libc::c_int, arg5: ::libc::c_int,
                     arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawLines(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: *mut XPoint, arg5: ::libc::c_int,
                      arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawPoint(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: ::libc::c_int, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawPoints(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: *mut XPoint, arg5: ::libc::c_int,
                       arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: ::libc::c_int, arg5: ::libc::c_int,
                          arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XDrawRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawSegments(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: *mut XSegment, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *const ::libc::c_char, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: ::libc::c_int, arg5: ::libc::c_int,
                         arg6: *const XChar2b, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: ::libc::c_int, arg5: ::libc::c_int,
                     arg6: *mut XTextItem, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawText16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XTextItem16, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XEnableAccessControl(arg1: *mut Display) -> ::libc::c_int;
    pub fn XEventsQueued(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFetchName(arg1: *mut Display, arg2: Window,
                      arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFillArc(arg1: *mut Display, arg2: Drawable, arg3: GC,
                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                    arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                    arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFillArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XFillPolygon(arg1: *mut Display, arg2: Drawable, arg3: GC,
                        arg4: *mut XPoint, arg5: ::libc::c_int,
                        arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFillRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: ::libc::c_int, arg5: ::libc::c_int,
                          arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XFillRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFlush(arg1: *mut Display) -> ::libc::c_int;
    pub fn XForceScreenSaver(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFree(arg1: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> ::libc::c_int;
    pub fn XFreeColors(arg1: *mut Display, arg2: Colormap,
                       arg3: *mut ::libc::c_ulong, arg4: ::libc::c_int,
                       arg5: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> ::libc::c_int;
    pub fn XFreeExtensionList(arg1: *mut *mut ::libc::c_char) ->
     ::libc::c_int;
    pub fn XFreeFont(arg1: *mut Display, arg2: *mut XFontStruct) ->
     ::libc::c_int;
    pub fn XFreeFontInfo(arg1: *mut *mut ::libc::c_char,
                         arg2: *mut XFontStruct, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFreeFontNames(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFreeFontPath(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::libc::c_int;
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::libc::c_int;
    pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> ::libc::c_int;
    pub fn XGeometry(arg1: *mut Display, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                     arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                     arg7: ::libc::c_uint, arg8: ::libc::c_int,
                     arg9: ::libc::c_int, arg10: *mut ::libc::c_int,
                     arg11: *mut ::libc::c_int, arg12: *mut ::libc::c_int,
                     arg13: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetErrorDatabaseText(arg1: *mut Display,
                                 arg2: *const ::libc::c_char,
                                 arg3: *const ::libc::c_char,
                                 arg4: *const ::libc::c_char,
                                 arg5: *mut ::libc::c_char,
                                 arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetErrorText(arg1: *mut Display, arg2: ::libc::c_int,
                         arg3: *mut ::libc::c_char, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XGetFontProperty(arg1: *mut XFontStruct, arg2: Atom,
                            arg3: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn XGetGCValues(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                        arg4: *mut XGCValues) -> ::libc::c_int;
    pub fn XGetGeometry(arg1: *mut Display, arg2: Drawable, arg3: *mut Window,
                        arg4: *mut ::libc::c_int, arg5: *mut ::libc::c_int,
                        arg6: *mut ::libc::c_uint, arg7: *mut ::libc::c_uint,
                        arg8: *mut ::libc::c_uint, arg9: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn XGetIconName(arg1: *mut Display, arg2: Window,
                        arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XGetInputFocus(arg1: *mut Display, arg2: *mut Window,
                          arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetKeyboardControl(arg1: *mut Display, arg2: *mut XKeyboardState)
     -> ::libc::c_int;
    pub fn XGetPointerControl(arg1: *mut Display, arg2: *mut ::libc::c_int,
                              arg3: *mut ::libc::c_int,
                              arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetPointerMapping(arg1: *mut Display, arg2: *mut ::libc::c_uchar,
                              arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetScreenSaver(arg1: *mut Display, arg2: *mut ::libc::c_int,
                           arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int,
                           arg5: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: *mut Window) -> ::libc::c_int;
    pub fn XGetWindowProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                              arg4: ::libc::c_long, arg5: ::libc::c_long,
                              arg6: ::libc::c_int, arg7: Atom,
                              arg8: *mut Atom, arg9: *mut ::libc::c_int,
                              arg10: *mut ::libc::c_ulong,
                              arg11: *mut ::libc::c_ulong,
                              arg12: *mut *mut ::libc::c_uchar) ->
     ::libc::c_int;
    pub fn XGetWindowAttributes(arg1: *mut Display, arg2: Window,
                                arg3: *mut XWindowAttributes) ->
     ::libc::c_int;
    pub fn XGrabButton(arg1: *mut Display, arg2: ::libc::c_uint,
                       arg3: ::libc::c_uint, arg4: Window,
                       arg5: ::libc::c_int, arg6: ::libc::c_uint,
                       arg7: ::libc::c_int, arg8: ::libc::c_int, arg9: Window,
                       arg10: Cursor) -> ::libc::c_int;
    pub fn XGrabKey(arg1: *mut Display, arg2: ::libc::c_int,
                    arg3: ::libc::c_uint, arg4: Window, arg5: ::libc::c_int,
                    arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XGrabKeyboard(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_int, arg4: ::libc::c_int,
                         arg5: ::libc::c_int, arg6: Time) -> ::libc::c_int;
    pub fn XGrabPointer(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                        arg4: ::libc::c_uint, arg5: ::libc::c_int,
                        arg6: ::libc::c_int, arg7: Window, arg8: Cursor,
                        arg9: Time) -> ::libc::c_int;
    pub fn XGrabServer(arg1: *mut Display) -> ::libc::c_int;
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XHeightOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                    arg3:
                        ::std::option::Option<extern "C" fn
                                                  (arg1: *mut Display,
                                                   arg2: *mut XEvent,
                                                   arg3: XPointer)
                                                  -> ::libc::c_int>,
                    arg4: XPointer) -> ::libc::c_int;
    pub fn XImageByteOrder(arg1: *mut Display) -> ::libc::c_int;
    pub fn XInstallColormap(arg1: *mut Display, arg2: Colormap) ->
     ::libc::c_int;
    pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
    pub fn XKillClient(arg1: *mut Display, arg2: XID) -> ::libc::c_int;
    pub fn XLookupColor(arg1: *mut Display, arg2: Colormap,
                        arg3: *const ::libc::c_char, arg4: *mut XColor,
                        arg5: *mut XColor) -> ::libc::c_int;
    pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMaskEvent(arg1: *mut Display, arg2: ::libc::c_long,
                      arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XMoveResizeWindow(arg1: *mut Display, arg2: Window,
                             arg3: ::libc::c_int, arg4: ::libc::c_int,
                             arg5: ::libc::c_uint, arg6: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XMoveWindow(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                       arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::libc::c_int;
    pub fn XNoOp(arg1: *mut Display) -> ::libc::c_int;
    pub fn XParseColor(arg1: *mut Display, arg2: Colormap,
                       arg3: *const ::libc::c_char, arg4: *mut XColor) ->
     ::libc::c_int;
    pub fn XParseGeometry(arg1: *const ::libc::c_char,
                          arg2: *mut ::libc::c_int, arg3: *mut ::libc::c_int,
                          arg4: *mut ::libc::c_uint,
                          arg5: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::libc::c_int;
    pub fn XPeekIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                        arg3:
                            ::std::option::Option<extern "C" fn
                                                      (arg1: *mut Display,
                                                       arg2: *mut XEvent,
                                                       arg3: XPointer)
                                                      -> ::libc::c_int>,
                        arg4: XPointer) -> ::libc::c_int;
    pub fn XPending(arg1: *mut Display) -> ::libc::c_int;
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XProtocolRevision(arg1: *mut Display) -> ::libc::c_int;
    pub fn XProtocolVersion(arg1: *mut Display) -> ::libc::c_int;
    pub fn XPutBackEvent(arg1: *mut Display, arg2: *mut XEvent) ->
     ::libc::c_int;
    pub fn XPutImage(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XImage, arg5: ::libc::c_int,
                     arg6: ::libc::c_int, arg7: ::libc::c_int,
                     arg8: ::libc::c_int, arg9: ::libc::c_uint,
                     arg10: ::libc::c_uint) -> ::libc::c_int;
    pub fn XQLength(arg1: *mut Display) -> ::libc::c_int;
    pub fn XQueryBestCursor(arg1: *mut Display, arg2: Drawable,
                            arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                            arg5: *mut ::libc::c_uint,
                            arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestSize(arg1: *mut Display, arg2: ::libc::c_int,
                          arg3: Drawable, arg4: ::libc::c_uint,
                          arg5: ::libc::c_uint, arg6: *mut ::libc::c_uint,
                          arg7: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestStipple(arg1: *mut Display, arg2: Drawable,
                             arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestTile(arg1: *mut Display, arg2: Drawable,
                          arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                          arg5: *mut ::libc::c_uint,
                          arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XQueryColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XQueryExtension(arg1: *mut Display, arg2: *const ::libc::c_char,
                           arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int,
                           arg5: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XQueryKeymap(arg1: *mut Display, arg2: [::libc::c_char, ..32u]) ->
     ::libc::c_int;
    pub fn XQueryPointer(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                         arg4: *mut Window, arg5: *mut ::libc::c_int,
                         arg6: *mut ::libc::c_int, arg7: *mut ::libc::c_int,
                         arg8: *mut ::libc::c_int, arg9: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn XQueryTextExtents(arg1: *mut Display, arg2: XID,
                             arg3: *const ::libc::c_char, arg4: ::libc::c_int,
                             arg5: *mut ::libc::c_int,
                             arg6: *mut ::libc::c_int,
                             arg7: *mut ::libc::c_int, arg8: *mut XCharStruct)
     -> ::libc::c_int;
    pub fn XQueryTextExtents16(arg1: *mut Display, arg2: XID,
                               arg3: *const XChar2b, arg4: ::libc::c_int,
                               arg5: *mut ::libc::c_int,
                               arg6: *mut ::libc::c_int,
                               arg7: *mut ::libc::c_int,
                               arg8: *mut XCharStruct) -> ::libc::c_int;
    pub fn XQueryTree(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                      arg4: *mut Window, arg5: *mut *mut Window,
                      arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XReadBitmapFile(arg1: *mut Display, arg2: Drawable,
                           arg3: *const ::libc::c_char,
                           arg4: *mut ::libc::c_uint,
                           arg5: *mut ::libc::c_uint, arg6: *mut Pixmap,
                           arg7: *mut ::libc::c_int, arg8: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn XReadBitmapFileData(arg1: *const ::libc::c_char,
                               arg2: *mut ::libc::c_uint,
                               arg3: *mut ::libc::c_uint,
                               arg4: *mut *mut ::libc::c_uchar,
                               arg5: *mut ::libc::c_int,
                               arg6: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XRebindKeysym(arg1: *mut Display, arg2: KeySym, arg3: *mut KeySym,
                         arg4: ::libc::c_int, arg5: *const ::libc::c_uchar,
                         arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XRecolorCursor(arg1: *mut Display, arg2: Cursor, arg3: *mut XColor,
                          arg4: *mut XColor) -> ::libc::c_int;
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::libc::c_int;
    pub fn XRemoveFromSaveSet(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XRemoveHost(arg1: *mut Display, arg2: *mut XHostAddress) ->
     ::libc::c_int;
    pub fn XRemoveHosts(arg1: *mut Display, arg2: *mut XHostAddress,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XReparentWindow(arg1: *mut Display, arg2: Window, arg3: Window,
                           arg4: ::libc::c_int, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XResetScreenSaver(arg1: *mut Display) -> ::libc::c_int;
    pub fn XResizeWindow(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_uint, arg4: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XRestackWindows(arg1: *mut Display, arg2: *mut Window,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XRotateBuffers(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XRotateWindowProperties(arg1: *mut Display, arg2: Window,
                                   arg3: *mut Atom, arg4: ::libc::c_int,
                                   arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XScreenCount(arg1: *mut Display) -> ::libc::c_int;
    pub fn XSelectInput(arg1: *mut Display, arg2: Window,
                        arg3: ::libc::c_long) -> ::libc::c_int;
    pub fn XSendEvent(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                      arg4: ::libc::c_long, arg5: *mut XEvent) ->
     ::libc::c_int;
    pub fn XSetAccessControl(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetArcMode(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetBackground(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetClipMask(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetClipOrigin(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                          arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetClipRectangles(arg1: *mut Display, arg2: GC,
                              arg3: ::libc::c_int, arg4: ::libc::c_int,
                              arg5: *mut XRectangle, arg6: ::libc::c_int,
                              arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetCloseDownMode(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut ::libc::c_char, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetDashes(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                      arg4: *const ::libc::c_char, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFillRule(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFillStyle(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) ->
     ::libc::c_int;
    pub fn XSetFontPath(arg1: *mut Display, arg2: *mut *mut ::libc::c_char,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetForeground(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetFunction(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetGraphicsExposures(arg1: *mut Display, arg2: GC,
                                 arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetIconName(arg1: *mut Display, arg2: Window,
                        arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XSetInputFocus(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int, arg4: Time) -> ::libc::c_int;
    pub fn XSetLineAttributes(arg1: *mut Display, arg2: GC,
                              arg3: ::libc::c_uint, arg4: ::libc::c_int,
                              arg5: ::libc::c_int, arg6: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetModifierMapping(arg1: *mut Display, arg2: *mut XModifierKeymap)
     -> ::libc::c_int;
    pub fn XSetPlaneMask(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetPointerMapping(arg1: *mut Display,
                              arg2: *const ::libc::c_uchar,
                              arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetScreenSaver(arg1: *mut Display, arg2: ::libc::c_int,
                           arg3: ::libc::c_int, arg4: ::libc::c_int,
                           arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetSelectionOwner(arg1: *mut Display, arg2: Atom, arg3: Window,
                              arg4: Time) -> ::libc::c_int;
    pub fn XSetState(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                     arg4: ::libc::c_ulong, arg5: ::libc::c_int,
                     arg6: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetStipple(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetSubwindowMode(arg1: *mut Display, arg2: GC,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetTSOrigin(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetTile(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetWindowBackground(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetWindowBackgroundPixmap(arg1: *mut Display, arg2: Window,
                                      arg3: Pixmap) -> ::libc::c_int;
    pub fn XSetWindowBorder(arg1: *mut Display, arg2: Window,
                            arg3: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetWindowBorderPixmap(arg1: *mut Display, arg2: Window,
                                  arg3: Pixmap) -> ::libc::c_int;
    pub fn XSetWindowBorderWidth(arg1: *mut Display, arg2: Window,
                                 arg3: ::libc::c_uint) -> ::libc::c_int;
    pub fn XSetWindowColormap(arg1: *mut Display, arg2: Window,
                              arg3: Colormap) -> ::libc::c_int;
    pub fn XStoreBuffer(arg1: *mut Display, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XStoreBytes(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XStoreColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XStoreColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XStoreName(arg1: *mut Display, arg2: Window,
                      arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XStoreNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *const ::libc::c_char,
                            arg4: ::libc::c_ulong, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSync(arg1: *mut Display, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn XTextExtents(arg1: *mut XFontStruct, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                        arg5: *mut ::libc::c_int, arg6: *mut ::libc::c_int,
                        arg7: *mut XCharStruct) -> ::libc::c_int;
    pub fn XTextExtents16(arg1: *mut XFontStruct, arg2: *const XChar2b,
                          arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                          arg5: *mut ::libc::c_int, arg6: *mut ::libc::c_int,
                          arg7: *mut XCharStruct) -> ::libc::c_int;
    pub fn XTextWidth(arg1: *mut XFontStruct, arg2: *const ::libc::c_char,
                      arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XTextWidth16(arg1: *mut XFontStruct, arg2: *const XChar2b,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XTranslateCoordinates(arg1: *mut Display, arg2: Window,
                                 arg3: Window, arg4: ::libc::c_int,
                                 arg5: ::libc::c_int,
                                 arg6: *mut ::libc::c_int,
                                 arg7: *mut ::libc::c_int, arg8: *mut Window)
     -> ::libc::c_int;
    pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XUngrabButton(arg1: *mut Display, arg2: ::libc::c_uint,
                         arg3: ::libc::c_uint, arg4: Window) -> ::libc::c_int;
    pub fn XUngrabKey(arg1: *mut Display, arg2: ::libc::c_int,
                      arg3: ::libc::c_uint, arg4: Window) -> ::libc::c_int;
    pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> ::libc::c_int;
    pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> ::libc::c_int;
    pub fn XUngrabServer(arg1: *mut Display) -> ::libc::c_int;
    pub fn XUninstallColormap(arg1: *mut Display, arg2: Colormap) ->
     ::libc::c_int;
    pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> ::libc::c_int;
    pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XVendorRelease(arg1: *mut Display) -> ::libc::c_int;
    pub fn XWarpPointer(arg1: *mut Display, arg2: Window, arg3: Window,
                        arg4: ::libc::c_int, arg5: ::libc::c_int,
                        arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                        arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XWidthOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XWindowEvent(arg1: *mut Display, arg2: Window,
                        arg3: ::libc::c_long, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XWriteBitmapFile(arg1: *mut Display, arg2: *const ::libc::c_char,
                            arg3: Pixmap, arg4: ::libc::c_uint,
                            arg5: ::libc::c_uint, arg6: ::libc::c_int,
                            arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn XSupportsLocale() -> ::libc::c_int;
    pub fn XSetLocaleModifiers(arg1: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn XOpenOM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> XOM;
    pub fn XCloseOM(arg1: XOM) -> ::libc::c_int;
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::libc::c_char;
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::libc::c_char;
    pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
    pub fn XLocaleOfOM(arg1: XOM) -> *mut ::libc::c_char;
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
    pub fn XDestroyOC(arg1: XOC);
    pub fn XOMOfOC(arg1: XOC) -> XOM;
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::libc::c_char;
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::libc::c_char;
    pub fn XCreateFontSet(arg1: *mut Display, arg2: *const ::libc::c_char,
                          arg3: *mut *mut *mut ::libc::c_char,
                          arg4: *mut ::libc::c_int,
                          arg5: *mut *mut ::libc::c_char) -> XFontSet;
    pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
    pub fn XFontsOfFontSet(arg1: XFontSet, arg2: *mut *mut *mut XFontStruct,
                           arg3: *mut *mut *mut ::libc::c_char) ->
     ::libc::c_int;
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::libc::c_char;
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::libc::c_char;
    pub fn XContextDependentDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XContextualDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
    pub fn XmbTextEscapement(arg1: XFontSet, arg2: *const ::libc::c_char,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XwcTextEscapement(arg1: XFontSet, arg2: *const wchar_t,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn Xutf8TextEscapement(arg1: XFontSet, arg2: *const ::libc::c_char,
                               arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XmbTextExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                          arg3: ::libc::c_int, arg4: *mut XRectangle,
                          arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn XwcTextExtents(arg1: XFontSet, arg2: *const wchar_t,
                          arg3: ::libc::c_int, arg4: *mut XRectangle,
                          arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn Xutf8TextExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                            arg3: ::libc::c_int, arg4: *mut XRectangle,
                            arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn XmbTextPerCharExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                                 arg3: ::libc::c_int, arg4: *mut XRectangle,
                                 arg5: *mut XRectangle, arg6: ::libc::c_int,
                                 arg7: *mut ::libc::c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> ::libc::c_int;
    pub fn XwcTextPerCharExtents(arg1: XFontSet, arg2: *const wchar_t,
                                 arg3: ::libc::c_int, arg4: *mut XRectangle,
                                 arg5: *mut XRectangle, arg6: ::libc::c_int,
                                 arg7: *mut ::libc::c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> ::libc::c_int;
    pub fn Xutf8TextPerCharExtents(arg1: XFontSet,
                                   arg2: *const ::libc::c_char,
                                   arg3: ::libc::c_int, arg4: *mut XRectangle,
                                   arg5: *mut XRectangle, arg6: ::libc::c_int,
                                   arg7: *mut ::libc::c_int,
                                   arg8: *mut XRectangle,
                                   arg9: *mut XRectangle) -> ::libc::c_int;
    pub fn XmbDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XmbTextItem, arg7: ::libc::c_int);
    pub fn XwcDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XwcTextItem, arg7: ::libc::c_int);
    pub fn Xutf8DrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: ::libc::c_int, arg5: ::libc::c_int,
                         arg6: *mut XmbTextItem, arg7: ::libc::c_int);
    pub fn XmbDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                         arg7: *const ::libc::c_char, arg8: ::libc::c_int);
    pub fn XwcDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                         arg7: *const wchar_t, arg8: ::libc::c_int);
    pub fn Xutf8DrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                           arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                           arg7: *const ::libc::c_char, arg8: ::libc::c_int);
    pub fn XmbDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                              arg6: ::libc::c_int,
                              arg7: *const ::libc::c_char,
                              arg8: ::libc::c_int);
    pub fn XwcDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                              arg6: ::libc::c_int, arg7: *const wchar_t,
                              arg8: ::libc::c_int);
    pub fn Xutf8DrawImageString(arg1: *mut Display, arg2: Drawable,
                                arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                                arg6: ::libc::c_int,
                                arg7: *const ::libc::c_char,
                                arg8: ::libc::c_int);
    pub fn XOpenIM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char) ->
     XIM;
    pub fn XCloseIM(arg1: XIM) -> ::libc::c_int;
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::libc::c_char;
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::libc::c_char;
    pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
    pub fn XLocaleOfIM(arg1: XIM) -> *mut ::libc::c_char;
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
    pub fn XDestroyIC(arg1: XIC);
    pub fn XSetICFocus(arg1: XIC);
    pub fn XUnsetICFocus(arg1: XIC);
    pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
    pub fn XmbResetIC(arg1: XIC) -> *mut ::libc::c_char;
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::libc::c_char;
    pub fn XSetICValues(arg1: XIC, ...) -> *mut ::libc::c_char;
    pub fn XGetICValues(arg1: XIC, ...) -> *mut ::libc::c_char;
    pub fn XIMOfIC(arg1: XIC) -> XIM;
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::libc::c_int;
    pub fn XmbLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                           arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XwcLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut wchar_t, arg4: ::libc::c_int,
                           arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn Xutf8LookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                             arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                             arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XVaCreateNestedList(arg1: ::libc::c_int, ...) -> XVaNestedList;
    pub fn XRegisterIMInstantiateCallback(arg1: *mut Display,
                                          arg2: *mut Struct__XrmHashBucketRec,
                                          arg3: *mut ::libc::c_char,
                                          arg4: *mut ::libc::c_char,
                                          arg5: XIDProc, arg6: XPointer) ->
     ::libc::c_int;
    pub fn XUnregisterIMInstantiateCallback(arg1: *mut Display,
                                            arg2:
                                                *mut Struct__XrmHashBucketRec,
                                            arg3: *mut ::libc::c_char,
                                            arg4: *mut ::libc::c_char,
                                            arg5: XIDProc, arg6: XPointer) ->
     ::libc::c_int;
    pub fn XInternalConnectionNumbers(arg1: *mut Display,
                                      arg2: *mut *mut ::libc::c_int,
                                      arg3: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XProcessInternalConnection(arg1: *mut Display,
                                      arg2: ::libc::c_int);
    pub fn XAddConnectionWatch(arg1: *mut Display, arg2: XConnectionWatchProc,
                               arg3: XPointer) -> ::libc::c_int;
    pub fn XRemoveConnectionWatch(arg1: *mut Display,
                                  arg2: XConnectionWatchProc, arg3: XPointer);
    pub fn XSetAuthorization(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                             arg3: *mut ::libc::c_char, arg4: ::libc::c_int);
    pub fn _Xmbtowc(arg1: *mut wchar_t, arg2: *mut ::libc::c_char,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn _Xwctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) ->
     ::libc::c_int;
    pub fn XGetEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie)
     -> ::libc::c_int;
    pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
}
