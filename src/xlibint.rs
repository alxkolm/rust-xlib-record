#![allow(dead_code)]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */


pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
struct Struct_Unnamed1 {
    pub __val: [::libc::c_int, ..2u],
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type size_t = ::libc::c_ulong;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
struct Struct_Unnamed2 {
    pub __val: [::libc::c_ulong, ..16u],
}
pub type __sigset_t = Struct_Unnamed2;
pub type sigset_t = __sigset_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
struct Struct_Unnamed3 {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_set = Struct_Unnamed3;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
pub struct Union_Unnamed4 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed4 {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..40u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
pub type pthread_mutex_t = Union_Unnamed4;
#[repr(C)]
pub struct Union_Unnamed5 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed5 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_mutexattr_t = Union_Unnamed5;
#[repr(C)]
pub struct Union_Unnamed6 {
    pub data: [u64, ..6u],
}
impl Union_Unnamed6 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed7 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..48u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed7 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
pub type pthread_cond_t = Union_Unnamed6;
#[repr(C)]
pub struct Union_Unnamed8 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed8 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_condattr_t = Union_Unnamed8;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed9 {
    pub data: [u64, ..7u],
}
impl Union_Unnamed9 {
    pub fn __data(&mut self) -> *mut Struct_Unnamed10 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed10 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
pub type pthread_rwlock_t = Union_Unnamed9;
#[repr(C)]
pub struct Union_Unnamed11 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed11 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..8u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_rwlockattr_t = Union_Unnamed11;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed12 {
    pub data: [u64, ..4u],
}
impl Union_Unnamed12 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..32u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrier_t = Union_Unnamed12;
#[repr(C)]
pub struct Union_Unnamed13 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed13 {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_barrierattr_t = Union_Unnamed13;
pub type XID = ::libc::c_ulong;
pub type Mask = ::libc::c_ulong;
pub type Atom = ::libc::c_ulong;
pub type VisualID = ::libc::c_ulong;
pub type Time = ::libc::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Cursor = XID;
pub type Colormap = XID;
pub type GContext = XID;
pub type KeySym = XID;
pub type KeyCode = ::libc::c_uchar;
pub type ptrdiff_t = ::libc::c_long;
pub type wchar_t = ::libc::c_int;
pub type XPointer = *mut ::libc::c_char;
#[repr(C)]
pub struct Struct__XExtData {
    pub number: ::libc::c_int,
    pub next: *mut Struct__XExtData,
    pub free_private: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Struct__XExtData)
                                                -> ::libc::c_int>,
    pub private_data: XPointer,
}
pub type XExtData = Struct__XExtData;
#[repr(C)]
struct Struct_Unnamed14 {
    pub extension: ::libc::c_int,
    pub major_opcode: ::libc::c_int,
    pub first_event: ::libc::c_int,
    pub first_error: ::libc::c_int,
}
pub type XExtCodes = Struct_Unnamed14;
#[repr(C)]
struct Struct_Unnamed15 {
    pub depth: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub scanline_pad: ::libc::c_int,
}
pub type XPixmapFormatValues = Struct_Unnamed15;
#[repr(C)]
struct Struct_Unnamed16 {
    pub function: ::libc::c_int,
    pub plane_mask: ::libc::c_ulong,
    pub foreground: ::libc::c_ulong,
    pub background: ::libc::c_ulong,
    pub line_width: ::libc::c_int,
    pub line_style: ::libc::c_int,
    pub cap_style: ::libc::c_int,
    pub join_style: ::libc::c_int,
    pub fill_style: ::libc::c_int,
    pub fill_rule: ::libc::c_int,
    pub arc_mode: ::libc::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::libc::c_int,
    pub ts_y_origin: ::libc::c_int,
    pub font: Font,
    pub subwindow_mode: ::libc::c_int,
    pub graphics_exposures: ::libc::c_int,
    pub clip_x_origin: ::libc::c_int,
    pub clip_y_origin: ::libc::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::libc::c_int,
    pub dashes: ::libc::c_char,
}
pub type XGCValues = Struct_Unnamed16;
pub type GC = *mut Struct__XGC;
#[repr(C)]
struct Struct_Unnamed17 {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::libc::c_int,
    pub red_mask: ::libc::c_ulong,
    pub green_mask: ::libc::c_ulong,
    pub blue_mask: ::libc::c_ulong,
    pub bits_per_rgb: ::libc::c_int,
    pub map_entries: ::libc::c_int,
}
pub type Visual = Struct_Unnamed17;
#[repr(C)]
struct Struct_Unnamed18 {
    pub depth: ::libc::c_int,
    pub nvisuals: ::libc::c_int,
    pub visuals: *mut Visual,
}
pub type Depth = Struct_Unnamed18;
#[repr(C)]
struct Struct_Unnamed19 {
    pub ext_data: *mut XExtData,
    pub display: *mut Struct__XDisplay,
    pub root: Window,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub mwidth: ::libc::c_int,
    pub mheight: ::libc::c_int,
    pub ndepths: ::libc::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::libc::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::libc::c_ulong,
    pub black_pixel: ::libc::c_ulong,
    pub max_maps: ::libc::c_int,
    pub min_maps: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub save_unders: ::libc::c_int,
    pub root_input_mask: ::libc::c_long,
}
pub type Screen = Struct_Unnamed19;
#[repr(C)]
struct Struct_Unnamed20 {
    pub ext_data: *mut XExtData,
    pub depth: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub scanline_pad: ::libc::c_int,
}
pub type ScreenFormat = Struct_Unnamed20;
#[repr(C)]
struct Struct_Unnamed21 {
    pub background_pixmap: Pixmap,
    pub background_pixel: ::libc::c_ulong,
    pub border_pixmap: Pixmap,
    pub border_pixel: ::libc::c_ulong,
    pub bit_gravity: ::libc::c_int,
    pub win_gravity: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub backing_planes: ::libc::c_ulong,
    pub backing_pixel: ::libc::c_ulong,
    pub save_under: ::libc::c_int,
    pub event_mask: ::libc::c_long,
    pub do_not_propagate_mask: ::libc::c_long,
    pub override_redirect: ::libc::c_int,
    pub colormap: Colormap,
    pub cursor: Cursor,
}
pub type XSetWindowAttributes = Struct_Unnamed21;
#[repr(C)]
struct Struct_Unnamed22 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub visual: *mut Visual,
    pub root: Window,
    pub class: ::libc::c_int,
    pub bit_gravity: ::libc::c_int,
    pub win_gravity: ::libc::c_int,
    pub backing_store: ::libc::c_int,
    pub backing_planes: ::libc::c_ulong,
    pub backing_pixel: ::libc::c_ulong,
    pub save_under: ::libc::c_int,
    pub colormap: Colormap,
    pub map_installed: ::libc::c_int,
    pub map_state: ::libc::c_int,
    pub all_event_masks: ::libc::c_long,
    pub your_event_mask: ::libc::c_long,
    pub do_not_propagate_mask: ::libc::c_long,
    pub override_redirect: ::libc::c_int,
    pub screen: *mut Screen,
}
pub type XWindowAttributes = Struct_Unnamed22;
#[repr(C)]
struct Struct_Unnamed23 {
    pub family: ::libc::c_int,
    pub length: ::libc::c_int,
    pub address: *mut ::libc::c_char,
}
pub type XHostAddress = Struct_Unnamed23;
#[repr(C)]
struct Struct_Unnamed24 {
    pub typelength: ::libc::c_int,
    pub valuelength: ::libc::c_int,
    pub _type: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
}
pub type XServerInterpretedAddress = Struct_Unnamed24;
#[repr(C)]
pub struct Struct__XImage {
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub xoffset: ::libc::c_int,
    pub format: ::libc::c_int,
    pub data: *mut ::libc::c_char,
    pub byte_order: ::libc::c_int,
    pub bitmap_unit: ::libc::c_int,
    pub bitmap_bit_order: ::libc::c_int,
    pub bitmap_pad: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub bytes_per_line: ::libc::c_int,
    pub bits_per_pixel: ::libc::c_int,
    pub red_mask: ::libc::c_ulong,
    pub green_mask: ::libc::c_ulong,
    pub blue_mask: ::libc::c_ulong,
    pub obdata: XPointer,
    pub f: Struct_funcs,
}
#[repr(C)]
pub struct Struct_funcs {
    pub create_image: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Struct__XDisplay,
                                                 arg2: *mut Visual,
                                                 arg3: ::libc::c_uint,
                                                 arg4: ::libc::c_int,
                                                 arg5: ::libc::c_int,
                                                 arg6: *mut ::libc::c_char,
                                                 arg7: ::libc::c_uint,
                                                 arg8: ::libc::c_uint,
                                                 arg9: ::libc::c_int,
                                                 arg10: ::libc::c_int)
                                                -> *mut Struct__XImage>,
    pub destroy_image: ::std::option::Option<extern "C" fn
                                                 (arg1: *mut Struct__XImage)
                                                 -> ::libc::c_int>,
    pub get_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int)
                                             -> ::libc::c_ulong>,
    pub put_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_ulong)
                                             -> ::libc::c_int>,
    pub sub_image: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_uint,
                                              arg5: ::libc::c_uint)
                                             -> *mut Struct__XImage>,
    pub add_pixel: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XImage,
                                              arg2: ::libc::c_long)
                                             -> ::libc::c_int>,
}
pub type XImage = Struct__XImage;
#[repr(C)]
struct Struct_Unnamed25 {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub sibling: Window,
    pub stack_mode: ::libc::c_int,
}
pub type XWindowChanges = Struct_Unnamed25;
#[repr(C)]
struct Struct_Unnamed26 {
    pub pixel: ::libc::c_ulong,
    pub red: ::libc::c_ushort,
    pub green: ::libc::c_ushort,
    pub blue: ::libc::c_ushort,
    pub flags: ::libc::c_char,
    pub pad: ::libc::c_char,
}
pub type XColor = Struct_Unnamed26;
#[repr(C)]
struct Struct_Unnamed27 {
    pub x1: ::libc::c_short,
    pub y1: ::libc::c_short,
    pub x2: ::libc::c_short,
    pub y2: ::libc::c_short,
}
pub type XSegment = Struct_Unnamed27;
#[repr(C)]
struct Struct_Unnamed28 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
}
pub type XPoint = Struct_Unnamed28;
#[repr(C)]
struct Struct_Unnamed29 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
    pub width: ::libc::c_ushort,
    pub height: ::libc::c_ushort,
}
pub type XRectangle = Struct_Unnamed29;
#[repr(C)]
struct Struct_Unnamed30 {
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
    pub width: ::libc::c_ushort,
    pub height: ::libc::c_ushort,
    pub angle1: ::libc::c_short,
    pub angle2: ::libc::c_short,
}
pub type XArc = Struct_Unnamed30;
#[repr(C)]
struct Struct_Unnamed31 {
    pub key_click_percent: ::libc::c_int,
    pub bell_percent: ::libc::c_int,
    pub bell_pitch: ::libc::c_int,
    pub bell_duration: ::libc::c_int,
    pub led: ::libc::c_int,
    pub led_mode: ::libc::c_int,
    pub key: ::libc::c_int,
    pub auto_repeat_mode: ::libc::c_int,
}
pub type XKeyboardControl = Struct_Unnamed31;
#[repr(C)]
struct Struct_Unnamed32 {
    pub key_click_percent: ::libc::c_int,
    pub bell_percent: ::libc::c_int,
    pub bell_pitch: ::libc::c_uint,
    pub bell_duration: ::libc::c_uint,
    pub led_mask: ::libc::c_ulong,
    pub global_auto_repeat: ::libc::c_int,
    pub auto_repeats: [::libc::c_char, ..32u],
}
pub type XKeyboardState = Struct_Unnamed32;
#[repr(C)]
struct Struct_Unnamed33 {
    pub time: Time,
    pub x: ::libc::c_short,
    pub y: ::libc::c_short,
}
pub type XTimeCoord = Struct_Unnamed33;
#[repr(C)]
struct Struct_Unnamed34 {
    pub max_keypermod: ::libc::c_int,
    pub modifiermap: *mut KeyCode,
}
pub type XModifierKeymap = Struct_Unnamed34;
pub type Display = Struct__XDisplay;
pub enum Struct__XPrivate { }
pub enum Struct__XrmHashBucketRec { }
#[repr(C)]
struct Struct_Unnamed35 {
    pub ext_data: *mut XExtData,
    pub private1: *mut Struct__XPrivate,
    pub fd: ::libc::c_int,
    pub private2: ::libc::c_int,
    pub proto_major_version: ::libc::c_int,
    pub proto_minor_version: ::libc::c_int,
    pub vendor: *mut ::libc::c_char,
    pub private3: XID,
    pub private4: XID,
    pub private5: XID,
    pub private6: ::libc::c_int,
    pub resource_alloc: ::std::option::Option<extern "C" fn
                                                  (arg1:
                                                       *mut Struct__XDisplay)
                                                  -> XID>,
    pub byte_order: ::libc::c_int,
    pub bitmap_unit: ::libc::c_int,
    pub bitmap_pad: ::libc::c_int,
    pub bitmap_bit_order: ::libc::c_int,
    pub nformats: ::libc::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub private8: ::libc::c_int,
    pub release: ::libc::c_int,
    pub private9: *mut Struct__XPrivate,
    pub private10: *mut Struct__XPrivate,
    pub qlen: ::libc::c_int,
    pub last_request_read: ::libc::c_ulong,
    pub request: ::libc::c_ulong,
    pub private11: XPointer,
    pub private12: XPointer,
    pub private13: XPointer,
    pub private14: XPointer,
    pub max_request_size: ::libc::c_uint,
    pub db: *mut Struct__XrmHashBucketRec,
    pub private15: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__XDisplay)
                                             -> ::libc::c_int>,
    pub display_name: *mut ::libc::c_char,
    pub default_screen: ::libc::c_int,
    pub nscreens: ::libc::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::libc::c_ulong,
    pub private16: ::libc::c_ulong,
    pub min_keycode: ::libc::c_int,
    pub max_keycode: ::libc::c_int,
    pub private17: XPointer,
    pub private18: XPointer,
    pub private19: ::libc::c_int,
    pub xdefaults: *mut ::libc::c_char,
}
pub type _XPrivDisplay = *mut Struct_Unnamed35;
#[repr(C)]
struct Struct_Unnamed36 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub keycode: ::libc::c_uint,
    pub same_screen: ::libc::c_int,
}
pub type XKeyEvent = Struct_Unnamed36;
pub type XKeyPressedEvent = XKeyEvent;
pub type XKeyReleasedEvent = XKeyEvent;
#[repr(C)]
struct Struct_Unnamed37 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub button: ::libc::c_uint,
    pub same_screen: ::libc::c_int,
}
pub type XButtonEvent = Struct_Unnamed37;
pub type XButtonPressedEvent = XButtonEvent;
pub type XButtonReleasedEvent = XButtonEvent;
#[repr(C)]
struct Struct_Unnamed38 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub state: ::libc::c_uint,
    pub is_hint: ::libc::c_char,
    pub same_screen: ::libc::c_int,
}
pub type XMotionEvent = Struct_Unnamed38;
pub type XPointerMovedEvent = XMotionEvent;
#[repr(C)]
struct Struct_Unnamed39 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub x_root: ::libc::c_int,
    pub y_root: ::libc::c_int,
    pub mode: ::libc::c_int,
    pub detail: ::libc::c_int,
    pub same_screen: ::libc::c_int,
    pub focus: ::libc::c_int,
    pub state: ::libc::c_uint,
}
pub type XCrossingEvent = Struct_Unnamed39;
pub type XEnterWindowEvent = XCrossingEvent;
pub type XLeaveWindowEvent = XCrossingEvent;
#[repr(C)]
struct Struct_Unnamed40 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub mode: ::libc::c_int,
    pub detail: ::libc::c_int,
}
pub type XFocusChangeEvent = Struct_Unnamed40;
pub type XFocusInEvent = XFocusChangeEvent;
pub type XFocusOutEvent = XFocusChangeEvent;
#[repr(C)]
struct Struct_Unnamed41 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub key_vector: [::libc::c_char, ..32u],
}
pub type XKeymapEvent = Struct_Unnamed41;
#[repr(C)]
struct Struct_Unnamed42 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub count: ::libc::c_int,
}
pub type XExposeEvent = Struct_Unnamed42;
#[repr(C)]
struct Struct_Unnamed43 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub count: ::libc::c_int,
    pub major_code: ::libc::c_int,
    pub minor_code: ::libc::c_int,
}
pub type XGraphicsExposeEvent = Struct_Unnamed43;
#[repr(C)]
struct Struct_Unnamed44 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::libc::c_int,
    pub minor_code: ::libc::c_int,
}
pub type XNoExposeEvent = Struct_Unnamed44;
#[repr(C)]
struct Struct_Unnamed45 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub state: ::libc::c_int,
}
pub type XVisibilityEvent = Struct_Unnamed45;
#[repr(C)]
struct Struct_Unnamed46 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub override_redirect: ::libc::c_int,
}
pub type XCreateWindowEvent = Struct_Unnamed46;
#[repr(C)]
struct Struct_Unnamed47 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
}
pub type XDestroyWindowEvent = Struct_Unnamed47;
#[repr(C)]
struct Struct_Unnamed48 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::libc::c_int,
}
pub type XUnmapEvent = Struct_Unnamed48;
#[repr(C)]
struct Struct_Unnamed49 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::libc::c_int,
}
pub type XMapEvent = Struct_Unnamed49;
#[repr(C)]
struct Struct_Unnamed50 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
}
pub type XMapRequestEvent = Struct_Unnamed50;
#[repr(C)]
struct Struct_Unnamed51 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub override_redirect: ::libc::c_int,
}
pub type XReparentEvent = Struct_Unnamed51;
#[repr(C)]
struct Struct_Unnamed52 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub above: Window,
    pub override_redirect: ::libc::c_int,
}
pub type XConfigureEvent = Struct_Unnamed52;
#[repr(C)]
struct Struct_Unnamed53 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
}
pub type XGravityEvent = Struct_Unnamed53;
#[repr(C)]
struct Struct_Unnamed54 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
}
pub type XResizeRequestEvent = Struct_Unnamed54;
#[repr(C)]
struct Struct_Unnamed55 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub border_width: ::libc::c_int,
    pub above: Window,
    pub detail: ::libc::c_int,
    pub value_mask: ::libc::c_ulong,
}
pub type XConfigureRequestEvent = Struct_Unnamed55;
#[repr(C)]
struct Struct_Unnamed56 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub place: ::libc::c_int,
}
pub type XCirculateEvent = Struct_Unnamed56;
#[repr(C)]
struct Struct_Unnamed57 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub place: ::libc::c_int,
}
pub type XCirculateRequestEvent = Struct_Unnamed57;
#[repr(C)]
struct Struct_Unnamed58 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::libc::c_int,
}
pub type XPropertyEvent = Struct_Unnamed58;
#[repr(C)]
struct Struct_Unnamed59 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
pub type XSelectionClearEvent = Struct_Unnamed59;
#[repr(C)]
struct Struct_Unnamed60 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
pub type XSelectionRequestEvent = Struct_Unnamed60;
#[repr(C)]
struct Struct_Unnamed61 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
pub type XSelectionEvent = Struct_Unnamed61;
#[repr(C)]
struct Struct_Unnamed62 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::libc::c_int,
    pub state: ::libc::c_int,
}
pub type XColormapEvent = Struct_Unnamed62;
#[repr(C)]
struct Struct_Unnamed63 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::libc::c_int,
    pub data: Union_Unnamed64,
}
#[repr(C)]
pub struct Union_Unnamed64 {
    pub data: [u64, ..5u],
}
impl Union_Unnamed64 {
    pub fn b(&mut self) -> *mut [::libc::c_char, ..20u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn s(&mut self) -> *mut [::libc::c_short, ..10u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn l(&mut self) -> *mut [::libc::c_long, ..5u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XClientMessageEvent = Struct_Unnamed63;
#[repr(C)]
struct Struct_Unnamed65 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub request: ::libc::c_int,
    pub first_keycode: ::libc::c_int,
    pub count: ::libc::c_int,
}
pub type XMappingEvent = Struct_Unnamed65;
#[repr(C)]
struct Struct_Unnamed66 {
    pub _type: ::libc::c_int,
    pub display: *mut Display,
    pub resourceid: XID,
    pub serial: ::libc::c_ulong,
    pub error_code: ::libc::c_uchar,
    pub request_code: ::libc::c_uchar,
    pub minor_code: ::libc::c_uchar,
}
pub type XErrorEvent = Struct_Unnamed66;
#[repr(C)]
struct Struct_Unnamed67 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub window: Window,
}
pub type XAnyEvent = Struct_Unnamed67;
#[repr(C)]
struct Struct_Unnamed68 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub extension: ::libc::c_int,
    pub evtype: ::libc::c_int,
}
pub type XGenericEvent = Struct_Unnamed68;
#[repr(C)]
struct Struct_Unnamed69 {
    pub _type: ::libc::c_int,
    pub serial: ::libc::c_ulong,
    pub send_event: ::libc::c_int,
    pub display: *mut Display,
    pub extension: ::libc::c_int,
    pub evtype: ::libc::c_int,
    pub cookie: ::libc::c_uint,
    pub data: *mut ::libc::c_void,
}
pub type XGenericEventCookie = Struct_Unnamed69;
#[repr(C)]
pub struct Union__XEvent {
    pub data: [u64, ..24u],
}
impl Union__XEvent {
    pub fn _type(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xany(&mut self) -> *mut XAnyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xkey(&mut self) -> *mut XKeyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xbutton(&mut self) -> *mut XButtonEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmotion(&mut self) -> *mut XMotionEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcrossing(&mut self) -> *mut XCrossingEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xfocus(&mut self) -> *mut XFocusChangeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xexpose(&mut self) -> *mut XExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgraphicsexpose(&mut self) -> *mut XGraphicsExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xnoexpose(&mut self) -> *mut XNoExposeEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xvisibility(&mut self) -> *mut XVisibilityEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcreatewindow(&mut self) -> *mut XCreateWindowEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xdestroywindow(&mut self) -> *mut XDestroyWindowEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xunmap(&mut self) -> *mut XUnmapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmap(&mut self) -> *mut XMapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmaprequest(&mut self) -> *mut XMapRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xreparent(&mut self) -> *mut XReparentEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xconfigure(&mut self) -> *mut XConfigureEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgravity(&mut self) -> *mut XGravityEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xresizerequest(&mut self) -> *mut XResizeRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xconfigurerequest(&mut self) -> *mut XConfigureRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcirculate(&mut self) -> *mut XCirculateEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcirculaterequest(&mut self) -> *mut XCirculateRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xproperty(&mut self) -> *mut XPropertyEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselectionclear(&mut self) -> *mut XSelectionClearEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselectionrequest(&mut self) -> *mut XSelectionRequestEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xselection(&mut self) -> *mut XSelectionEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcolormap(&mut self) -> *mut XColormapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xclient(&mut self) -> *mut XClientMessageEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xmapping(&mut self) -> *mut XMappingEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xerror(&mut self) -> *mut XErrorEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xkeymap(&mut self) -> *mut XKeymapEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xgeneric(&mut self) -> *mut XGenericEvent {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn xcookie(&mut self) -> *mut XGenericEventCookie {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pad(&mut self) -> *mut [::libc::c_long, ..24u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XEvent = Union__XEvent;
#[repr(C)]
struct Struct_Unnamed70 {
    pub lbearing: ::libc::c_short,
    pub rbearing: ::libc::c_short,
    pub width: ::libc::c_short,
    pub ascent: ::libc::c_short,
    pub descent: ::libc::c_short,
    pub attributes: ::libc::c_ushort,
}
pub type XCharStruct = Struct_Unnamed70;
#[repr(C)]
struct Struct_Unnamed71 {
    pub name: Atom,
    pub card32: ::libc::c_ulong,
}
pub type XFontProp = Struct_Unnamed71;
#[repr(C)]
struct Struct_Unnamed72 {
    pub ext_data: *mut XExtData,
    pub fid: Font,
    pub direction: ::libc::c_uint,
    pub min_char_or_byte2: ::libc::c_uint,
    pub max_char_or_byte2: ::libc::c_uint,
    pub min_byte1: ::libc::c_uint,
    pub max_byte1: ::libc::c_uint,
    pub all_chars_exist: ::libc::c_int,
    pub default_char: ::libc::c_uint,
    pub n_properties: ::libc::c_int,
    pub properties: *mut XFontProp,
    pub min_bounds: XCharStruct,
    pub max_bounds: XCharStruct,
    pub per_char: *mut XCharStruct,
    pub ascent: ::libc::c_int,
    pub descent: ::libc::c_int,
}
pub type XFontStruct = Struct_Unnamed72;
#[repr(C)]
struct Struct_Unnamed73 {
    pub chars: *mut ::libc::c_char,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font: Font,
}
pub type XTextItem = Struct_Unnamed73;
#[repr(C)]
struct Struct_Unnamed74 {
    pub byte1: ::libc::c_uchar,
    pub byte2: ::libc::c_uchar,
}
pub type XChar2b = Struct_Unnamed74;
#[repr(C)]
struct Struct_Unnamed75 {
    pub chars: *mut XChar2b,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font: Font,
}
pub type XTextItem16 = Struct_Unnamed75;
#[repr(C)]
pub struct Union_Unnamed76 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed76 {
    pub fn display(&mut self) -> *mut *mut Display {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn gc(&mut self) -> *mut GC { unsafe { ::std::mem::transmute(self) } }
    pub fn visual(&mut self) -> *mut *mut Visual {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn screen(&mut self) -> *mut *mut Screen {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pixmap_format(&mut self) -> *mut *mut ScreenFormat {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn font(&mut self) -> *mut *mut XFontStruct {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XEDataObject = Union_Unnamed76;
#[repr(C)]
struct Struct_Unnamed77 {
    pub max_ink_extent: XRectangle,
    pub max_logical_extent: XRectangle,
}
pub type XFontSetExtents = Struct_Unnamed77;
pub enum Struct__XOM { }
pub type XOM = *mut Struct__XOM;
pub enum Struct__XOC { }
pub type XOC = *mut Struct__XOC;
pub type XFontSet = *mut Struct__XOC;
#[repr(C)]
struct Struct_Unnamed78 {
    pub chars: *mut ::libc::c_char,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font_set: XFontSet,
}
pub type XmbTextItem = Struct_Unnamed78;
#[repr(C)]
struct Struct_Unnamed79 {
    pub chars: *mut wchar_t,
    pub nchars: ::libc::c_int,
    pub delta: ::libc::c_int,
    pub font_set: XFontSet,
}
pub type XwcTextItem = Struct_Unnamed79;
#[repr(C)]
struct Struct_Unnamed80 {
    pub charset_count: ::libc::c_int,
    pub charset_list: *mut *mut ::libc::c_char,
}
pub type XOMCharSetList = Struct_Unnamed80;
pub type Enum_Unnamed81 = ::libc::c_uint;
pub const XOMOrientation_LTR_TTB: ::libc::c_uint = 0;
pub const XOMOrientation_RTL_TTB: ::libc::c_uint = 1;
pub const XOMOrientation_TTB_LTR: ::libc::c_uint = 2;
pub const XOMOrientation_TTB_RTL: ::libc::c_uint = 3;
pub const XOMOrientation_Context: ::libc::c_uint = 4;
pub type XOrientation = Enum_Unnamed81;
#[repr(C)]
struct Struct_Unnamed82 {
    pub num_orientation: ::libc::c_int,
    pub orientation: *mut XOrientation,
}
pub type XOMOrientation = Struct_Unnamed82;
#[repr(C)]
struct Struct_Unnamed83 {
    pub num_font: ::libc::c_int,
    pub font_struct_list: *mut *mut XFontStruct,
    pub font_name_list: *mut *mut ::libc::c_char,
}
pub type XOMFontInfo = Struct_Unnamed83;
pub enum Struct__XIM { }
pub type XIM = *mut Struct__XIM;
pub enum Struct__XIC { }
pub type XIC = *mut Struct__XIC;
pub type XIMProc =
    ::std::option::Option<extern "C" fn
                              (arg1: XIM, arg2: XPointer, arg3: XPointer)>;
pub type XICProc =
    ::std::option::Option<extern "C" fn
                              (arg1: XIC, arg2: XPointer, arg3: XPointer)
                              -> ::libc::c_int>;
pub type XIDProc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: XPointer,
                               arg3: XPointer)>;
pub type XIMStyle = ::libc::c_ulong;
#[repr(C)]
struct Struct_Unnamed84 {
    pub count_styles: ::libc::c_ushort,
    pub supported_styles: *mut XIMStyle,
}
pub type XIMStyles = Struct_Unnamed84;
pub type XVaNestedList = *mut ::libc::c_void;
#[repr(C)]
struct Struct_Unnamed85 {
    pub client_data: XPointer,
    pub callback: XIMProc,
}
pub type XIMCallback = Struct_Unnamed85;
#[repr(C)]
struct Struct_Unnamed86 {
    pub client_data: XPointer,
    pub callback: XICProc,
}
pub type XICCallback = Struct_Unnamed86;
pub type XIMFeedback = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMText {
    pub length: ::libc::c_ushort,
    pub feedback: *mut XIMFeedback,
    pub encoding_is_wchar: ::libc::c_int,
    pub string: Union_Unnamed87,
}
#[repr(C)]
pub struct Union_Unnamed87 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed87 {
    pub fn multi_byte(&mut self) -> *mut *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn wide_char(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMText = Struct__XIMText;
pub type XIMPreeditState = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMPreeditStateNotifyCallbackStruct {
    pub state: XIMPreeditState,
}
pub type XIMPreeditStateNotifyCallbackStruct =
    Struct__XIMPreeditStateNotifyCallbackStruct;
pub type XIMResetState = ::libc::c_ulong;
pub type XIMStringConversionFeedback = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__XIMStringConversionText {
    pub length: ::libc::c_ushort,
    pub feedback: *mut XIMStringConversionFeedback,
    pub encoding_is_wchar: ::libc::c_int,
    pub string: Union_Unnamed88,
}
#[repr(C)]
pub struct Union_Unnamed88 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed88 {
    pub fn mbs(&mut self) -> *mut *mut ::libc::c_char {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn wcs(&mut self) -> *mut *mut wchar_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMStringConversionText = Struct__XIMStringConversionText;
pub type XIMStringConversionPosition = ::libc::c_ushort;
pub type XIMStringConversionType = ::libc::c_ushort;
pub type XIMStringConversionOperation = ::libc::c_ushort;
pub type Enum_Unnamed89 = ::libc::c_uint;
pub const XIMForwardChar: ::libc::c_uint = 0;
pub const XIMBackwardChar: ::libc::c_uint = 1;
pub const XIMForwardWord: ::libc::c_uint = 2;
pub const XIMBackwardWord: ::libc::c_uint = 3;
pub const XIMCaretUp: ::libc::c_uint = 4;
pub const XIMCaretDown: ::libc::c_uint = 5;
pub const XIMNextLine: ::libc::c_uint = 6;
pub const XIMPreviousLine: ::libc::c_uint = 7;
pub const XIMLineStart: ::libc::c_uint = 8;
pub const XIMLineEnd: ::libc::c_uint = 9;
pub const XIMAbsolutePosition: ::libc::c_uint = 10;
pub const XIMDontChange: ::libc::c_uint = 11;
pub type XIMCaretDirection = Enum_Unnamed89;
#[repr(C)]
pub struct Struct__XIMStringConversionCallbackStruct {
    pub position: XIMStringConversionPosition,
    pub direction: XIMCaretDirection,
    pub operation: XIMStringConversionOperation,
    pub factor: ::libc::c_ushort,
    pub text: *mut XIMStringConversionText,
}
pub type XIMStringConversionCallbackStruct =
    Struct__XIMStringConversionCallbackStruct;
#[repr(C)]
pub struct Struct__XIMPreeditDrawCallbackStruct {
    pub caret: ::libc::c_int,
    pub chg_first: ::libc::c_int,
    pub chg_length: ::libc::c_int,
    pub text: *mut XIMText,
}
pub type XIMPreeditDrawCallbackStruct = Struct__XIMPreeditDrawCallbackStruct;
pub type Enum_Unnamed90 = ::libc::c_uint;
pub const XIMIsInvisible: ::libc::c_uint = 0;
pub const XIMIsPrimary: ::libc::c_uint = 1;
pub const XIMIsSecondary: ::libc::c_uint = 2;
pub type XIMCaretStyle = Enum_Unnamed90;
#[repr(C)]
pub struct Struct__XIMPreeditCaretCallbackStruct {
    pub position: ::libc::c_int,
    pub direction: XIMCaretDirection,
    pub style: XIMCaretStyle,
}
pub type XIMPreeditCaretCallbackStruct =
    Struct__XIMPreeditCaretCallbackStruct;
pub type Enum_Unnamed91 = ::libc::c_uint;
pub const XIMTextType: ::libc::c_uint = 0;
pub const XIMBitmapType: ::libc::c_uint = 1;
pub type XIMStatusDataType = Enum_Unnamed91;
#[repr(C)]
pub struct Struct__XIMStatusDrawCallbackStruct {
    pub _type: XIMStatusDataType,
    pub data: Union_Unnamed92,
}
#[repr(C)]
pub struct Union_Unnamed92 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed92 {
    pub fn text(&mut self) -> *mut *mut XIMText {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn bitmap(&mut self) -> *mut Pixmap {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type XIMStatusDrawCallbackStruct = Struct__XIMStatusDrawCallbackStruct;
#[repr(C)]
pub struct Struct__XIMHotKeyTrigger {
    pub keysym: KeySym,
    pub modifier: ::libc::c_int,
    pub modifier_mask: ::libc::c_int,
}
pub type XIMHotKeyTrigger = Struct__XIMHotKeyTrigger;
#[repr(C)]
pub struct Struct__XIMHotKeyTriggers {
    pub num_hot_key: ::libc::c_int,
    pub key: *mut XIMHotKeyTrigger,
}
pub type XIMHotKeyTriggers = Struct__XIMHotKeyTriggers;
pub type XIMHotKeyState = ::libc::c_ulong;
#[repr(C)]
struct Struct_Unnamed93 {
    pub count_values: ::libc::c_ushort,
    pub supported_values: *mut *mut ::libc::c_char,
}
pub type XIMValuesList = Struct_Unnamed93;
pub type XErrorHandler =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XErrorEvent)
                              -> ::libc::c_int>;
pub type XIOErrorHandler =
    ::std::option::Option<extern "C" fn(arg1: *mut Display) -> ::libc::c_int>;
pub type XConnectionWatchProc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: XPointer,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: *mut XPointer)>;
pub type INT64 = ::libc::c_long;
pub type INT32 = ::libc::c_int;
pub type INT16 = ::libc::c_short;
pub type INT8 = ::libc::c_char;
pub type CARD64 = ::libc::c_ulong;
pub type CARD32 = ::libc::c_uint;
pub type CARD16 = ::libc::c_ushort;
pub type CARD8 = ::libc::c_uchar;
pub type BITS32 = CARD32;
pub type BITS16 = CARD16;
pub type BYTE = CARD8;
pub type BOOL = CARD8;
#[repr(C)]
pub struct Struct__xSegment {
    pub x1: INT16,
    pub y1: INT16,
    pub x2: INT16,
    pub y2: INT16,
}
pub type xSegment = Struct__xSegment;
#[repr(C)]
pub struct Struct__xPoint {
    pub x: INT16,
    pub y: INT16,
}
pub type xPoint = Struct__xPoint;
#[repr(C)]
pub struct Struct__xRectangle {
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
pub type xRectangle = Struct__xRectangle;
#[repr(C)]
pub struct Struct__xArc {
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub angle1: INT16,
    pub angle2: INT16,
}
pub type xArc = Struct__xArc;
pub type KeyButMask = CARD16;
#[repr(C)]
struct Struct_Unnamed94 {
    pub byteOrder: CARD8,
    pub pad: BYTE,
    pub majorVersion: CARD16,
    pub minorVersion: CARD16,
    pub nbytesAuthProto: CARD16,
    pub nbytesAuthString: CARD16,
    pub pad2: CARD16,
}
pub type xConnClientPrefix = Struct_Unnamed94;
#[repr(C)]
struct Struct_Unnamed95 {
    pub success: CARD8,
    pub lengthReason: BYTE,
    pub majorVersion: CARD16,
    pub minorVersion: CARD16,
    pub length: CARD16,
}
pub type xConnSetupPrefix = Struct_Unnamed95;
#[repr(C)]
struct Struct_Unnamed96 {
    pub release: CARD32,
    pub ridBase: CARD32,
    pub ridMask: CARD32,
    pub motionBufferSize: CARD32,
    pub nbytesVendor: CARD16,
    pub maxRequestSize: CARD16,
    pub numRoots: CARD8,
    pub numFormats: CARD8,
    pub imageByteOrder: CARD8,
    pub bitmapBitOrder: CARD8,
    pub bitmapScanlineUnit: CARD8,
    pub bitmapScanlinePad: CARD8,
    pub minKeyCode: CARD8,
    pub maxKeyCode: CARD8,
    pub pad2: CARD32,
}
pub type xConnSetup = Struct_Unnamed96;
#[repr(C)]
struct Struct_Unnamed97 {
    pub depth: CARD8,
    pub bitsPerPixel: CARD8,
    pub scanLinePad: CARD8,
    pub pad1: CARD8,
    pub pad2: CARD32,
}
pub type xPixmapFormat = Struct_Unnamed97;
#[repr(C)]
struct Struct_Unnamed98 {
    pub depth: CARD8,
    pub pad1: CARD8,
    pub nVisuals: CARD16,
    pub pad2: CARD32,
}
pub type xDepth = Struct_Unnamed98;
#[repr(C)]
struct Struct_Unnamed99 {
    pub visualID: CARD32,
    pub class: CARD8,
    pub bitsPerRGB: CARD8,
    pub colormapEntries: CARD16,
    pub redMask: CARD32,
    pub greenMask: CARD32,
    pub blueMask: CARD32,
    pub pad: CARD32,
}
pub type xVisualType = Struct_Unnamed99;
#[repr(C)]
struct Struct_Unnamed100 {
    pub windowId: CARD32,
    pub defaultColormap: CARD32,
    pub whitePixel: CARD32,
    pub blackPixel: CARD32,
    pub currentInputMask: CARD32,
    pub pixWidth: CARD16,
    pub pixHeight: CARD16,
    pub mmWidth: CARD16,
    pub mmHeight: CARD16,
    pub minInstalledMaps: CARD16,
    pub maxInstalledMaps: CARD16,
    pub rootVisualID: CARD32,
    pub backingStore: CARD8,
    pub saveUnders: BOOL,
    pub rootDepth: CARD8,
    pub nDepths: CARD8,
}
pub type xWindowRoot = Struct_Unnamed100;
#[repr(C)]
struct Struct_Unnamed101 {
    pub time: CARD32,
    pub x: INT16,
    pub y: INT16,
}
pub type xTimecoord = Struct_Unnamed101;
#[repr(C)]
struct Struct_Unnamed102 {
    pub family: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
}
pub type xHostEntry = Struct_Unnamed102;
#[repr(C)]
struct Struct_Unnamed103 {
    pub leftSideBearing: INT16,
    pub rightSideBearing: INT16,
    pub characterWidth: INT16,
    pub ascent: INT16,
    pub descent: INT16,
    pub attributes: CARD16,
}
pub type xCharInfo = Struct_Unnamed103;
#[repr(C)]
struct Struct_Unnamed104 {
    pub name: CARD32,
    pub value: CARD32,
}
pub type xFontProp = Struct_Unnamed104;
#[repr(C)]
struct Struct_Unnamed105 {
    pub len: CARD8,
    pub delta: INT8,
}
pub type xTextElt = Struct_Unnamed105;
#[repr(C)]
struct Struct_Unnamed106 {
    pub pixel: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub flags: CARD8,
    pub pad: CARD8,
}
pub type xColorItem = Struct_Unnamed106;
#[repr(C)]
struct Struct_Unnamed107 {
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad: CARD16,
}
pub type xrgb = Struct_Unnamed107;
pub type KEYCODE = CARD8;
#[repr(C)]
struct Struct_Unnamed108 {
    pub _type: BYTE,
    pub data1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub data00: CARD32,
    pub data01: CARD32,
    pub data02: CARD32,
    pub data03: CARD32,
    pub data04: CARD32,
    pub data05: CARD32,
}
pub type xGenericReply = Struct_Unnamed108;
#[repr(C)]
struct Struct_Unnamed109 {
    pub _type: BYTE,
    pub backingStore: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub visualID: CARD32,
    pub class: CARD16,
    pub bitGravity: CARD8,
    pub winGravity: CARD8,
    pub backingBitPlanes: CARD32,
    pub backingPixel: CARD32,
    pub saveUnder: BOOL,
    pub mapInstalled: BOOL,
    pub mapState: CARD8,
    pub _override: BOOL,
    pub colormap: CARD32,
    pub allEventMasks: CARD32,
    pub yourEventMask: CARD32,
    pub doNotPropagateMask: CARD16,
    pub pad: CARD16,
}
pub type xGetWindowAttributesReply = Struct_Unnamed109;
#[repr(C)]
struct Struct_Unnamed110 {
    pub _type: BYTE,
    pub depth: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub pad1: CARD16,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
pub type xGetGeometryReply = Struct_Unnamed110;
#[repr(C)]
struct Struct_Unnamed111 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub parent: CARD32,
    pub nChildren: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
pub type xQueryTreeReply = Struct_Unnamed111;
#[repr(C)]
struct Struct_Unnamed112 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub atom: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xInternAtomReply = Struct_Unnamed112;
#[repr(C)]
struct Struct_Unnamed113 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nameLength: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGetAtomNameReply = Struct_Unnamed113;
#[repr(C)]
struct Struct_Unnamed114 {
    pub _type: BYTE,
    pub format: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub propertyType: CARD32,
    pub bytesAfter: CARD32,
    pub nItems: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
pub type xGetPropertyReply = Struct_Unnamed114;
#[repr(C)]
struct Struct_Unnamed115 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nProperties: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xListPropertiesReply = Struct_Unnamed115;
#[repr(C)]
struct Struct_Unnamed116 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub owner: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGetSelectionOwnerReply = Struct_Unnamed116;
#[repr(C)]
struct Struct_Unnamed117 {
    pub _type: BYTE,
    pub status: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGrabPointerReply = Struct_Unnamed117;
pub type xGrabKeyboardReply = xGrabPointerReply;
#[repr(C)]
struct Struct_Unnamed118 {
    pub _type: BYTE,
    pub sameScreen: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub winX: INT16,
    pub winY: INT16,
    pub mask: CARD16,
    pub pad1: CARD16,
    pub pad: CARD32,
}
pub type xQueryPointerReply = Struct_Unnamed118;
#[repr(C)]
struct Struct_Unnamed119 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nEvents: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGetMotionEventsReply = Struct_Unnamed119;
#[repr(C)]
struct Struct_Unnamed120 {
    pub _type: BYTE,
    pub sameScreen: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub child: CARD32,
    pub dstX: INT16,
    pub dstY: INT16,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
pub type xTranslateCoordsReply = Struct_Unnamed120;
#[repr(C)]
struct Struct_Unnamed121 {
    pub _type: BYTE,
    pub revertTo: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub focus: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
pub type xGetInputFocusReply = Struct_Unnamed121;
#[repr(C)]
struct Struct_Unnamed122 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub map: [BYTE, ..32u],
}
pub type xQueryKeymapReply = Struct_Unnamed122;
#[repr(C)]
pub struct Struct__xQueryFontReply {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub minBounds: xCharInfo,
    pub walign1: CARD32,
    pub maxBounds: xCharInfo,
    pub walign2: CARD32,
    pub minCharOrByte2: CARD16,
    pub maxCharOrByte2: CARD16,
    pub defaultChar: CARD16,
    pub nFontProps: CARD16,
    pub drawDirection: CARD8,
    pub minByte1: CARD8,
    pub maxByte1: CARD8,
    pub allCharsExist: BOOL,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub nCharInfos: CARD32,
}
pub type xQueryFontReply = Struct__xQueryFontReply;
#[repr(C)]
struct Struct_Unnamed123 {
    pub _type: BYTE,
    pub drawDirection: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub overallAscent: INT16,
    pub overallDescent: INT16,
    pub overallWidth: INT32,
    pub overallLeft: INT32,
    pub overallRight: INT32,
    pub pad: CARD32,
}
pub type xQueryTextExtentsReply = Struct_Unnamed123;
#[repr(C)]
struct Struct_Unnamed124 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nFonts: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xListFontsReply = Struct_Unnamed124;
#[repr(C)]
struct Struct_Unnamed125 {
    pub _type: BYTE,
    pub nameLength: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub minBounds: xCharInfo,
    pub walign1: CARD32,
    pub maxBounds: xCharInfo,
    pub walign2: CARD32,
    pub minCharOrByte2: CARD16,
    pub maxCharOrByte2: CARD16,
    pub defaultChar: CARD16,
    pub nFontProps: CARD16,
    pub drawDirection: CARD8,
    pub minByte1: CARD8,
    pub maxByte1: CARD8,
    pub allCharsExist: BOOL,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub nReplies: CARD32,
}
pub type xListFontsWithInfoReply = Struct_Unnamed125;
#[repr(C)]
struct Struct_Unnamed126 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPaths: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGetFontPathReply = Struct_Unnamed126;
#[repr(C)]
struct Struct_Unnamed127 {
    pub _type: BYTE,
    pub depth: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub visual: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGetImageReply = Struct_Unnamed127;
#[repr(C)]
struct Struct_Unnamed128 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nColormaps: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xListInstalledColormapsReply = Struct_Unnamed128;
#[repr(C)]
struct Struct_Unnamed129 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad2: CARD16,
    pub pixel: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
pub type xAllocColorReply = Struct_Unnamed129;
#[repr(C)]
struct Struct_Unnamed130 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pixel: CARD32,
    pub exactRed: CARD16,
    pub exactGreen: CARD16,
    pub exactBlue: CARD16,
    pub screenRed: CARD16,
    pub screenGreen: CARD16,
    pub screenBlue: CARD16,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
pub type xAllocNamedColorReply = Struct_Unnamed130;
#[repr(C)]
struct Struct_Unnamed131 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPixels: CARD16,
    pub nMasks: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xAllocColorCellsReply = Struct_Unnamed131;
#[repr(C)]
struct Struct_Unnamed132 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPixels: CARD16,
    pub pad2: CARD16,
    pub redMask: CARD32,
    pub greenMask: CARD32,
    pub blueMask: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
}
pub type xAllocColorPlanesReply = Struct_Unnamed132;
#[repr(C)]
struct Struct_Unnamed133 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nColors: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xQueryColorsReply = Struct_Unnamed133;
#[repr(C)]
struct Struct_Unnamed134 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub exactRed: CARD16,
    pub exactGreen: CARD16,
    pub exactBlue: CARD16,
    pub screenRed: CARD16,
    pub screenGreen: CARD16,
    pub screenBlue: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
pub type xLookupColorReply = Struct_Unnamed134;
#[repr(C)]
struct Struct_Unnamed135 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub width: CARD16,
    pub height: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xQueryBestSizeReply = Struct_Unnamed135;
#[repr(C)]
struct Struct_Unnamed136 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub present: BOOL,
    pub major_opcode: CARD8,
    pub first_event: CARD8,
    pub first_error: CARD8,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xQueryExtensionReply = Struct_Unnamed136;
#[repr(C)]
struct Struct_Unnamed137 {
    pub _type: BYTE,
    pub nExtensions: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xListExtensionsReply = Struct_Unnamed137;
#[repr(C)]
struct Struct_Unnamed138 {
    pub _type: BYTE,
    pub success: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xSetMappingReply = Struct_Unnamed138;
pub type xSetPointerMappingReply = xSetMappingReply;
pub type xSetModifierMappingReply = xSetMappingReply;
#[repr(C)]
struct Struct_Unnamed139 {
    pub _type: BYTE,
    pub nElts: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGetPointerMappingReply = Struct_Unnamed139;
#[repr(C)]
struct Struct_Unnamed140 {
    pub _type: BYTE,
    pub keySymsPerKeyCode: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGetKeyboardMappingReply = Struct_Unnamed140;
#[repr(C)]
struct Struct_Unnamed141 {
    pub _type: BYTE,
    pub numKeyPerModifier: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGetModifierMappingReply = Struct_Unnamed141;
#[repr(C)]
struct Struct_Unnamed142 {
    pub _type: BYTE,
    pub globalAutoRepeat: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub ledMask: CARD32,
    pub keyClickPercent: CARD8,
    pub bellPercent: CARD8,
    pub bellPitch: CARD16,
    pub bellDuration: CARD16,
    pub pad: CARD16,
    pub map: [BYTE, ..32u],
}
pub type xGetKeyboardControlReply = Struct_Unnamed142;
#[repr(C)]
struct Struct_Unnamed143 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub accelNumerator: CARD16,
    pub accelDenominator: CARD16,
    pub threshold: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGetPointerControlReply = Struct_Unnamed143;
#[repr(C)]
struct Struct_Unnamed144 {
    pub _type: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub timeout: CARD16,
    pub interval: CARD16,
    pub preferBlanking: BOOL,
    pub allowExposures: BOOL,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
pub type xGetScreenSaverReply = Struct_Unnamed144;
#[repr(C)]
struct Struct_Unnamed145 {
    pub _type: BYTE,
    pub enabled: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nHosts: CARD16,
    pub pad1: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xListHostsReply = Struct_Unnamed145;
#[repr(C)]
struct Struct_Unnamed146 {
    pub _type: BYTE,
    pub errorCode: BYTE,
    pub sequenceNumber: CARD16,
    pub resourceID: CARD32,
    pub minorCode: CARD16,
    pub majorCode: CARD8,
    pub pad1: BYTE,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xError = Struct_Unnamed146;
#[repr(C)]
pub struct Struct__xEvent {
    pub u: Union_Unnamed147,
}
#[repr(C)]
pub struct Union_Unnamed147 {
    pub data: [u32, ..8u],
}
impl Union_Unnamed147 {
    pub fn u(&mut self) -> *mut Struct_Unnamed148 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn keyButtonPointer(&mut self) -> *mut Struct_Unnamed149 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn enterLeave(&mut self) -> *mut Struct_Unnamed150 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn focus(&mut self) -> *mut Struct_Unnamed151 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn expose(&mut self) -> *mut Struct_Unnamed152 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn graphicsExposure(&mut self) -> *mut Struct_Unnamed153 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn noExposure(&mut self) -> *mut Struct_Unnamed154 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn visibility(&mut self) -> *mut Struct_Unnamed155 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn createNotify(&mut self) -> *mut Struct_Unnamed156 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn destroyNotify(&mut self) -> *mut Struct_Unnamed157 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn unmapNotify(&mut self) -> *mut Struct_Unnamed158 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn mapNotify(&mut self) -> *mut Struct_Unnamed159 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn mapRequest(&mut self) -> *mut Struct_Unnamed160 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn reparent(&mut self) -> *mut Struct_Unnamed161 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn configureNotify(&mut self) -> *mut Struct_Unnamed162 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn configureRequest(&mut self) -> *mut Struct_Unnamed163 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn gravity(&mut self) -> *mut Struct_Unnamed164 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn resizeRequest(&mut self) -> *mut Struct_Unnamed165 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn circulate(&mut self) -> *mut Struct_Unnamed166 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn property(&mut self) -> *mut Struct_Unnamed167 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn selectionClear(&mut self) -> *mut Struct_Unnamed168 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn selectionRequest(&mut self) -> *mut Struct_Unnamed169 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn selectionNotify(&mut self) -> *mut Struct_Unnamed170 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn colormap(&mut self) -> *mut Struct_Unnamed171 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn mappingNotify(&mut self) -> *mut Struct_Unnamed172 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn clientMessage(&mut self) -> *mut Struct_Unnamed173 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed148 {
    pub _type: BYTE,
    pub detail: BYTE,
    pub sequenceNumber: CARD16,
}
#[repr(C)]
struct Struct_Unnamed149 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub root: CARD32,
    pub event: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub eventX: INT16,
    pub eventY: INT16,
    pub state: KeyButMask,
    pub sameScreen: BOOL,
    pub pad1: BYTE,
}
#[repr(C)]
struct Struct_Unnamed150 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub root: CARD32,
    pub event: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub eventX: INT16,
    pub eventY: INT16,
    pub state: KeyButMask,
    pub mode: BYTE,
    pub flags: BYTE,
}
#[repr(C)]
struct Struct_Unnamed151 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub mode: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed152 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub x: CARD16,
    pub y: CARD16,
    pub width: CARD16,
    pub height: CARD16,
    pub count: CARD16,
    pub pad2: CARD16,
}
#[repr(C)]
struct Struct_Unnamed153 {
    pub pad00: CARD32,
    pub drawable: CARD32,
    pub x: CARD16,
    pub y: CARD16,
    pub width: CARD16,
    pub height: CARD16,
    pub minorEvent: CARD16,
    pub count: CARD16,
    pub majorEvent: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed154 {
    pub pad00: CARD32,
    pub drawable: CARD32,
    pub minorEvent: CARD16,
    pub majorEvent: BYTE,
    pub bpad: BYTE,
}
#[repr(C)]
struct Struct_Unnamed155 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub state: CARD8,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed156 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub _override: BOOL,
    pub bpad: BYTE,
}
#[repr(C)]
struct Struct_Unnamed157 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
}
#[repr(C)]
struct Struct_Unnamed158 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub fromConfigure: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed159 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub _override: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed160 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
}
#[repr(C)]
struct Struct_Unnamed161 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub _override: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed162 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub aboveSibling: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub _override: BOOL,
    pub bpad: BYTE,
}
#[repr(C)]
struct Struct_Unnamed163 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
    pub sibling: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub valueMask: CARD16,
    pub pad1: CARD32,
}
#[repr(C)]
struct Struct_Unnamed164 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
}
#[repr(C)]
struct Struct_Unnamed165 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
#[repr(C)]
struct Struct_Unnamed166 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub parent: CARD32,
    pub place: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[repr(C)]
struct Struct_Unnamed167 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub atom: CARD32,
    pub time: CARD32,
    pub state: BYTE,
    pub pad1: BYTE,
    pub pad2: CARD16,
}
#[repr(C)]
struct Struct_Unnamed168 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub window: CARD32,
    pub atom: CARD32,
}
#[repr(C)]
struct Struct_Unnamed169 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub owner: CARD32,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
}
#[repr(C)]
struct Struct_Unnamed170 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
}
#[repr(C)]
struct Struct_Unnamed171 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub colormap: CARD32,
    pub new: BOOL,
    pub state: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[repr(C)]
struct Struct_Unnamed172 {
    pub pad00: CARD32,
    pub request: CARD8,
    pub firstKeyCode: CARD8,
    pub count: CARD8,
    pub pad1: BYTE,
}
#[repr(C)]
struct Struct_Unnamed173 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub u: Union_Unnamed174,
}
#[repr(C)]
pub struct Union_Unnamed174 {
    pub data: [u32, ..6u],
}
impl Union_Unnamed174 {
    pub fn l(&mut self) -> *mut Struct_Unnamed175 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn s(&mut self) -> *mut Struct_Unnamed176 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn b(&mut self) -> *mut Struct_Unnamed177 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed175 {
    pub _type: CARD32,
    pub longs0: INT32,
    pub longs1: INT32,
    pub longs2: INT32,
    pub longs3: INT32,
    pub longs4: INT32,
}
#[repr(C)]
struct Struct_Unnamed176 {
    pub _type: CARD32,
    pub shorts0: INT16,
    pub shorts1: INT16,
    pub shorts2: INT16,
    pub shorts3: INT16,
    pub shorts4: INT16,
    pub shorts5: INT16,
    pub shorts6: INT16,
    pub shorts7: INT16,
    pub shorts8: INT16,
    pub shorts9: INT16,
}
#[repr(C)]
struct Struct_Unnamed177 {
    pub _type: CARD32,
    pub bytes: [INT8, ..20u],
}
pub type xEvent = Struct__xEvent;
#[repr(C)]
struct Struct_Unnamed178 {
    pub _type: BYTE,
    pub extension: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub evtype: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
pub type xGenericEvent = Struct_Unnamed178;
#[repr(C)]
struct Struct_Unnamed179 {
    pub _type: BYTE,
    pub map: [BYTE, ..31u],
}
pub type xKeymapEvent = Struct_Unnamed179;
#[repr(C)]
pub struct Union_Unnamed180 {
    pub data: [u32, ..8u],
}
impl Union_Unnamed180 {
    pub fn generic(&mut self) -> *mut xGenericReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn geom(&mut self) -> *mut xGetGeometryReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn tree(&mut self) -> *mut xQueryTreeReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn atom(&mut self) -> *mut xInternAtomReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn atomName(&mut self) -> *mut xGetAtomNameReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn property(&mut self) -> *mut xGetPropertyReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn listProperties(&mut self) -> *mut xListPropertiesReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn selection(&mut self) -> *mut xGetSelectionOwnerReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn grabPointer(&mut self) -> *mut xGrabPointerReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn grabKeyboard(&mut self) -> *mut xGrabKeyboardReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pointer(&mut self) -> *mut xQueryPointerReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn motionEvents(&mut self) -> *mut xGetMotionEventsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn coords(&mut self) -> *mut xTranslateCoordsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn inputFocus(&mut self) -> *mut xGetInputFocusReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn textExtents(&mut self) -> *mut xQueryTextExtentsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn fonts(&mut self) -> *mut xListFontsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn fontPath(&mut self) -> *mut xGetFontPathReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn image(&mut self) -> *mut xGetImageReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn colormaps(&mut self) -> *mut xListInstalledColormapsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn allocColor(&mut self) -> *mut xAllocColorReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn allocNamedColor(&mut self) -> *mut xAllocNamedColorReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn colorCells(&mut self) -> *mut xAllocColorCellsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn colorPlanes(&mut self) -> *mut xAllocColorPlanesReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn colors(&mut self) -> *mut xQueryColorsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn lookupColor(&mut self) -> *mut xLookupColorReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn bestSize(&mut self) -> *mut xQueryBestSizeReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn extension(&mut self) -> *mut xQueryExtensionReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn extensions(&mut self) -> *mut xListExtensionsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn setModifierMapping(&mut self) -> *mut xSetModifierMappingReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn getModifierMapping(&mut self) -> *mut xGetModifierMappingReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn setPointerMapping(&mut self) -> *mut xSetPointerMappingReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn getKeyboardMapping(&mut self) -> *mut xGetKeyboardMappingReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn getPointerMapping(&mut self) -> *mut xGetPointerMappingReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn pointerControl(&mut self) -> *mut xGetPointerControlReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn screenSaver(&mut self) -> *mut xGetScreenSaverReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn hosts(&mut self) -> *mut xListHostsReply {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn error(&mut self) -> *mut xError {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn event(&mut self) -> *mut xEvent {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type xReply = Union_Unnamed180;
#[repr(C)]
pub struct Struct__xReq {
    pub reqType: CARD8,
    pub data: CARD8,
    pub length: CARD16,
}
pub type xReq = Struct__xReq;
#[repr(C)]
struct Struct_Unnamed181 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub id: CARD32,
}
pub type xResourceReq = Struct_Unnamed181;
#[repr(C)]
struct Struct_Unnamed182 {
    pub reqType: CARD8,
    pub depth: CARD8,
    pub length: CARD16,
    pub wid: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub class: CARD16,
    pub visual: CARD32,
    pub mask: CARD32,
}
pub type xCreateWindowReq = Struct_Unnamed182;
#[repr(C)]
struct Struct_Unnamed183 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub valueMask: CARD32,
}
pub type xChangeWindowAttributesReq = Struct_Unnamed183;
#[repr(C)]
struct Struct_Unnamed184 {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
    pub window: CARD32,
}
pub type xChangeSaveSetReq = Struct_Unnamed184;
#[repr(C)]
struct Struct_Unnamed185 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
}
pub type xReparentWindowReq = Struct_Unnamed185;
#[repr(C)]
struct Struct_Unnamed186 {
    pub reqType: CARD8,
    pub pad: CARD8,
    pub length: CARD16,
    pub window: CARD32,
    pub mask: CARD16,
    pub pad2: CARD16,
}
pub type xConfigureWindowReq = Struct_Unnamed186;
#[repr(C)]
struct Struct_Unnamed187 {
    pub reqType: CARD8,
    pub direction: CARD8,
    pub length: CARD16,
    pub window: CARD32,
}
pub type xCirculateWindowReq = Struct_Unnamed187;
#[repr(C)]
struct Struct_Unnamed188 {
    pub reqType: CARD8,
    pub onlyIfExists: BOOL,
    pub length: CARD16,
    pub nbytes: CARD16,
    pub pad: CARD16,
}
pub type xInternAtomReq = Struct_Unnamed188;
#[repr(C)]
struct Struct_Unnamed189 {
    pub reqType: CARD8,
    pub mode: CARD8,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
    pub _type: CARD32,
    pub format: CARD8,
    pub pad: [BYTE, ..3u],
    pub nUnits: CARD32,
}
pub type xChangePropertyReq = Struct_Unnamed189;
#[repr(C)]
struct Struct_Unnamed190 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
}
pub type xDeletePropertyReq = Struct_Unnamed190;
#[repr(C)]
struct Struct_Unnamed191 {
    pub reqType: CARD8,
    pub delete: BOOL,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
    pub _type: CARD32,
    pub longOffset: CARD32,
    pub longLength: CARD32,
}
pub type xGetPropertyReq = Struct_Unnamed191;
#[repr(C)]
struct Struct_Unnamed192 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub selection: CARD32,
    pub time: CARD32,
}
pub type xSetSelectionOwnerReq = Struct_Unnamed192;
#[repr(C)]
struct Struct_Unnamed193 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
    pub time: CARD32,
}
pub type xConvertSelectionReq = Struct_Unnamed193;
#[repr(C)]
struct Struct_Unnamed194 {
    pub reqType: CARD8,
    pub propagate: BOOL,
    pub length: CARD16,
    pub destination: CARD32,
    pub eventMask: CARD32,
    pub event: xEvent,
}
pub type xSendEventReq = Struct_Unnamed194;
#[repr(C)]
struct Struct_Unnamed195 {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub eventMask: CARD16,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub confineTo: CARD32,
    pub cursor: CARD32,
    pub time: CARD32,
}
pub type xGrabPointerReq = Struct_Unnamed195;
#[repr(C)]
struct Struct_Unnamed196 {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub eventMask: CARD16,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub confineTo: CARD32,
    pub cursor: CARD32,
    pub button: CARD8,
    pub pad: BYTE,
    pub modifiers: CARD16,
}
pub type xGrabButtonReq = Struct_Unnamed196;
#[repr(C)]
struct Struct_Unnamed197 {
    pub reqType: CARD8,
    pub button: CARD8,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub pad: CARD16,
}
pub type xUngrabButtonReq = Struct_Unnamed197;
#[repr(C)]
struct Struct_Unnamed198 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cursor: CARD32,
    pub time: CARD32,
    pub eventMask: CARD16,
    pub pad2: CARD16,
}
pub type xChangeActivePointerGrabReq = Struct_Unnamed198;
#[repr(C)]
struct Struct_Unnamed199 {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub time: CARD32,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub pad: CARD16,
}
pub type xGrabKeyboardReq = Struct_Unnamed199;
#[repr(C)]
struct Struct_Unnamed200 {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub key: CARD8,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
pub type xGrabKeyReq = Struct_Unnamed200;
#[repr(C)]
struct Struct_Unnamed201 {
    pub reqType: CARD8,
    pub key: CARD8,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub pad: CARD16,
}
pub type xUngrabKeyReq = Struct_Unnamed201;
#[repr(C)]
struct Struct_Unnamed202 {
    pub reqType: CARD8,
    pub mode: CARD8,
    pub length: CARD16,
    pub time: CARD32,
}
pub type xAllowEventsReq = Struct_Unnamed202;
#[repr(C)]
struct Struct_Unnamed203 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub start: CARD32,
    pub stop: CARD32,
}
pub type xGetMotionEventsReq = Struct_Unnamed203;
#[repr(C)]
struct Struct_Unnamed204 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcWid: CARD32,
    pub dstWid: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
}
pub type xTranslateCoordsReq = Struct_Unnamed204;
#[repr(C)]
struct Struct_Unnamed205 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcWid: CARD32,
    pub dstWid: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub srcWidth: CARD16,
    pub srcHeight: CARD16,
    pub dstX: INT16,
    pub dstY: INT16,
}
pub type xWarpPointerReq = Struct_Unnamed205;
#[repr(C)]
struct Struct_Unnamed206 {
    pub reqType: CARD8,
    pub revertTo: CARD8,
    pub length: CARD16,
    pub focus: CARD32,
    pub time: CARD32,
}
pub type xSetInputFocusReq = Struct_Unnamed206;
#[repr(C)]
struct Struct_Unnamed207 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub fid: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xOpenFontReq = Struct_Unnamed207;
#[repr(C)]
struct Struct_Unnamed208 {
    pub reqType: CARD8,
    pub oddLength: BOOL,
    pub length: CARD16,
    pub fid: CARD32,
}
pub type xQueryTextExtentsReq = Struct_Unnamed208;
#[repr(C)]
struct Struct_Unnamed209 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub maxNames: CARD16,
    pub nbytes: CARD16,
}
pub type xListFontsReq = Struct_Unnamed209;
pub type xListFontsWithInfoReq = xListFontsReq;
#[repr(C)]
struct Struct_Unnamed210 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub nFonts: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xSetFontPathReq = Struct_Unnamed210;
#[repr(C)]
struct Struct_Unnamed211 {
    pub reqType: CARD8,
    pub depth: CARD8,
    pub length: CARD16,
    pub pid: CARD32,
    pub drawable: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
pub type xCreatePixmapReq = Struct_Unnamed211;
#[repr(C)]
struct Struct_Unnamed212 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub drawable: CARD32,
    pub mask: CARD32,
}
pub type xCreateGCReq = Struct_Unnamed212;
#[repr(C)]
struct Struct_Unnamed213 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub mask: CARD32,
}
pub type xChangeGCReq = Struct_Unnamed213;
#[repr(C)]
struct Struct_Unnamed214 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcGC: CARD32,
    pub dstGC: CARD32,
    pub mask: CARD32,
}
pub type xCopyGCReq = Struct_Unnamed214;
#[repr(C)]
struct Struct_Unnamed215 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub dashOffset: CARD16,
    pub nDashes: CARD16,
}
pub type xSetDashesReq = Struct_Unnamed215;
#[repr(C)]
struct Struct_Unnamed216 {
    pub reqType: CARD8,
    pub ordering: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub xOrigin: INT16,
    pub yOrigin: INT16,
}
pub type xSetClipRectanglesReq = Struct_Unnamed216;
#[repr(C)]
struct Struct_Unnamed217 {
    pub reqType: CARD8,
    pub exposures: BOOL,
    pub length: CARD16,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
pub type xClearAreaReq = Struct_Unnamed217;
#[repr(C)]
struct Struct_Unnamed218 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcDrawable: CARD32,
    pub dstDrawable: CARD32,
    pub gc: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
pub type xCopyAreaReq = Struct_Unnamed218;
#[repr(C)]
struct Struct_Unnamed219 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcDrawable: CARD32,
    pub dstDrawable: CARD32,
    pub gc: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub bitPlane: CARD32,
}
pub type xCopyPlaneReq = Struct_Unnamed219;
#[repr(C)]
struct Struct_Unnamed220 {
    pub reqType: CARD8,
    pub coordMode: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
}
pub type xPolyPointReq = Struct_Unnamed220;
pub type xPolyLineReq = xPolyPointReq;
#[repr(C)]
struct Struct_Unnamed221 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
}
pub type xPolySegmentReq = Struct_Unnamed221;
pub type xPolyArcReq = xPolySegmentReq;
pub type xPolyRectangleReq = xPolySegmentReq;
pub type xPolyFillRectangleReq = xPolySegmentReq;
pub type xPolyFillArcReq = xPolySegmentReq;
#[repr(C)]
pub struct Struct__FillPolyReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub shape: BYTE,
    pub coordMode: BYTE,
    pub pad1: CARD16,
}
pub type xFillPolyReq = Struct__FillPolyReq;
#[repr(C)]
pub struct Struct__PutImageReq {
    pub reqType: CARD8,
    pub format: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub width: CARD16,
    pub height: CARD16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub leftPad: CARD8,
    pub depth: CARD8,
    pub pad: CARD16,
}
pub type xPutImageReq = Struct__PutImageReq;
#[repr(C)]
struct Struct_Unnamed222 {
    pub reqType: CARD8,
    pub format: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub planeMask: CARD32,
}
pub type xGetImageReq = Struct_Unnamed222;
#[repr(C)]
struct Struct_Unnamed223 {
    pub reqType: CARD8,
    pub pad: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub x: INT16,
    pub y: INT16,
}
pub type xPolyTextReq = Struct_Unnamed223;
pub type xPolyText8Req = xPolyTextReq;
pub type xPolyText16Req = xPolyTextReq;
#[repr(C)]
struct Struct_Unnamed224 {
    pub reqType: CARD8,
    pub nChars: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub x: INT16,
    pub y: INT16,
}
pub type xImageTextReq = Struct_Unnamed224;
pub type xImageText8Req = xImageTextReq;
pub type xImageText16Req = xImageTextReq;
#[repr(C)]
struct Struct_Unnamed225 {
    pub reqType: CARD8,
    pub alloc: BYTE,
    pub length: CARD16,
    pub mid: CARD32,
    pub window: CARD32,
    pub visual: CARD32,
}
pub type xCreateColormapReq = Struct_Unnamed225;
#[repr(C)]
struct Struct_Unnamed226 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub mid: CARD32,
    pub srcCmap: CARD32,
}
pub type xCopyColormapAndFreeReq = Struct_Unnamed226;
#[repr(C)]
struct Struct_Unnamed227 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad2: CARD16,
}
pub type xAllocColorReq = Struct_Unnamed227;
#[repr(C)]
struct Struct_Unnamed228 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xAllocNamedColorReq = Struct_Unnamed228;
#[repr(C)]
struct Struct_Unnamed229 {
    pub reqType: CARD8,
    pub contiguous: BOOL,
    pub length: CARD16,
    pub cmap: CARD32,
    pub colors: CARD16,
    pub planes: CARD16,
}
pub type xAllocColorCellsReq = Struct_Unnamed229;
#[repr(C)]
struct Struct_Unnamed230 {
    pub reqType: CARD8,
    pub contiguous: BOOL,
    pub length: CARD16,
    pub cmap: CARD32,
    pub colors: CARD16,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
}
pub type xAllocColorPlanesReq = Struct_Unnamed230;
#[repr(C)]
struct Struct_Unnamed231 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub planeMask: CARD32,
}
pub type xFreeColorsReq = Struct_Unnamed231;
#[repr(C)]
struct Struct_Unnamed232 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
}
pub type xStoreColorsReq = Struct_Unnamed232;
#[repr(C)]
struct Struct_Unnamed233 {
    pub reqType: CARD8,
    pub flags: CARD8,
    pub length: CARD16,
    pub cmap: CARD32,
    pub pixel: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xStoreNamedColorReq = Struct_Unnamed233;
#[repr(C)]
struct Struct_Unnamed234 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
}
pub type xQueryColorsReq = Struct_Unnamed234;
#[repr(C)]
struct Struct_Unnamed235 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xLookupColorReq = Struct_Unnamed235;
#[repr(C)]
struct Struct_Unnamed236 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cid: CARD32,
    pub source: CARD32,
    pub mask: CARD32,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
    pub x: CARD16,
    pub y: CARD16,
}
pub type xCreateCursorReq = Struct_Unnamed236;
#[repr(C)]
struct Struct_Unnamed237 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cid: CARD32,
    pub source: CARD32,
    pub mask: CARD32,
    pub sourceChar: CARD16,
    pub maskChar: CARD16,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
}
pub type xCreateGlyphCursorReq = Struct_Unnamed237;
#[repr(C)]
struct Struct_Unnamed238 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cursor: CARD32,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
}
pub type xRecolorCursorReq = Struct_Unnamed238;
#[repr(C)]
struct Struct_Unnamed239 {
    pub reqType: CARD8,
    pub class: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
pub type xQueryBestSizeReq = Struct_Unnamed239;
#[repr(C)]
struct Struct_Unnamed240 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
pub type xQueryExtensionReq = Struct_Unnamed240;
#[repr(C)]
struct Struct_Unnamed241 {
    pub reqType: CARD8,
    pub numKeyPerModifier: CARD8,
    pub length: CARD16,
}
pub type xSetModifierMappingReq = Struct_Unnamed241;
#[repr(C)]
struct Struct_Unnamed242 {
    pub reqType: CARD8,
    pub nElts: CARD8,
    pub length: CARD16,
}
pub type xSetPointerMappingReq = Struct_Unnamed242;
#[repr(C)]
struct Struct_Unnamed243 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub firstKeyCode: CARD8,
    pub count: CARD8,
    pub pad1: CARD16,
}
pub type xGetKeyboardMappingReq = Struct_Unnamed243;
#[repr(C)]
struct Struct_Unnamed244 {
    pub reqType: CARD8,
    pub keyCodes: CARD8,
    pub length: CARD16,
    pub firstKeyCode: CARD8,
    pub keySymsPerKeyCode: CARD8,
    pub pad1: CARD16,
}
pub type xChangeKeyboardMappingReq = Struct_Unnamed244;
#[repr(C)]
struct Struct_Unnamed245 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub mask: CARD32,
}
pub type xChangeKeyboardControlReq = Struct_Unnamed245;
#[repr(C)]
struct Struct_Unnamed246 {
    pub reqType: CARD8,
    pub percent: INT8,
    pub length: CARD16,
}
pub type xBellReq = Struct_Unnamed246;
#[repr(C)]
struct Struct_Unnamed247 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub accelNum: INT16,
    pub accelDenum: INT16,
    pub threshold: INT16,
    pub doAccel: BOOL,
    pub doThresh: BOOL,
}
pub type xChangePointerControlReq = Struct_Unnamed247;
#[repr(C)]
struct Struct_Unnamed248 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub timeout: INT16,
    pub interval: INT16,
    pub preferBlank: BYTE,
    pub allowExpose: BYTE,
    pub pad2: CARD16,
}
pub type xSetScreenSaverReq = Struct_Unnamed248;
#[repr(C)]
struct Struct_Unnamed249 {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
    pub hostFamily: CARD8,
    pub pad: BYTE,
    pub hostLength: CARD16,
}
pub type xChangeHostsReq = Struct_Unnamed249;
#[repr(C)]
struct Struct_Unnamed250 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
}
pub type xListHostsReq = Struct_Unnamed250;
#[repr(C)]
struct Struct_Unnamed251 {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
}
pub type xChangeModeReq = Struct_Unnamed251;
pub type xSetAccessControlReq = xChangeModeReq;
pub type xSetCloseDownModeReq = xChangeModeReq;
pub type xForceScreenSaverReq = xChangeModeReq;
#[repr(C)]
struct Struct_Unnamed252 {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub nAtoms: CARD16,
    pub nPositions: INT16,
}
pub type xRotatePropertiesReq = Struct_Unnamed252;
#[repr(C)]
pub struct Struct__XGC {
    pub ext_data: *mut XExtData,
    pub gid: GContext,
    pub rects: ::libc::c_int,
    pub dashes: ::libc::c_int,
    pub dirty: ::libc::c_ulong,
    pub values: XGCValues,
}
#[repr(C)]
pub struct Struct__XDisplay {
    pub ext_data: *mut XExtData,
    pub free_funcs: *mut Struct__XFreeFuncs,
    pub fd: ::libc::c_int,
    pub conn_checker: ::libc::c_int,
    pub proto_major_version: ::libc::c_int,
    pub proto_minor_version: ::libc::c_int,
    pub vendor: *mut ::libc::c_char,
    pub resource_base: XID,
    pub resource_mask: XID,
    pub resource_id: XID,
    pub resource_shift: ::libc::c_int,
    pub resource_alloc: ::std::option::Option<extern "C" fn
                                                  (arg1:
                                                       *mut Struct__XDisplay)
                                                  -> XID>,
    pub byte_order: ::libc::c_int,
    pub bitmap_unit: ::libc::c_int,
    pub bitmap_pad: ::libc::c_int,
    pub bitmap_bit_order: ::libc::c_int,
    pub nformats: ::libc::c_int,
    pub pixmap_format: *mut ScreenFormat,
    pub vnumber: ::libc::c_int,
    pub release: ::libc::c_int,
    pub head: *mut Struct__XSQEvent,
    pub tail: *mut Struct__XSQEvent,
    pub qlen: ::libc::c_int,
    pub last_request_read: ::libc::c_ulong,
    pub request: ::libc::c_ulong,
    pub last_req: *mut ::libc::c_char,
    pub buffer: *mut ::libc::c_char,
    pub bufptr: *mut ::libc::c_char,
    pub bufmax: *mut ::libc::c_char,
    pub max_request_size: ::libc::c_uint,
    pub db: *mut Struct__XrmHashBucketRec,
    pub synchandler: ::std::option::Option<extern "C" fn
                                               (arg1: *mut Struct__XDisplay)
                                               -> ::libc::c_int>,
    pub display_name: *mut ::libc::c_char,
    pub default_screen: ::libc::c_int,
    pub nscreens: ::libc::c_int,
    pub screens: *mut Screen,
    pub motion_buffer: ::libc::c_ulong,
    pub flags: ::libc::c_ulong,
    pub min_keycode: ::libc::c_int,
    pub max_keycode: ::libc::c_int,
    pub keysyms: *mut KeySym,
    pub modifiermap: *mut XModifierKeymap,
    pub keysyms_per_keycode: ::libc::c_int,
    pub xdefaults: *mut ::libc::c_char,
    pub scratch_buffer: *mut ::libc::c_char,
    pub scratch_length: ::libc::c_ulong,
    pub ext_number: ::libc::c_int,
    pub ext_procs: *mut Struct__XExten,
    pub event_vec: [::std::option::Option<extern "C" fn
                                              (arg1: *mut Display,
                                               arg2: *mut XEvent,
                                               arg3: *mut xEvent)
                                              -> ::libc::c_int>, ..128u],
    pub wire_vec: [::std::option::Option<extern "C" fn
                                             (arg1: *mut Display,
                                              arg2: *mut XEvent,
                                              arg3: *mut xEvent)
                                             -> ::libc::c_int>, ..128u],
    pub lock_meaning: KeySym,
    pub lock: *mut Struct__XLockInfo,
    pub async_handlers: *mut Struct__XInternalAsync,
    pub bigreq_size: ::libc::c_ulong,
    pub lock_fns: *mut Struct__XLockPtrs,
    pub idlist_alloc: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Display,
                                                 arg2: *mut XID,
                                                 arg3: ::libc::c_int)>,
    pub key_bindings: *mut Struct__XKeytrans,
    pub cursor_font: Font,
    pub atoms: *mut Struct__XDisplayAtoms,
    pub mode_switch: ::libc::c_uint,
    pub num_lock: ::libc::c_uint,
    pub context_db: *mut Struct__XContextDB,
    pub error_vec: *mut ::std::option::Option<extern "C" fn
                                                  (arg1: *mut Display,
                                                   arg2: *mut XErrorEvent,
                                                   arg3: *mut xError)
                                                  -> ::libc::c_int>,
    pub cms: Struct_Unnamed253,
    pub im_filters: *mut Struct__XIMFilter,
    pub qfree: *mut Struct__XSQEvent,
    pub next_event_serial_num: ::libc::c_ulong,
    pub flushes: *mut Struct__XExten,
    pub im_fd_info: *mut Struct__XConnectionInfo,
    pub im_fd_length: ::libc::c_int,
    pub conn_watchers: *mut Struct__XConnWatchInfo,
    pub watcher_count: ::libc::c_int,
    pub filedes: XPointer,
    pub savedsynchandler: ::std::option::Option<extern "C" fn
                                                    (arg1: *mut Display)
                                                    -> ::libc::c_int>,
    pub resource_max: XID,
    pub xcmisc_opcode: ::libc::c_int,
    pub xkb_info: *mut Struct__XkbInfoRec,
    pub trans_conn: *mut Struct__XtransConnInfo,
    pub xcb: *mut Struct__X11XCBPrivate,
    pub next_cookie: ::libc::c_uint,
    pub generic_event_vec: [::std::option::Option<extern "C" fn
                                                      (arg1: *mut Display,
                                                       arg2:
                                                           *mut XGenericEventCookie,
                                                       arg3: *mut xEvent)
                                                      ->
                                                          ::libc::c_int>, ..128u],
    pub generic_event_copy_vec: [::std::option::Option<extern "C" fn
                                                           (arg1:
                                                                *mut Display,
                                                            arg2:
                                                                *mut XGenericEventCookie,
                                                            arg3:
                                                                *mut XGenericEventCookie)
                                                           ->
                                                               ::libc::c_int>, ..128u],
    pub cookiejar: *mut ::libc::c_void,
}
pub enum Struct__XLockInfo { }
pub enum Struct__XKeytrans { }
pub enum Struct__XDisplayAtoms { }
pub enum Struct__XContextDB { }
#[repr(C)]
struct Struct_Unnamed253 {
    pub defaultCCCs: XPointer,
    pub clientCmaps: XPointer,
    pub perVisualIntensityMaps: XPointer,
}
pub enum Struct__XIMFilter { }
pub enum Struct__XkbInfoRec { }
pub enum Struct__XtransConnInfo { }
pub enum Struct__X11XCBPrivate { }
#[repr(C)]
pub struct Struct__XSQEvent {
    pub next: *mut Struct__XSQEvent,
    pub event: XEvent,
    pub qserial_num: ::libc::c_ulong,
}
pub type _XQEvent = Struct__XSQEvent;
#[repr(C)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data, ..13u],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char, ..13u],
}
pub enum Struct___locale_data { }
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type Enum_Unnamed254 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed254;
#[repr(C)]
pub struct Union_wait {
    pub data: [u32, ..1u],
}
impl Union_wait {
    pub fn w_status(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __wait_terminated(&mut self) -> *mut Struct_Unnamed255 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __wait_stopped(&mut self) -> *mut Struct_Unnamed256 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
struct Struct_Unnamed255 {
    pub __w_termsig: ::libc::c_uint,
    pub __w_coredump: ::libc::c_uint,
    pub __w_retcode: ::libc::c_uint,
    pub unnamed_field1: ::libc::c_uint,
}
#[repr(C)]
struct Struct_Unnamed256 {
    pub __w_stopval: ::libc::c_uint,
    pub __w_stopsig: ::libc::c_uint,
    pub unnamed_field1: ::libc::c_uint,
}
#[repr(C)]
pub struct Union_Unnamed257 {
    pub data: [u64, ..1u],
}
impl Union_Unnamed257 {
    pub fn __uptr(&mut self) -> *mut *mut Union_wait {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type __WAIT_STATUS = Union_Unnamed257;
#[repr(C)]
struct Struct_Unnamed258 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
pub type div_t = Struct_Unnamed258;
#[repr(C)]
struct Struct_Unnamed259 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
pub type ldiv_t = Struct_Unnamed259;
#[repr(C)]
struct Struct_Unnamed260 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
pub type lldiv_t = Struct_Unnamed260;
#[repr(C)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
#[repr(C)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort, ..3u],
    pub __old_x: [::libc::c_ushort, ..3u],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> ::libc::c_int>;
pub enum Struct__LockInfoRec { }
pub type LockInfoPtr = *mut Struct__LockInfoRec;
#[repr(C)]
pub struct Struct__XLockPtrs {
    pub lock_display: ::std::option::Option<extern "C" fn
                                                (arg1: *mut Display)>,
    pub unlock_display: ::std::option::Option<extern "C" fn
                                                  (arg1: *mut Display)>,
}
#[repr(C)]
pub struct Struct__XInternalAsync {
    pub next: *mut Struct__XInternalAsync,
    pub handler: ::std::option::Option<extern "C" fn
                                           (arg1: *mut Display,
                                            arg2: *mut xReply,
                                            arg3: *mut ::libc::c_char,
                                            arg4: ::libc::c_int,
                                            arg5: XPointer) -> ::libc::c_int>,
    pub data: XPointer,
}
pub type _XAsyncHandler = Struct__XInternalAsync;
#[repr(C)]
pub struct Struct__XAsyncEState {
    pub min_sequence_number: ::libc::c_ulong,
    pub max_sequence_number: ::libc::c_ulong,
    pub error_code: ::libc::c_uchar,
    pub major_opcode: ::libc::c_uchar,
    pub minor_opcode: ::libc::c_ushort,
    pub last_error_received: ::libc::c_uchar,
    pub error_count: ::libc::c_int,
}
pub type _XAsyncErrorState = Struct__XAsyncEState;
pub type FreeFuncType =
    ::std::option::Option<extern "C" fn(arg1: *mut Display)>;
pub type FreeModmapType =
    ::std::option::Option<extern "C" fn(arg1: *mut XModifierKeymap)
                              -> ::libc::c_int>;
#[repr(C)]
pub struct Struct__XFreeFuncs {
    pub atoms: FreeFuncType,
    pub modifiermap: FreeModmapType,
    pub key_bindings: FreeFuncType,
    pub context_db: FreeFuncType,
    pub defaultCCCs: FreeFuncType,
    pub clientCmaps: FreeFuncType,
    pub intensityMaps: FreeFuncType,
    pub im_filters: FreeFuncType,
    pub xkb: FreeFuncType,
}
pub type _XFreeFuncRec = Struct__XFreeFuncs;
pub type CreateGCType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: GC,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type CopyGCType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: GC,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type FlushGCType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: GC,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type FreeGCType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: GC,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type CreateFontType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XFontStruct,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type FreeFontType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XFontStruct,
                               arg3: *mut XExtCodes) -> ::libc::c_int>;
pub type CloseDisplayType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XExtCodes)
                              -> ::libc::c_int>;
pub type ErrorType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut xError,
                               arg3: *mut XExtCodes, arg4: *mut ::libc::c_int)
                              -> ::libc::c_int>;
pub type ErrorStringType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: ::libc::c_int,
                               arg3: *mut XExtCodes,
                               arg4: *mut ::libc::c_char, arg5: ::libc::c_int)
                              -> *mut ::libc::c_char>;
pub type PrintErrorType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XErrorEvent,
                               arg3: *mut ::libc::c_void)>;
pub type BeforeFlushType =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: *mut XExtCodes,
                               arg3: *const ::libc::c_char,
                               arg4: ::libc::c_long)>;
#[repr(C)]
pub struct Struct__XExten {
    pub next: *mut Struct__XExten,
    pub codes: XExtCodes,
    pub create_GC: CreateGCType,
    pub copy_GC: CopyGCType,
    pub flush_GC: FlushGCType,
    pub free_GC: FreeGCType,
    pub create_Font: CreateFontType,
    pub free_Font: FreeFontType,
    pub close_display: CloseDisplayType,
    pub error: ErrorType,
    pub error_string: ErrorStringType,
    pub name: *mut ::libc::c_char,
    pub error_values: PrintErrorType,
    pub before_flush: BeforeFlushType,
    pub next_flush: *mut Struct__XExten,
}
pub type _XExtension = Struct__XExten;
pub type _XInternalConnectionProc =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut Display, arg2: ::libc::c_int,
                               arg3: XPointer)>;
#[repr(C)]
pub struct Struct__XConnectionInfo {
    pub fd: ::libc::c_int,
    pub read_callback: _XInternalConnectionProc,
    pub call_data: XPointer,
    pub watch_data: *mut XPointer,
    pub next: *mut Struct__XConnectionInfo,
}
#[repr(C)]
pub struct Struct__XConnWatchInfo {
    pub _fn: XConnectionWatchProc,
    pub client_data: XPointer,
    pub next: *mut Struct__XConnWatchInfo,
}
#[link(name = "X11")]
extern "C" {
    pub static mut _Xdebug: ::libc::c_int;
    pub static mut _XCreateMutex_fn:
               ::std::option::Option<extern "C" fn(arg1: LockInfoPtr)>;
    pub static mut _XFreeMutex_fn:
               ::std::option::Option<extern "C" fn(arg1: LockInfoPtr)>;
    pub static mut _XLockMutex_fn:
               ::std::option::Option<extern "C" fn(arg1: LockInfoPtr)>;
    pub static mut _XUnlockMutex_fn:
               ::std::option::Option<extern "C" fn(arg1: LockInfoPtr)>;
    pub static mut _Xglobal_lock: LockInfoPtr;
    pub static mut _XIOErrorFunction:
               ::std::option::Option<extern "C" fn(arg1: *mut Display)
                                         -> ::libc::c_int>;
    pub static mut _XErrorFunction:
               ::std::option::Option<extern "C" fn
                                         (arg1: *mut Display,
                                          arg2: *mut XErrorEvent)
                                         -> ::libc::c_int>;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn _Xmblen(str: *mut ::libc::c_char, len: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XLoadQueryFont(arg1: *mut Display, arg2: *const ::libc::c_char) ->
     *mut XFontStruct;
    pub fn XQueryFont(arg1: *mut Display, arg2: XID) -> *mut XFontStruct;
    pub fn XGetMotionEvents(arg1: *mut Display, arg2: Window, arg3: Time,
                            arg4: Time, arg5: *mut ::libc::c_int) ->
     *mut XTimeCoord;
    pub fn XDeleteModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: ::libc::c_int) ->
     *mut XModifierKeymap;
    pub fn XGetModifierMapping(arg1: *mut Display) -> *mut XModifierKeymap;
    pub fn XInsertModifiermapEntry(arg1: *mut XModifierKeymap, arg2: KeyCode,
                                   arg3: ::libc::c_int) ->
     *mut XModifierKeymap;
    pub fn XNewModifiermap(arg1: ::libc::c_int) -> *mut XModifierKeymap;
    pub fn XCreateImage(arg1: *mut Display, arg2: *mut Visual,
                        arg3: ::libc::c_uint, arg4: ::libc::c_int,
                        arg5: ::libc::c_int, arg6: *mut ::libc::c_char,
                        arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                        arg9: ::libc::c_int, arg10: ::libc::c_int) ->
     *mut XImage;
    pub fn XInitImage(arg1: *mut XImage) -> ::libc::c_int;
    pub fn XGetImage(arg1: *mut Display, arg2: Drawable, arg3: ::libc::c_int,
                     arg4: ::libc::c_int, arg5: ::libc::c_uint,
                     arg6: ::libc::c_uint, arg7: ::libc::c_ulong,
                     arg8: ::libc::c_int) -> *mut XImage;
    pub fn XGetSubImage(arg1: *mut Display, arg2: Drawable,
                        arg3: ::libc::c_int, arg4: ::libc::c_int,
                        arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                        arg7: ::libc::c_ulong, arg8: ::libc::c_int,
                        arg9: *mut XImage, arg10: ::libc::c_int,
                        arg11: ::libc::c_int) -> *mut XImage;
    pub fn XOpenDisplay(arg1: *const ::libc::c_char) -> *mut Display;
    pub fn XrmInitialize();
    pub fn XFetchBytes(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn XFetchBuffer(arg1: *mut Display, arg2: *mut ::libc::c_int,
                        arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn XGetAtomName(arg1: *mut Display, arg2: Atom) ->
     *mut ::libc::c_char;
    pub fn XGetAtomNames(arg1: *mut Display, arg2: *mut Atom,
                         arg3: ::libc::c_int, arg4: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn XGetDefault(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn XDisplayName(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn XKeysymToString(arg1: KeySym) -> *mut ::libc::c_char;
    pub fn XSynchronize(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::std::option::Option<extern "C" fn(arg1: *mut Display)
                               -> ::libc::c_int>;
    pub fn XSetAfterFunction(arg1: *mut Display,
                             arg2:
                                 ::std::option::Option<extern "C" fn
                                                           (arg1:
                                                                *mut Display)
                                                           -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn(arg1: *mut Display)
                               -> ::libc::c_int>;
    pub fn XInternAtom(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: ::libc::c_int) -> Atom;
    pub fn XInternAtoms(arg1: *mut Display, arg2: *mut *mut ::libc::c_char,
                        arg3: ::libc::c_int, arg4: ::libc::c_int,
                        arg5: *mut Atom) -> ::libc::c_int;
    pub fn XCopyColormapAndFree(arg1: *mut Display, arg2: Colormap) ->
     Colormap;
    pub fn XCreateColormap(arg1: *mut Display, arg2: Window,
                           arg3: *mut Visual, arg4: ::libc::c_int) ->
     Colormap;
    pub fn XCreatePixmapCursor(arg1: *mut Display, arg2: Pixmap, arg3: Pixmap,
                               arg4: *mut XColor, arg5: *mut XColor,
                               arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     Cursor;
    pub fn XCreateGlyphCursor(arg1: *mut Display, arg2: Font, arg3: Font,
                              arg4: ::libc::c_uint, arg5: ::libc::c_uint,
                              arg6: *const XColor, arg7: *const XColor) ->
     Cursor;
    pub fn XCreateFontCursor(arg1: *mut Display, arg2: ::libc::c_uint) ->
     Cursor;
    pub fn XLoadFont(arg1: *mut Display, arg2: *const ::libc::c_char) -> Font;
    pub fn XCreateGC(arg1: *mut Display, arg2: Drawable,
                     arg3: ::libc::c_ulong, arg4: *mut XGCValues) -> GC;
    pub fn XGContextFromGC(arg1: GC) -> GContext;
    pub fn XFlushGC(arg1: *mut Display, arg2: GC);
    pub fn XCreatePixmap(arg1: *mut Display, arg2: Drawable,
                         arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                         arg5: ::libc::c_uint) -> Pixmap;
    pub fn XCreateBitmapFromData(arg1: *mut Display, arg2: Drawable,
                                 arg3: *const ::libc::c_char,
                                 arg4: ::libc::c_uint, arg5: ::libc::c_uint)
     -> Pixmap;
    pub fn XCreatePixmapFromBitmapData(arg1: *mut Display, arg2: Drawable,
                                       arg3: *mut ::libc::c_char,
                                       arg4: ::libc::c_uint,
                                       arg5: ::libc::c_uint,
                                       arg6: ::libc::c_ulong,
                                       arg7: ::libc::c_ulong,
                                       arg8: ::libc::c_uint) -> Pixmap;
    pub fn XCreateSimpleWindow(arg1: *mut Display, arg2: Window,
                               arg3: ::libc::c_int, arg4: ::libc::c_int,
                               arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                               arg7: ::libc::c_uint, arg8: ::libc::c_ulong,
                               arg9: ::libc::c_ulong) -> Window;
    pub fn XGetSelectionOwner(arg1: *mut Display, arg2: Atom) -> Window;
    pub fn XCreateWindow(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_int, arg4: ::libc::c_int,
                         arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                         arg7: ::libc::c_uint, arg8: ::libc::c_int,
                         arg9: ::libc::c_uint, arg10: *mut Visual,
                         arg11: ::libc::c_ulong,
                         arg12: *mut XSetWindowAttributes) -> Window;
    pub fn XListInstalledColormaps(arg1: *mut Display, arg2: Window,
                                   arg3: *mut ::libc::c_int) -> *mut Colormap;
    pub fn XListFonts(arg1: *mut Display, arg2: *const ::libc::c_char,
                      arg3: ::libc::c_int, arg4: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListFontsWithInfo(arg1: *mut Display, arg2: *const ::libc::c_char,
                              arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                              arg5: *mut *mut XFontStruct) ->
     *mut *mut ::libc::c_char;
    pub fn XGetFontPath(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListExtensions(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut *mut ::libc::c_char;
    pub fn XListProperties(arg1: *mut Display, arg2: Window,
                           arg3: *mut ::libc::c_int) -> *mut Atom;
    pub fn XListHosts(arg1: *mut Display, arg2: *mut ::libc::c_int,
                      arg3: *mut ::libc::c_int) -> *mut XHostAddress;
    pub fn XKeycodeToKeysym(arg1: *mut Display, arg2: KeyCode,
                            arg3: ::libc::c_int) -> KeySym;
    pub fn XLookupKeysym(arg1: *mut XKeyEvent, arg2: ::libc::c_int) -> KeySym;
    pub fn XGetKeyboardMapping(arg1: *mut Display, arg2: KeyCode,
                               arg3: ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut KeySym;
    pub fn XStringToKeysym(arg1: *const ::libc::c_char) -> KeySym;
    pub fn XMaxRequestSize(arg1: *mut Display) -> ::libc::c_long;
    pub fn XExtendedMaxRequestSize(arg1: *mut Display) -> ::libc::c_long;
    pub fn XResourceManagerString(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XScreenResourceString(arg1: *mut Screen) -> *mut ::libc::c_char;
    pub fn XDisplayMotionBufferSize(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XVisualIDFromVisual(arg1: *mut Visual) -> VisualID;
    pub fn XInitThreads() -> ::libc::c_int;
    pub fn XLockDisplay(arg1: *mut Display);
    pub fn XUnlockDisplay(arg1: *mut Display);
    pub fn XInitExtension(arg1: *mut Display, arg2: *const ::libc::c_char) ->
     *mut XExtCodes;
    pub fn XAddExtension(arg1: *mut Display) -> *mut XExtCodes;
    pub fn XFindOnExtensionList(arg1: *mut *mut XExtData, arg2: ::libc::c_int)
     -> *mut XExtData;
    pub fn XEHeadOfExtensionList(arg1: XEDataObject) -> *mut *mut XExtData;
    pub fn XRootWindow(arg1: *mut Display, arg2: ::libc::c_int) -> Window;
    pub fn XDefaultRootWindow(arg1: *mut Display) -> Window;
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
    pub fn XDefaultVisual(arg1: *mut Display, arg2: ::libc::c_int) ->
     *mut Visual;
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
    pub fn XDefaultGC(arg1: *mut Display, arg2: ::libc::c_int) -> GC;
    pub fn XDefaultGCOfScreen(arg1: *mut Screen) -> GC;
    pub fn XBlackPixel(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_ulong;
    pub fn XWhitePixel(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_ulong;
    pub fn XAllPlanes() -> ::libc::c_ulong;
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::libc::c_ulong;
    pub fn XWhitePixelOfScreen(arg1: *mut Screen) -> ::libc::c_ulong;
    pub fn XNextRequest(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XLastKnownRequestProcessed(arg1: *mut Display) -> ::libc::c_ulong;
    pub fn XServerVendor(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XDisplayString(arg1: *mut Display) -> *mut ::libc::c_char;
    pub fn XDefaultColormap(arg1: *mut Display, arg2: ::libc::c_int) ->
     Colormap;
    pub fn XDefaultColormapOfScreen(arg1: *mut Screen) -> Colormap;
    pub fn XDisplayOfScreen(arg1: *mut Screen) -> *mut Display;
    pub fn XScreenOfDisplay(arg1: *mut Display, arg2: ::libc::c_int) ->
     *mut Screen;
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
    pub fn XEventMaskOfScreen(arg1: *mut Screen) -> ::libc::c_long;
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XSetErrorHandler(arg1: XErrorHandler) -> XErrorHandler;
    pub fn XSetIOErrorHandler(arg1: XIOErrorHandler) -> XIOErrorHandler;
    pub fn XListPixmapFormats(arg1: *mut Display, arg2: *mut ::libc::c_int) ->
     *mut XPixmapFormatValues;
    pub fn XListDepths(arg1: *mut Display, arg2: ::libc::c_int,
                       arg3: *mut ::libc::c_int) -> *mut ::libc::c_int;
    pub fn XReconfigureWMWindow(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_int, arg4: ::libc::c_uint,
                                arg5: *mut XWindowChanges) -> ::libc::c_int;
    pub fn XGetWMProtocols(arg1: *mut Display, arg2: Window,
                           arg3: *mut *mut Atom, arg4: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetWMProtocols(arg1: *mut Display, arg2: Window, arg3: *mut Atom,
                           arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XIconifyWindow(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XWithdrawWindow(arg1: *mut Display, arg2: Window,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut *mut ::libc::c_char,
                       arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut *mut Window,
                                 arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XSetWMColormapWindows(arg1: *mut Display, arg2: Window,
                                 arg3: *mut Window, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFreeStringList(arg1: *mut *mut ::libc::c_char);
    pub fn XSetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: Window) -> ::libc::c_int;
    pub fn XActivateScreenSaver(arg1: *mut Display) -> ::libc::c_int;
    pub fn XAddHost(arg1: *mut Display, arg2: *mut XHostAddress) ->
     ::libc::c_int;
    pub fn XAddHosts(arg1: *mut Display, arg2: *mut XHostAddress,
                     arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XAddToExtensionList(arg1: *mut *mut Struct__XExtData,
                               arg2: *mut XExtData) -> ::libc::c_int;
    pub fn XAddToSaveSet(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XAllocColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XAllocColorCells(arg1: *mut Display, arg2: Colormap,
                            arg3: ::libc::c_int, arg4: *mut ::libc::c_ulong,
                            arg5: ::libc::c_uint, arg6: *mut ::libc::c_ulong,
                            arg7: ::libc::c_uint) -> ::libc::c_int;
    pub fn XAllocColorPlanes(arg1: *mut Display, arg2: Colormap,
                             arg3: ::libc::c_int, arg4: *mut ::libc::c_ulong,
                             arg5: ::libc::c_int, arg6: ::libc::c_int,
                             arg7: ::libc::c_int, arg8: ::libc::c_int,
                             arg9: *mut ::libc::c_ulong,
                             arg10: *mut ::libc::c_ulong,
                             arg11: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn XAllocNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *const ::libc::c_char, arg4: *mut XColor,
                            arg5: *mut XColor) -> ::libc::c_int;
    pub fn XAllowEvents(arg1: *mut Display, arg2: ::libc::c_int, arg3: Time)
     -> ::libc::c_int;
    pub fn XAutoRepeatOff(arg1: *mut Display) -> ::libc::c_int;
    pub fn XAutoRepeatOn(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBell(arg1: *mut Display, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn XBitmapBitOrder(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBitmapPad(arg1: *mut Display) -> ::libc::c_int;
    pub fn XBitmapUnit(arg1: *mut Display) -> ::libc::c_int;
    pub fn XCellsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XChangeActivePointerGrab(arg1: *mut Display, arg2: ::libc::c_uint,
                                    arg3: Cursor, arg4: Time) ->
     ::libc::c_int;
    pub fn XChangeGC(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                     arg4: *mut XGCValues) -> ::libc::c_int;
    pub fn XChangeKeyboardControl(arg1: *mut Display, arg2: ::libc::c_ulong,
                                  arg3: *mut XKeyboardControl) ->
     ::libc::c_int;
    pub fn XChangeKeyboardMapping(arg1: *mut Display, arg2: ::libc::c_int,
                                  arg3: ::libc::c_int, arg4: *mut KeySym,
                                  arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangePointerControl(arg1: *mut Display, arg2: ::libc::c_int,
                                 arg3: ::libc::c_int, arg4: ::libc::c_int,
                                 arg5: ::libc::c_int, arg6: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XChangeProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                           arg4: Atom, arg5: ::libc::c_int,
                           arg6: ::libc::c_int, arg7: *const ::libc::c_uchar,
                           arg8: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangeSaveSet(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XChangeWindowAttributes(arg1: *mut Display, arg2: Window,
                                   arg3: ::libc::c_ulong,
                                   arg4: *mut XSetWindowAttributes) ->
     ::libc::c_int;
    pub fn XCheckIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                         arg3:
                             ::std::option::Option<extern "C" fn
                                                       (arg1: *mut Display,
                                                        arg2: *mut XEvent,
                                                        arg3: XPointer)
                                                       -> ::libc::c_int>,
                         arg4: XPointer) -> ::libc::c_int;
    pub fn XCheckMaskEvent(arg1: *mut Display, arg2: ::libc::c_long,
                           arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XCheckTypedEvent(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XCheckTypedWindowEvent(arg1: *mut Display, arg2: Window,
                                  arg3: ::libc::c_int, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XCheckWindowEvent(arg1: *mut Display, arg2: Window,
                             arg3: ::libc::c_long, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XCirculateSubwindows(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XCirculateSubwindowsDown(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XCirculateSubwindowsUp(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XClearArea(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                      arg4: ::libc::c_int, arg5: ::libc::c_uint,
                      arg6: ::libc::c_uint, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XCloseDisplay(arg1: *mut Display) -> ::libc::c_int;
    pub fn XConfigureWindow(arg1: *mut Display, arg2: Window,
                            arg3: ::libc::c_uint, arg4: *mut XWindowChanges)
     -> ::libc::c_int;
    pub fn XConnectionNumber(arg1: *mut Display) -> ::libc::c_int;
    pub fn XConvertSelection(arg1: *mut Display, arg2: Atom, arg3: Atom,
                             arg4: Atom, arg5: Window, arg6: Time) ->
     ::libc::c_int;
    pub fn XCopyArea(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                     arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                     arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                     arg9: ::libc::c_int, arg10: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XCopyGC(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                   arg4: GC) -> ::libc::c_int;
    pub fn XCopyPlane(arg1: *mut Display, arg2: Drawable, arg3: Drawable,
                      arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                      arg7: ::libc::c_uint, arg8: ::libc::c_uint,
                      arg9: ::libc::c_int, arg10: ::libc::c_int,
                      arg11: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XDefaultDepth(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDefaultScreen(arg1: *mut Display) -> ::libc::c_int;
    pub fn XDefineCursor(arg1: *mut Display, arg2: Window, arg3: Cursor) ->
     ::libc::c_int;
    pub fn XDeleteProperty(arg1: *mut Display, arg2: Window, arg3: Atom) ->
     ::libc::c_int;
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XDestroySubwindows(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XDoesBackingStore(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDoesSaveUnders(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XDisableAccessControl(arg1: *mut Display) -> ::libc::c_int;
    pub fn XDisplayCells(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayHeight(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayHeightMM(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayKeycodes(arg1: *mut Display, arg2: *mut ::libc::c_int,
                            arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XDisplayPlanes(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayWidth(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDisplayWidthMM(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawArc(arg1: *mut Display, arg2: Drawable, arg3: GC,
                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                    arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                    arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawImageString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                            arg4: ::libc::c_int, arg5: ::libc::c_int,
                            arg6: *const ::libc::c_char, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn XDrawImageString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                              arg4: ::libc::c_int, arg5: ::libc::c_int,
                              arg6: *const XChar2b, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawLine(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: ::libc::c_int, arg5: ::libc::c_int,
                     arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawLines(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: *mut XPoint, arg5: ::libc::c_int,
                      arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawPoint(arg1: *mut Display, arg2: Drawable, arg3: GC,
                      arg4: ::libc::c_int, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawPoints(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: *mut XPoint, arg5: ::libc::c_int,
                       arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XDrawRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: ::libc::c_int, arg5: ::libc::c_int,
                          arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XDrawRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawSegments(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: *mut XSegment, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawString(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *const ::libc::c_char, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawString16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: ::libc::c_int, arg5: ::libc::c_int,
                         arg6: *const XChar2b, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: ::libc::c_int, arg5: ::libc::c_int,
                     arg6: *mut XTextItem, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XDrawText16(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XTextItem16, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XEnableAccessControl(arg1: *mut Display) -> ::libc::c_int;
    pub fn XEventsQueued(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFetchName(arg1: *mut Display, arg2: Window,
                      arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFillArc(arg1: *mut Display, arg2: Drawable, arg3: GC,
                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                    arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                    arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFillArcs(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XArc, arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XFillPolygon(arg1: *mut Display, arg2: Drawable, arg3: GC,
                        arg4: *mut XPoint, arg5: ::libc::c_int,
                        arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFillRectangle(arg1: *mut Display, arg2: Drawable, arg3: GC,
                          arg4: ::libc::c_int, arg5: ::libc::c_int,
                          arg6: ::libc::c_uint, arg7: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XFillRectangles(arg1: *mut Display, arg2: Drawable, arg3: GC,
                           arg4: *mut XRectangle, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFlush(arg1: *mut Display) -> ::libc::c_int;
    pub fn XForceScreenSaver(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFree(arg1: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn XFreeColormap(arg1: *mut Display, arg2: Colormap) -> ::libc::c_int;
    pub fn XFreeColors(arg1: *mut Display, arg2: Colormap,
                       arg3: *mut ::libc::c_ulong, arg4: ::libc::c_int,
                       arg5: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XFreeCursor(arg1: *mut Display, arg2: Cursor) -> ::libc::c_int;
    pub fn XFreeExtensionList(arg1: *mut *mut ::libc::c_char) ->
     ::libc::c_int;
    pub fn XFreeFont(arg1: *mut Display, arg2: *mut XFontStruct) ->
     ::libc::c_int;
    pub fn XFreeFontInfo(arg1: *mut *mut ::libc::c_char,
                         arg2: *mut XFontStruct, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XFreeFontNames(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFreeFontPath(arg1: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::libc::c_int;
    pub fn XFreeModifiermap(arg1: *mut XModifierKeymap) -> ::libc::c_int;
    pub fn XFreePixmap(arg1: *mut Display, arg2: Pixmap) -> ::libc::c_int;
    pub fn XGeometry(arg1: *mut Display, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                     arg5: ::libc::c_uint, arg6: ::libc::c_uint,
                     arg7: ::libc::c_uint, arg8: ::libc::c_int,
                     arg9: ::libc::c_int, arg10: *mut ::libc::c_int,
                     arg11: *mut ::libc::c_int, arg12: *mut ::libc::c_int,
                     arg13: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetErrorDatabaseText(arg1: *mut Display,
                                 arg2: *const ::libc::c_char,
                                 arg3: *const ::libc::c_char,
                                 arg4: *const ::libc::c_char,
                                 arg5: *mut ::libc::c_char,
                                 arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetErrorText(arg1: *mut Display, arg2: ::libc::c_int,
                         arg3: *mut ::libc::c_char, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XGetFontProperty(arg1: *mut XFontStruct, arg2: Atom,
                            arg3: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn XGetGCValues(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                        arg4: *mut XGCValues) -> ::libc::c_int;
    pub fn XGetGeometry(arg1: *mut Display, arg2: Drawable, arg3: *mut Window,
                        arg4: *mut ::libc::c_int, arg5: *mut ::libc::c_int,
                        arg6: *mut ::libc::c_uint, arg7: *mut ::libc::c_uint,
                        arg8: *mut ::libc::c_uint, arg9: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn XGetIconName(arg1: *mut Display, arg2: Window,
                        arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn XGetInputFocus(arg1: *mut Display, arg2: *mut Window,
                          arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetKeyboardControl(arg1: *mut Display, arg2: *mut XKeyboardState)
     -> ::libc::c_int;
    pub fn XGetPointerControl(arg1: *mut Display, arg2: *mut ::libc::c_int,
                              arg3: *mut ::libc::c_int,
                              arg4: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetPointerMapping(arg1: *mut Display, arg2: *mut ::libc::c_uchar,
                              arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XGetScreenSaver(arg1: *mut Display, arg2: *mut ::libc::c_int,
                           arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int,
                           arg5: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XGetTransientForHint(arg1: *mut Display, arg2: Window,
                                arg3: *mut Window) -> ::libc::c_int;
    pub fn XGetWindowProperty(arg1: *mut Display, arg2: Window, arg3: Atom,
                              arg4: ::libc::c_long, arg5: ::libc::c_long,
                              arg6: ::libc::c_int, arg7: Atom,
                              arg8: *mut Atom, arg9: *mut ::libc::c_int,
                              arg10: *mut ::libc::c_ulong,
                              arg11: *mut ::libc::c_ulong,
                              arg12: *mut *mut ::libc::c_uchar) ->
     ::libc::c_int;
    pub fn XGetWindowAttributes(arg1: *mut Display, arg2: Window,
                                arg3: *mut XWindowAttributes) ->
     ::libc::c_int;
    pub fn XGrabButton(arg1: *mut Display, arg2: ::libc::c_uint,
                       arg3: ::libc::c_uint, arg4: Window,
                       arg5: ::libc::c_int, arg6: ::libc::c_uint,
                       arg7: ::libc::c_int, arg8: ::libc::c_int, arg9: Window,
                       arg10: Cursor) -> ::libc::c_int;
    pub fn XGrabKey(arg1: *mut Display, arg2: ::libc::c_int,
                    arg3: ::libc::c_uint, arg4: Window, arg5: ::libc::c_int,
                    arg6: ::libc::c_int, arg7: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XGrabKeyboard(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_int, arg4: ::libc::c_int,
                         arg5: ::libc::c_int, arg6: Time) -> ::libc::c_int;
    pub fn XGrabPointer(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                        arg4: ::libc::c_uint, arg5: ::libc::c_int,
                        arg6: ::libc::c_int, arg7: Window, arg8: Cursor,
                        arg9: Time) -> ::libc::c_int;
    pub fn XGrabServer(arg1: *mut Display) -> ::libc::c_int;
    pub fn XHeightMMOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XHeightOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                    arg3:
                        ::std::option::Option<extern "C" fn
                                                  (arg1: *mut Display,
                                                   arg2: *mut XEvent,
                                                   arg3: XPointer)
                                                  -> ::libc::c_int>,
                    arg4: XPointer) -> ::libc::c_int;
    pub fn XImageByteOrder(arg1: *mut Display) -> ::libc::c_int;
    pub fn XInstallColormap(arg1: *mut Display, arg2: Colormap) ->
     ::libc::c_int;
    pub fn XKeysymToKeycode(arg1: *mut Display, arg2: KeySym) -> KeyCode;
    pub fn XKillClient(arg1: *mut Display, arg2: XID) -> ::libc::c_int;
    pub fn XLookupColor(arg1: *mut Display, arg2: Colormap,
                        arg3: *const ::libc::c_char, arg4: *mut XColor,
                        arg5: *mut XColor) -> ::libc::c_int;
    pub fn XLowerWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapSubwindows(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMapWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XMaskEvent(arg1: *mut Display, arg2: ::libc::c_long,
                      arg3: *mut XEvent) -> ::libc::c_int;
    pub fn XMaxCmapsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XMinCmapsOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XMoveResizeWindow(arg1: *mut Display, arg2: Window,
                             arg3: ::libc::c_int, arg4: ::libc::c_int,
                             arg5: ::libc::c_uint, arg6: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XMoveWindow(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                       arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::libc::c_int;
    pub fn XNoOp(arg1: *mut Display) -> ::libc::c_int;
    pub fn XParseColor(arg1: *mut Display, arg2: Colormap,
                       arg3: *const ::libc::c_char, arg4: *mut XColor) ->
     ::libc::c_int;
    pub fn XParseGeometry(arg1: *const ::libc::c_char,
                          arg2: *mut ::libc::c_int, arg3: *mut ::libc::c_int,
                          arg4: *mut ::libc::c_uint,
                          arg5: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XPeekEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::libc::c_int;
    pub fn XPeekIfEvent(arg1: *mut Display, arg2: *mut XEvent,
                        arg3:
                            ::std::option::Option<extern "C" fn
                                                      (arg1: *mut Display,
                                                       arg2: *mut XEvent,
                                                       arg3: XPointer)
                                                      -> ::libc::c_int>,
                        arg4: XPointer) -> ::libc::c_int;
    pub fn XPending(arg1: *mut Display) -> ::libc::c_int;
    pub fn XPlanesOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XProtocolRevision(arg1: *mut Display) -> ::libc::c_int;
    pub fn XProtocolVersion(arg1: *mut Display) -> ::libc::c_int;
    pub fn XPutBackEvent(arg1: *mut Display, arg2: *mut XEvent) ->
     ::libc::c_int;
    pub fn XPutImage(arg1: *mut Display, arg2: Drawable, arg3: GC,
                     arg4: *mut XImage, arg5: ::libc::c_int,
                     arg6: ::libc::c_int, arg7: ::libc::c_int,
                     arg8: ::libc::c_int, arg9: ::libc::c_uint,
                     arg10: ::libc::c_uint) -> ::libc::c_int;
    pub fn XQLength(arg1: *mut Display) -> ::libc::c_int;
    pub fn XQueryBestCursor(arg1: *mut Display, arg2: Drawable,
                            arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                            arg5: *mut ::libc::c_uint,
                            arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestSize(arg1: *mut Display, arg2: ::libc::c_int,
                          arg3: Drawable, arg4: ::libc::c_uint,
                          arg5: ::libc::c_uint, arg6: *mut ::libc::c_uint,
                          arg7: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestStipple(arg1: *mut Display, arg2: Drawable,
                             arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryBestTile(arg1: *mut Display, arg2: Drawable,
                          arg3: ::libc::c_uint, arg4: ::libc::c_uint,
                          arg5: *mut ::libc::c_uint,
                          arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XQueryColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XQueryColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XQueryExtension(arg1: *mut Display, arg2: *const ::libc::c_char,
                           arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int,
                           arg5: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XQueryKeymap(arg1: *mut Display, arg2: [::libc::c_char, ..32u]) ->
     ::libc::c_int;
    pub fn XQueryPointer(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                         arg4: *mut Window, arg5: *mut ::libc::c_int,
                         arg6: *mut ::libc::c_int, arg7: *mut ::libc::c_int,
                         arg8: *mut ::libc::c_int, arg9: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn XQueryTextExtents(arg1: *mut Display, arg2: XID,
                             arg3: *const ::libc::c_char, arg4: ::libc::c_int,
                             arg5: *mut ::libc::c_int,
                             arg6: *mut ::libc::c_int,
                             arg7: *mut ::libc::c_int, arg8: *mut XCharStruct)
     -> ::libc::c_int;
    pub fn XQueryTextExtents16(arg1: *mut Display, arg2: XID,
                               arg3: *const XChar2b, arg4: ::libc::c_int,
                               arg5: *mut ::libc::c_int,
                               arg6: *mut ::libc::c_int,
                               arg7: *mut ::libc::c_int,
                               arg8: *mut XCharStruct) -> ::libc::c_int;
    pub fn XQueryTree(arg1: *mut Display, arg2: Window, arg3: *mut Window,
                      arg4: *mut Window, arg5: *mut *mut Window,
                      arg6: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn XRaiseWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XReadBitmapFile(arg1: *mut Display, arg2: Drawable,
                           arg3: *const ::libc::c_char,
                           arg4: *mut ::libc::c_uint,
                           arg5: *mut ::libc::c_uint, arg6: *mut Pixmap,
                           arg7: *mut ::libc::c_int, arg8: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn XReadBitmapFileData(arg1: *const ::libc::c_char,
                               arg2: *mut ::libc::c_uint,
                               arg3: *mut ::libc::c_uint,
                               arg4: *mut *mut ::libc::c_uchar,
                               arg5: *mut ::libc::c_int,
                               arg6: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn XRebindKeysym(arg1: *mut Display, arg2: KeySym, arg3: *mut KeySym,
                         arg4: ::libc::c_int, arg5: *const ::libc::c_uchar,
                         arg6: ::libc::c_int) -> ::libc::c_int;
    pub fn XRecolorCursor(arg1: *mut Display, arg2: Cursor, arg3: *mut XColor,
                          arg4: *mut XColor) -> ::libc::c_int;
    pub fn XRefreshKeyboardMapping(arg1: *mut XMappingEvent) -> ::libc::c_int;
    pub fn XRemoveFromSaveSet(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XRemoveHost(arg1: *mut Display, arg2: *mut XHostAddress) ->
     ::libc::c_int;
    pub fn XRemoveHosts(arg1: *mut Display, arg2: *mut XHostAddress,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XReparentWindow(arg1: *mut Display, arg2: Window, arg3: Window,
                           arg4: ::libc::c_int, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XResetScreenSaver(arg1: *mut Display) -> ::libc::c_int;
    pub fn XResizeWindow(arg1: *mut Display, arg2: Window,
                         arg3: ::libc::c_uint, arg4: ::libc::c_uint) ->
     ::libc::c_int;
    pub fn XRestackWindows(arg1: *mut Display, arg2: *mut Window,
                           arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XRotateBuffers(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XRotateWindowProperties(arg1: *mut Display, arg2: Window,
                                   arg3: *mut Atom, arg4: ::libc::c_int,
                                   arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XScreenCount(arg1: *mut Display) -> ::libc::c_int;
    pub fn XSelectInput(arg1: *mut Display, arg2: Window,
                        arg3: ::libc::c_long) -> ::libc::c_int;
    pub fn XSendEvent(arg1: *mut Display, arg2: Window, arg3: ::libc::c_int,
                      arg4: ::libc::c_long, arg5: *mut XEvent) ->
     ::libc::c_int;
    pub fn XSetAccessControl(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetArcMode(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetBackground(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetClipMask(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetClipOrigin(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                          arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetClipRectangles(arg1: *mut Display, arg2: GC,
                              arg3: ::libc::c_int, arg4: ::libc::c_int,
                              arg5: *mut XRectangle, arg6: ::libc::c_int,
                              arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetCloseDownMode(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetCommand(arg1: *mut Display, arg2: Window,
                       arg3: *mut *mut ::libc::c_char, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetDashes(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                      arg4: *const ::libc::c_char, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFillRule(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFillStyle(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetFont(arg1: *mut Display, arg2: GC, arg3: Font) ->
     ::libc::c_int;
    pub fn XSetFontPath(arg1: *mut Display, arg2: *mut *mut ::libc::c_char,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetForeground(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetFunction(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetGraphicsExposures(arg1: *mut Display, arg2: GC,
                                 arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetIconName(arg1: *mut Display, arg2: Window,
                        arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XSetInputFocus(arg1: *mut Display, arg2: Window,
                          arg3: ::libc::c_int, arg4: Time) -> ::libc::c_int;
    pub fn XSetLineAttributes(arg1: *mut Display, arg2: GC,
                              arg3: ::libc::c_uint, arg4: ::libc::c_int,
                              arg5: ::libc::c_int, arg6: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetModifierMapping(arg1: *mut Display, arg2: *mut XModifierKeymap)
     -> ::libc::c_int;
    pub fn XSetPlaneMask(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn XSetPointerMapping(arg1: *mut Display,
                              arg2: *const ::libc::c_uchar,
                              arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetScreenSaver(arg1: *mut Display, arg2: ::libc::c_int,
                           arg3: ::libc::c_int, arg4: ::libc::c_int,
                           arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetSelectionOwner(arg1: *mut Display, arg2: Atom, arg3: Window,
                              arg4: Time) -> ::libc::c_int;
    pub fn XSetState(arg1: *mut Display, arg2: GC, arg3: ::libc::c_ulong,
                     arg4: ::libc::c_ulong, arg5: ::libc::c_int,
                     arg6: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetStipple(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetSubwindowMode(arg1: *mut Display, arg2: GC,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetTSOrigin(arg1: *mut Display, arg2: GC, arg3: ::libc::c_int,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XSetTile(arg1: *mut Display, arg2: GC, arg3: Pixmap) ->
     ::libc::c_int;
    pub fn XSetWindowBackground(arg1: *mut Display, arg2: Window,
                                arg3: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetWindowBackgroundPixmap(arg1: *mut Display, arg2: Window,
                                      arg3: Pixmap) -> ::libc::c_int;
    pub fn XSetWindowBorder(arg1: *mut Display, arg2: Window,
                            arg3: ::libc::c_ulong) -> ::libc::c_int;
    pub fn XSetWindowBorderPixmap(arg1: *mut Display, arg2: Window,
                                  arg3: Pixmap) -> ::libc::c_int;
    pub fn XSetWindowBorderWidth(arg1: *mut Display, arg2: Window,
                                 arg3: ::libc::c_uint) -> ::libc::c_int;
    pub fn XSetWindowColormap(arg1: *mut Display, arg2: Window,
                              arg3: Colormap) -> ::libc::c_int;
    pub fn XStoreBuffer(arg1: *mut Display, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XStoreBytes(arg1: *mut Display, arg2: *const ::libc::c_char,
                       arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XStoreColor(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor)
     -> ::libc::c_int;
    pub fn XStoreColors(arg1: *mut Display, arg2: Colormap, arg3: *mut XColor,
                        arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn XStoreName(arg1: *mut Display, arg2: Window,
                      arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XStoreNamedColor(arg1: *mut Display, arg2: Colormap,
                            arg3: *const ::libc::c_char,
                            arg4: ::libc::c_ulong, arg5: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSync(arg1: *mut Display, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn XTextExtents(arg1: *mut XFontStruct, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                        arg5: *mut ::libc::c_int, arg6: *mut ::libc::c_int,
                        arg7: *mut XCharStruct) -> ::libc::c_int;
    pub fn XTextExtents16(arg1: *mut XFontStruct, arg2: *const XChar2b,
                          arg3: ::libc::c_int, arg4: *mut ::libc::c_int,
                          arg5: *mut ::libc::c_int, arg6: *mut ::libc::c_int,
                          arg7: *mut XCharStruct) -> ::libc::c_int;
    pub fn XTextWidth(arg1: *mut XFontStruct, arg2: *const ::libc::c_char,
                      arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XTextWidth16(arg1: *mut XFontStruct, arg2: *const XChar2b,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XTranslateCoordinates(arg1: *mut Display, arg2: Window,
                                 arg3: Window, arg4: ::libc::c_int,
                                 arg5: ::libc::c_int,
                                 arg6: *mut ::libc::c_int,
                                 arg7: *mut ::libc::c_int, arg8: *mut Window)
     -> ::libc::c_int;
    pub fn XUndefineCursor(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XUngrabButton(arg1: *mut Display, arg2: ::libc::c_uint,
                         arg3: ::libc::c_uint, arg4: Window) -> ::libc::c_int;
    pub fn XUngrabKey(arg1: *mut Display, arg2: ::libc::c_int,
                      arg3: ::libc::c_uint, arg4: Window) -> ::libc::c_int;
    pub fn XUngrabKeyboard(arg1: *mut Display, arg2: Time) -> ::libc::c_int;
    pub fn XUngrabPointer(arg1: *mut Display, arg2: Time) -> ::libc::c_int;
    pub fn XUngrabServer(arg1: *mut Display) -> ::libc::c_int;
    pub fn XUninstallColormap(arg1: *mut Display, arg2: Colormap) ->
     ::libc::c_int;
    pub fn XUnloadFont(arg1: *mut Display, arg2: Font) -> ::libc::c_int;
    pub fn XUnmapSubwindows(arg1: *mut Display, arg2: Window) ->
     ::libc::c_int;
    pub fn XUnmapWindow(arg1: *mut Display, arg2: Window) -> ::libc::c_int;
    pub fn XVendorRelease(arg1: *mut Display) -> ::libc::c_int;
    pub fn XWarpPointer(arg1: *mut Display, arg2: Window, arg3: Window,
                        arg4: ::libc::c_int, arg5: ::libc::c_int,
                        arg6: ::libc::c_uint, arg7: ::libc::c_uint,
                        arg8: ::libc::c_int, arg9: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XWidthMMOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XWidthOfScreen(arg1: *mut Screen) -> ::libc::c_int;
    pub fn XWindowEvent(arg1: *mut Display, arg2: Window,
                        arg3: ::libc::c_long, arg4: *mut XEvent) ->
     ::libc::c_int;
    pub fn XWriteBitmapFile(arg1: *mut Display, arg2: *const ::libc::c_char,
                            arg3: Pixmap, arg4: ::libc::c_uint,
                            arg5: ::libc::c_uint, arg6: ::libc::c_int,
                            arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn XSupportsLocale() -> ::libc::c_int;
    pub fn XSetLocaleModifiers(arg1: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn XOpenOM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> XOM;
    pub fn XCloseOM(arg1: XOM) -> ::libc::c_int;
    pub fn XSetOMValues(arg1: XOM, ...) -> *mut ::libc::c_char;
    pub fn XGetOMValues(arg1: XOM, ...) -> *mut ::libc::c_char;
    pub fn XDisplayOfOM(arg1: XOM) -> *mut Display;
    pub fn XLocaleOfOM(arg1: XOM) -> *mut ::libc::c_char;
    pub fn XCreateOC(arg1: XOM, ...) -> XOC;
    pub fn XDestroyOC(arg1: XOC);
    pub fn XOMOfOC(arg1: XOC) -> XOM;
    pub fn XSetOCValues(arg1: XOC, ...) -> *mut ::libc::c_char;
    pub fn XGetOCValues(arg1: XOC, ...) -> *mut ::libc::c_char;
    pub fn XCreateFontSet(arg1: *mut Display, arg2: *const ::libc::c_char,
                          arg3: *mut *mut *mut ::libc::c_char,
                          arg4: *mut ::libc::c_int,
                          arg5: *mut *mut ::libc::c_char) -> XFontSet;
    pub fn XFreeFontSet(arg1: *mut Display, arg2: XFontSet);
    pub fn XFontsOfFontSet(arg1: XFontSet, arg2: *mut *mut *mut XFontStruct,
                           arg3: *mut *mut *mut ::libc::c_char) ->
     ::libc::c_int;
    pub fn XBaseFontNameListOfFontSet(arg1: XFontSet) -> *mut ::libc::c_char;
    pub fn XLocaleOfFontSet(arg1: XFontSet) -> *mut ::libc::c_char;
    pub fn XContextDependentDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XDirectionalDependentDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XContextualDrawing(arg1: XFontSet) -> ::libc::c_int;
    pub fn XExtentsOfFontSet(arg1: XFontSet) -> *mut XFontSetExtents;
    pub fn XmbTextEscapement(arg1: XFontSet, arg2: *const ::libc::c_char,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XwcTextEscapement(arg1: XFontSet, arg2: *const wchar_t,
                             arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn Xutf8TextEscapement(arg1: XFontSet, arg2: *const ::libc::c_char,
                               arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XmbTextExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                          arg3: ::libc::c_int, arg4: *mut XRectangle,
                          arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn XwcTextExtents(arg1: XFontSet, arg2: *const wchar_t,
                          arg3: ::libc::c_int, arg4: *mut XRectangle,
                          arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn Xutf8TextExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                            arg3: ::libc::c_int, arg4: *mut XRectangle,
                            arg5: *mut XRectangle) -> ::libc::c_int;
    pub fn XmbTextPerCharExtents(arg1: XFontSet, arg2: *const ::libc::c_char,
                                 arg3: ::libc::c_int, arg4: *mut XRectangle,
                                 arg5: *mut XRectangle, arg6: ::libc::c_int,
                                 arg7: *mut ::libc::c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> ::libc::c_int;
    pub fn XwcTextPerCharExtents(arg1: XFontSet, arg2: *const wchar_t,
                                 arg3: ::libc::c_int, arg4: *mut XRectangle,
                                 arg5: *mut XRectangle, arg6: ::libc::c_int,
                                 arg7: *mut ::libc::c_int,
                                 arg8: *mut XRectangle, arg9: *mut XRectangle)
     -> ::libc::c_int;
    pub fn Xutf8TextPerCharExtents(arg1: XFontSet,
                                   arg2: *const ::libc::c_char,
                                   arg3: ::libc::c_int, arg4: *mut XRectangle,
                                   arg5: *mut XRectangle, arg6: ::libc::c_int,
                                   arg7: *mut ::libc::c_int,
                                   arg8: *mut XRectangle,
                                   arg9: *mut XRectangle) -> ::libc::c_int;
    pub fn XmbDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XmbTextItem, arg7: ::libc::c_int);
    pub fn XwcDrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                       arg4: ::libc::c_int, arg5: ::libc::c_int,
                       arg6: *mut XwcTextItem, arg7: ::libc::c_int);
    pub fn Xutf8DrawText(arg1: *mut Display, arg2: Drawable, arg3: GC,
                         arg4: ::libc::c_int, arg5: ::libc::c_int,
                         arg6: *mut XmbTextItem, arg7: ::libc::c_int);
    pub fn XmbDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                         arg7: *const ::libc::c_char, arg8: ::libc::c_int);
    pub fn XwcDrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                         arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                         arg7: *const wchar_t, arg8: ::libc::c_int);
    pub fn Xutf8DrawString(arg1: *mut Display, arg2: Drawable, arg3: XFontSet,
                           arg4: GC, arg5: ::libc::c_int, arg6: ::libc::c_int,
                           arg7: *const ::libc::c_char, arg8: ::libc::c_int);
    pub fn XmbDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                              arg6: ::libc::c_int,
                              arg7: *const ::libc::c_char,
                              arg8: ::libc::c_int);
    pub fn XwcDrawImageString(arg1: *mut Display, arg2: Drawable,
                              arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                              arg6: ::libc::c_int, arg7: *const wchar_t,
                              arg8: ::libc::c_int);
    pub fn Xutf8DrawImageString(arg1: *mut Display, arg2: Drawable,
                                arg3: XFontSet, arg4: GC, arg5: ::libc::c_int,
                                arg6: ::libc::c_int,
                                arg7: *const ::libc::c_char,
                                arg8: ::libc::c_int);
    pub fn XOpenIM(arg1: *mut Display, arg2: *mut Struct__XrmHashBucketRec,
                   arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char) ->
     XIM;
    pub fn XCloseIM(arg1: XIM) -> ::libc::c_int;
    pub fn XGetIMValues(arg1: XIM, ...) -> *mut ::libc::c_char;
    pub fn XSetIMValues(arg1: XIM, ...) -> *mut ::libc::c_char;
    pub fn XDisplayOfIM(arg1: XIM) -> *mut Display;
    pub fn XLocaleOfIM(arg1: XIM) -> *mut ::libc::c_char;
    pub fn XCreateIC(arg1: XIM, ...) -> XIC;
    pub fn XDestroyIC(arg1: XIC);
    pub fn XSetICFocus(arg1: XIC);
    pub fn XUnsetICFocus(arg1: XIC);
    pub fn XwcResetIC(arg1: XIC) -> *mut wchar_t;
    pub fn XmbResetIC(arg1: XIC) -> *mut ::libc::c_char;
    pub fn Xutf8ResetIC(arg1: XIC) -> *mut ::libc::c_char;
    pub fn XSetICValues(arg1: XIC, ...) -> *mut ::libc::c_char;
    pub fn XGetICValues(arg1: XIC, ...) -> *mut ::libc::c_char;
    pub fn XIMOfIC(arg1: XIC) -> XIM;
    pub fn XFilterEvent(arg1: *mut XEvent, arg2: Window) -> ::libc::c_int;
    pub fn XmbLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                           arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XwcLookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                           arg3: *mut wchar_t, arg4: ::libc::c_int,
                           arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn Xutf8LookupString(arg1: XIC, arg2: *mut XKeyPressedEvent,
                             arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                             arg5: *mut KeySym, arg6: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XVaCreateNestedList(arg1: ::libc::c_int, ...) -> XVaNestedList;
    pub fn XRegisterIMInstantiateCallback(arg1: *mut Display,
                                          arg2: *mut Struct__XrmHashBucketRec,
                                          arg3: *mut ::libc::c_char,
                                          arg4: *mut ::libc::c_char,
                                          arg5: XIDProc, arg6: XPointer) ->
     ::libc::c_int;
    pub fn XUnregisterIMInstantiateCallback(arg1: *mut Display,
                                            arg2:
                                                *mut Struct__XrmHashBucketRec,
                                            arg3: *mut ::libc::c_char,
                                            arg4: *mut ::libc::c_char,
                                            arg5: XIDProc, arg6: XPointer) ->
     ::libc::c_int;
    pub fn XInternalConnectionNumbers(arg1: *mut Display,
                                      arg2: *mut *mut ::libc::c_int,
                                      arg3: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XProcessInternalConnection(arg1: *mut Display,
                                      arg2: ::libc::c_int);
    pub fn XAddConnectionWatch(arg1: *mut Display, arg2: XConnectionWatchProc,
                               arg3: XPointer) -> ::libc::c_int;
    pub fn XRemoveConnectionWatch(arg1: *mut Display,
                                  arg2: XConnectionWatchProc, arg3: XPointer);
    pub fn XSetAuthorization(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                             arg3: *mut ::libc::c_char, arg4: ::libc::c_int);
    pub fn _Xmbtowc(arg1: *mut wchar_t, arg2: *mut ::libc::c_char,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn _Xwctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) ->
     ::libc::c_int;
    pub fn XGetEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie)
     -> ::libc::c_int;
    pub fn XFreeEventData(arg1: *mut Display, arg2: *mut XGenericEventCookie);
    pub fn __errno_location() -> *mut ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t) ->
     *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char) ->
     *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t) ->
     size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t) ->
     *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t);
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t) ->
     ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t) ->
     *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint);
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t) ->
     ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint);
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: [::libc::c_ushort, ..3u]) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: [::libc::c_ushort, ..3u]) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: [::libc::c_ushort, ..3u]) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long);
    pub fn seed48(__seed16v: [::libc::c_ushort, ..3u]) ->
     *mut ::libc::c_ushort;
    pub fn lcong48(__param: [::libc::c_ushort, ..7u]);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: [::libc::c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: [::libc::c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: [::libc::c_ushort, ..3u],
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: [::libc::c_ushort, ..3u],
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: [::libc::c_ushort, ..7u],
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t) ->
     *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void);
    pub fn cfree(__ptr: *mut ::libc::c_void);
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t) ->
     ::libc::c_int;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>) ->
     ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn
                                                 (arg1: ::libc::c_int,
                                                  arg2: *mut ::libc::c_void)>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int);
    pub fn _Exit(__status: ::libc::c_int);
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int) ->
     ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t) ->
     *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t);
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong) ->
     lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int) ->
     *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t) ->
     ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t) ->
     ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t) ->
     ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn _XGetRequest(dpy: *mut Display, _type: CARD8, len: size_t) ->
     *mut ::libc::c_void;
    pub fn _XFlushGCCache(dpy: *mut Display, gc: GC);
    pub fn _XData32(dpy: *mut Display, data: *const ::libc::c_long,
                    len: ::libc::c_uint) -> ::libc::c_int;
    pub fn _XRead32(dpy: *mut Display, data: *mut ::libc::c_long,
                    len: ::libc::c_long);
    pub fn _XDeqAsyncHandler(dpy: *mut Display, handler: *mut _XAsyncHandler);
    pub fn _XError(arg1: *mut Display, arg2: *mut xError) -> ::libc::c_int;
    pub fn _XIOError(arg1: *mut Display) -> ::libc::c_int;
    pub fn _XEatData(arg1: *mut Display, arg2: ::libc::c_ulong);
    pub fn _XEatDataWords(arg1: *mut Display, arg2: ::libc::c_ulong);
    pub fn _XAllocScratch(arg1: *mut Display, arg2: ::libc::c_ulong) ->
     *mut ::libc::c_char;
    pub fn _XAllocTemp(arg1: *mut Display, arg2: ::libc::c_ulong) ->
     *mut ::libc::c_char;
    pub fn _XFreeTemp(arg1: *mut Display, arg2: *mut ::libc::c_char,
                      arg3: ::libc::c_ulong);
    pub fn _XVIDtoVisual(arg1: *mut Display, arg2: VisualID) -> *mut Visual;
    pub fn _XSetLastRequestRead(arg1: *mut Display, arg2: *mut xGenericReply)
     -> ::libc::c_ulong;
    pub fn _XGetHostname(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn _XScreenOfWindow(arg1: *mut Display, arg2: Window) -> *mut Screen;
    pub fn _XAsyncErrorHandler(arg1: *mut Display, arg2: *mut xReply,
                               arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                               arg5: XPointer) -> ::libc::c_int;
    pub fn _XGetAsyncReply(arg1: *mut Display, arg2: *mut ::libc::c_char,
                           arg3: *mut xReply, arg4: *mut ::libc::c_char,
                           arg5: ::libc::c_int, arg6: ::libc::c_int,
                           arg7: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn _XGetAsyncData(arg1: *mut Display, arg2: *mut ::libc::c_char,
                          arg3: *mut ::libc::c_char, arg4: ::libc::c_int,
                          arg5: ::libc::c_int, arg6: ::libc::c_int,
                          arg7: ::libc::c_int);
    pub fn _XFlush(arg1: *mut Display);
    pub fn _XEventsQueued(arg1: *mut Display, arg2: ::libc::c_int) ->
     ::libc::c_int;
    pub fn _XReadEvents(arg1: *mut Display);
    pub fn _XRead(arg1: *mut Display, arg2: *mut ::libc::c_char,
                  arg3: ::libc::c_long) -> ::libc::c_int;
    pub fn _XReadPad(arg1: *mut Display, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_long);
    pub fn _XSend(arg1: *mut Display, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_long);
    pub fn _XReply(arg1: *mut Display, arg2: *mut xReply, arg3: ::libc::c_int,
                   arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn _XEnq(arg1: *mut Display, arg2: *mut xEvent);
    pub fn _XDeq(arg1: *mut Display, arg2: *mut _XQEvent,
                 arg3: *mut _XQEvent);
    pub fn _XUnknownWireEvent(arg1: *mut Display, arg2: *mut XEvent,
                              arg3: *mut xEvent) -> ::libc::c_int;
    pub fn _XUnknownWireEventCookie(arg1: *mut Display,
                                    arg2: *mut XGenericEventCookie,
                                    arg3: *mut xEvent) -> ::libc::c_int;
    pub fn _XUnknownCopyEventCookie(arg1: *mut Display,
                                    arg2: *mut XGenericEventCookie,
                                    arg3: *mut XGenericEventCookie) ->
     ::libc::c_int;
    pub fn _XUnknownNativeEvent(arg1: *mut Display, arg2: *mut XEvent,
                                arg3: *mut xEvent) -> ::libc::c_int;
    pub fn _XWireToEvent(dpy: *mut Display, re: *mut XEvent,
                         event: *mut xEvent) -> ::libc::c_int;
    pub fn _XDefaultWireError(display: *mut Display, he: *mut XErrorEvent,
                              we: *mut xError) -> ::libc::c_int;
    pub fn _XPollfdCacheInit(dpy: *mut Display) -> ::libc::c_int;
    pub fn _XPollfdCacheAdd(dpy: *mut Display, fd: ::libc::c_int);
    pub fn _XPollfdCacheDel(dpy: *mut Display, fd: ::libc::c_int);
    pub fn _XAllocID(dpy: *mut Display) -> XID;
    pub fn _XAllocIDs(dpy: *mut Display, ids: *mut XID, count: ::libc::c_int);
    pub fn _XFreeExtData(arg1: *mut XExtData) -> ::libc::c_int;
    pub fn XESetCreateGC(arg1: *mut Display, arg2: ::libc::c_int,
                         arg3:
                             ::std::option::Option<extern "C" fn
                                                       (arg1: *mut Display,
                                                        arg2: GC,
                                                        arg3: *mut XExtCodes)
                                                       -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: GC,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetCopyGC(arg1: *mut Display, arg2: ::libc::c_int,
                       arg3:
                           ::std::option::Option<extern "C" fn
                                                     (arg1: *mut Display,
                                                      arg2: GC,
                                                      arg3: *mut XExtCodes)
                                                     -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: GC,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetFlushGC(arg1: *mut Display, arg2: ::libc::c_int,
                        arg3:
                            ::std::option::Option<extern "C" fn
                                                      (arg1: *mut Display,
                                                       arg2: GC,
                                                       arg3: *mut XExtCodes)
                                                      -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: GC,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetFreeGC(arg1: *mut Display, arg2: ::libc::c_int,
                       arg3:
                           ::std::option::Option<extern "C" fn
                                                     (arg1: *mut Display,
                                                      arg2: GC,
                                                      arg3: *mut XExtCodes)
                                                     -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: GC,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetCreateFont(arg1: *mut Display, arg2: ::libc::c_int,
                           arg3:
                               ::std::option::Option<extern "C" fn
                                                         (arg1: *mut Display,
                                                          arg2:
                                                              *mut XFontStruct,
                                                          arg3:
                                                              *mut XExtCodes)
                                                         -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XFontStruct,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetFreeFont(arg1: *mut Display, arg2: ::libc::c_int,
                         arg3:
                             ::std::option::Option<extern "C" fn
                                                       (arg1: *mut Display,
                                                        arg2:
                                                            *mut XFontStruct,
                                                        arg3: *mut XExtCodes)
                                                       -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XFontStruct,
                                arg3: *mut XExtCodes) -> ::libc::c_int>;
    pub fn XESetCloseDisplay(arg1: *mut Display, arg2: ::libc::c_int,
                             arg3:
                                 ::std::option::Option<extern "C" fn
                                                           (arg1:
                                                                *mut Display,
                                                            arg2:
                                                                *mut XExtCodes)
                                                           -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XExtCodes)
                               -> ::libc::c_int>;
    pub fn XESetError(arg1: *mut Display, arg2: ::libc::c_int,
                      arg3:
                          ::std::option::Option<extern "C" fn
                                                    (arg1: *mut Display,
                                                     arg2: *mut xError,
                                                     arg3: *mut XExtCodes,
                                                     arg4: *mut ::libc::c_int)
                                                    -> ::libc::c_int>) ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut xError,
                                arg3: *mut XExtCodes,
                                arg4: *mut ::libc::c_int) -> ::libc::c_int>;
    pub fn XESetErrorString(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3:
                                ::std::option::Option<extern "C" fn
                                                          (arg1: *mut Display,
                                                           arg2:
                                                               ::libc::c_int,
                                                           arg3:
                                                               *mut XExtCodes,
                                                           arg4:
                                                               *mut ::libc::c_char,
                                                           arg5:
                                                               ::libc::c_int)
                                                          ->
                                                              *mut ::libc::c_char>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: ::libc::c_int,
                                arg3: *mut XExtCodes,
                                arg4: *mut ::libc::c_char,
                                arg5: ::libc::c_int) -> *mut ::libc::c_char>;
    pub fn XESetPrintErrorValues(arg1: *mut Display, arg2: ::libc::c_int,
                                 arg3:
                                     ::std::option::Option<extern "C" fn
                                                               (arg1:
                                                                    *mut Display,
                                                                arg2:
                                                                    *mut XErrorEvent,
                                                                arg3:
                                                                    *mut ::libc::c_void)>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XErrorEvent,
                                arg3: *mut ::libc::c_void)>;
    pub fn XESetWireToEvent(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3:
                                ::std::option::Option<extern "C" fn
                                                          (arg1: *mut Display,
                                                           arg2: *mut XEvent,
                                                           arg3: *mut xEvent)
                                                          -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XEvent,
                                arg3: *mut xEvent) -> ::libc::c_int>;
    pub fn XESetWireToEventCookie(arg1: *mut Display, arg2: ::libc::c_int,
                                  arg3:
                                      ::std::option::Option<extern "C" fn
                                                                (arg1:
                                                                     *mut Display,
                                                                 arg2:
                                                                     *mut XGenericEventCookie,
                                                                 arg3:
                                                                     *mut xEvent)
                                                                ->
                                                                    ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display,
                                arg2: *mut XGenericEventCookie,
                                arg3: *mut xEvent) -> ::libc::c_int>;
    pub fn XESetCopyEventCookie(arg1: *mut Display, arg2: ::libc::c_int,
                                arg3:
                                    ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   *mut Display,
                                                               arg2:
                                                                   *mut XGenericEventCookie,
                                                               arg3:
                                                                   *mut XGenericEventCookie)
                                                              ->
                                                                  ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display,
                                arg2: *mut XGenericEventCookie,
                                arg3: *mut XGenericEventCookie)
                               -> ::libc::c_int>;
    pub fn XESetEventToWire(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3:
                                ::std::option::Option<extern "C" fn
                                                          (arg1: *mut Display,
                                                           arg2: *mut XEvent,
                                                           arg3: *mut xEvent)
                                                          -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XEvent,
                                arg3: *mut xEvent) -> ::libc::c_int>;
    pub fn XESetWireToError(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3:
                                ::std::option::Option<extern "C" fn
                                                          (arg1: *mut Display,
                                                           arg2:
                                                               *mut XErrorEvent,
                                                           arg3: *mut xError)
                                                          -> ::libc::c_int>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XErrorEvent,
                                arg3: *mut xError) -> ::libc::c_int>;
    pub fn XESetBeforeFlush(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3:
                                ::std::option::Option<extern "C" fn
                                                          (arg1: *mut Display,
                                                           arg2:
                                                               *mut XExtCodes,
                                                           arg3:
                                                               *const ::libc::c_char,
                                                           arg4:
                                                               ::libc::c_long)>)
     ->
     ::std::option::Option<extern "C" fn
                               (arg1: *mut Display, arg2: *mut XExtCodes,
                                arg3: *const ::libc::c_char,
                                arg4: ::libc::c_long)>;
    pub fn _XRegisterInternalConnection(arg1: *mut Display,
                                        arg2: ::libc::c_int,
                                        arg3: _XInternalConnectionProc,
                                        arg4: XPointer) -> ::libc::c_int;
    pub fn _XUnregisterInternalConnection(arg1: *mut Display,
                                          arg2: ::libc::c_int);
    pub fn _XProcessInternalConnection(arg1: *mut Display,
                                       arg2: *mut Struct__XConnectionInfo);
    pub fn _XTextHeight(arg1: *mut XFontStruct, arg2: *const ::libc::c_char,
                        arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn _XTextHeight16(arg1: *mut XFontStruct, arg2: *const XChar2b,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn _XEventToWire(dpy: *mut Display, re: *mut XEvent,
                         event: *mut xEvent) -> ::libc::c_int;
    pub fn _XF86LoadQueryLocaleFont(arg1: *mut Display,
                                    arg2: *const ::libc::c_char,
                                    arg3: *mut *mut XFontStruct,
                                    arg4: *mut Font) -> ::libc::c_int;
    pub fn _XProcessWindowAttributes(dpy: *mut Display,
                                     req: *mut xChangeWindowAttributesReq,
                                     valuemask: ::libc::c_ulong,
                                     attributes: *mut XSetWindowAttributes);
    pub fn _XDefaultError(dpy: *mut Display, event: *mut XErrorEvent) ->
     ::libc::c_int;
    pub fn _XDefaultIOError(dpy: *mut Display) -> ::libc::c_int;
    pub fn _XSetClipRectangles(dpy: *mut Display, gc: GC,
                               clip_x_origin: ::libc::c_int,
                               clip_y_origin: ::libc::c_int,
                               rectangles: *mut XRectangle, n: ::libc::c_int,
                               ordering: ::libc::c_int);
    pub fn _XGetWindowAttributes(dpy: *mut Display, w: Window,
                                 attr: *mut XWindowAttributes) ->
     ::libc::c_int;
    pub fn _XPutBackEvent(dpy: *mut Display, event: *mut XEvent) ->
     ::libc::c_int;
    pub fn _XIsEventCookie(dpy: *mut Display, ev: *mut XEvent) ->
     ::libc::c_int;
    pub fn _XFreeEventCookies(dpy: *mut Display);
    pub fn _XStoreEventCookie(dpy: *mut Display, ev: *mut XEvent);
    pub fn _XFetchEventCookie(dpy: *mut Display, ev: *mut XGenericEventCookie)
     -> ::libc::c_int;
    pub fn _XCopyEventCookie(dpy: *mut Display, _in: *mut XGenericEventCookie,
                             out: *mut XGenericEventCookie) -> ::libc::c_int;
    pub fn xlocaledir(buf: *mut ::libc::c_char, buf_len: ::libc::c_int);
}
