#![allow(dead_code)]
#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
use xlib::*;
#[repr(C)]
struct Struct_Unnamed1  {
    pub flags: ::libc::c_long,
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
    pub width: ::libc::c_int,
    pub height: ::libc::c_int,
    pub min_width: ::libc::c_int,
    pub min_height: ::libc::c_int,
    pub max_width: ::libc::c_int,
    pub max_height: ::libc::c_int,
    pub width_inc: ::libc::c_int,
    pub height_inc: ::libc::c_int,
    pub min_aspect: Struct_Unnamed2,
    pub max_aspect: Struct_Unnamed2,
    pub base_width: ::libc::c_int,
    pub base_height: ::libc::c_int,
    pub win_gravity: ::libc::c_int,
}
#[repr(C)]
struct Struct_Unnamed2  {
    pub x: ::libc::c_int,
    pub y: ::libc::c_int,
}
pub type XSizeHints = Struct_Unnamed1;
#[repr(C)]
struct Struct_Unnamed3  {
    pub flags: ::libc::c_long,
    pub input: ::libc::c_int,
    pub initial_state: ::libc::c_int,
    pub icon_pixmap: Pixmap,
    pub icon_window: Window,
    pub icon_x: ::libc::c_int,
    pub icon_y: ::libc::c_int,
    pub icon_mask: Pixmap,
    pub window_group: XID,
}
pub type XWMHints = Struct_Unnamed3;
#[repr(C)]
struct Struct_Unnamed4  {
    pub value: *mut ::libc::c_uchar,
    pub encoding: Atom,
    pub format: ::libc::c_int,
    pub nitems: ::libc::c_ulong,
}
pub type XTextProperty = Struct_Unnamed4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const XStringStyle: ::libc::c_uint = 0;
pub const XCompoundTextStyle: ::libc::c_uint = 1;
pub const XTextStyle: ::libc::c_uint = 2;
pub const XStdICCTextStyle: ::libc::c_uint = 3;
pub const XUTF8StringStyle: ::libc::c_uint = 4;
pub type XICCEncodingStyle = Enum_Unnamed5;
#[repr(C)]
struct Struct_Unnamed6  {
    pub min_width: ::libc::c_int,
    pub min_height: ::libc::c_int,
    pub max_width: ::libc::c_int,
    pub max_height: ::libc::c_int,
    pub width_inc: ::libc::c_int,
    pub height_inc: ::libc::c_int,
}
pub type XIconSize = Struct_Unnamed6;
#[repr(C)]
struct Struct_Unnamed7  {
    pub res_name: *mut ::libc::c_char,
    pub res_class: *mut ::libc::c_char,
}
pub type XClassHint = Struct_Unnamed7;
#[repr(C)]
pub struct Struct__XComposeStatus {
    pub compose_ptr: XPointer,
    pub chars_matched: ::libc::c_int,
}
pub type XComposeStatus = Struct__XComposeStatus;
pub enum Struct__XRegion { }
pub type Region = *mut Struct__XRegion;
#[repr(C)]
struct Struct_Unnamed8  {
    pub visual: *mut Visual,
    pub visualid: VisualID,
    pub screen: ::libc::c_int,
    pub depth: ::libc::c_int,
    pub class: ::libc::c_int,
    pub red_mask: ::libc::c_ulong,
    pub green_mask: ::libc::c_ulong,
    pub blue_mask: ::libc::c_ulong,
    pub colormap_size: ::libc::c_int,
    pub bits_per_rgb: ::libc::c_int,
}
pub type XVisualInfo = Struct_Unnamed8;
#[repr(C)]
struct Struct_Unnamed9  {
    pub colormap: Colormap,
    pub red_max: ::libc::c_ulong,
    pub red_mult: ::libc::c_ulong,
    pub green_max: ::libc::c_ulong,
    pub green_mult: ::libc::c_ulong,
    pub blue_max: ::libc::c_ulong,
    pub blue_mult: ::libc::c_ulong,
    pub base_pixel: ::libc::c_ulong,
    pub visualid: VisualID,
    pub killid: XID,
}
pub type XStandardColormap = Struct_Unnamed9;
pub type XContext = ::libc::c_int;
#[link(name = "X11")]
extern "C" {
    pub fn XAllocClassHint() -> *mut XClassHint;
    pub fn XAllocIconSize() -> *mut XIconSize;
    pub fn XAllocSizeHints() -> *mut XSizeHints;
    pub fn XAllocStandardColormap() -> *mut XStandardColormap;
    pub fn XAllocWMHints() -> *mut XWMHints;
    pub fn XClipBox(arg1: Region, arg2: *mut XRectangle) -> ::libc::c_int;
    pub fn XCreateRegion() -> Region;
    pub fn XDefaultString() -> *const ::libc::c_char;
    pub fn XDeleteContext(arg1: *mut Display, arg2: XID, arg3: XContext) ->
     ::libc::c_int;
    pub fn XDestroyRegion(arg1: Region) -> ::libc::c_int;
    pub fn XEmptyRegion(arg1: Region) -> ::libc::c_int;
    pub fn XEqualRegion(arg1: Region, arg2: Region) -> ::libc::c_int;
    pub fn XFindContext(arg1: *mut Display, arg2: XID, arg3: XContext,
                        arg4: *mut XPointer) -> ::libc::c_int;
    pub fn XGetClassHint(arg1: *mut Display, arg2: Window,
                         arg3: *mut XClassHint) -> ::libc::c_int;
    pub fn XGetIconSizes(arg1: *mut Display, arg2: Window,
                         arg3: *mut *mut XIconSize, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn XGetNormalHints(arg1: *mut Display, arg2: Window,
                           arg3: *mut XSizeHints) -> ::libc::c_int;
    pub fn XGetRGBColormaps(arg1: *mut Display, arg2: Window,
                            arg3: *mut *mut XStandardColormap,
                            arg4: *mut ::libc::c_int, arg5: Atom) ->
     ::libc::c_int;
    pub fn XGetSizeHints(arg1: *mut Display, arg2: Window,
                         arg3: *mut XSizeHints, arg4: Atom) -> ::libc::c_int;
    pub fn XGetStandardColormap(arg1: *mut Display, arg2: Window,
                                arg3: *mut XStandardColormap, arg4: Atom) ->
     ::libc::c_int;
    pub fn XGetTextProperty(arg1: *mut Display, arg2: Window,
                            arg3: *mut XTextProperty, arg4: Atom) ->
     ::libc::c_int;
    pub fn XGetVisualInfo(arg1: *mut Display, arg2: ::libc::c_long,
                          arg3: *mut XVisualInfo, arg4: *mut ::libc::c_int) ->
     *mut XVisualInfo;
    pub fn XGetWMClientMachine(arg1: *mut Display, arg2: Window,
                               arg3: *mut XTextProperty) -> ::libc::c_int;
    pub fn XGetWMHints(arg1: *mut Display, arg2: Window) -> *mut XWMHints;
    pub fn XGetWMIconName(arg1: *mut Display, arg2: Window,
                          arg3: *mut XTextProperty) -> ::libc::c_int;
    pub fn XGetWMName(arg1: *mut Display, arg2: Window,
                      arg3: *mut XTextProperty) -> ::libc::c_int;
    pub fn XGetWMNormalHints(arg1: *mut Display, arg2: Window,
                             arg3: *mut XSizeHints, arg4: *mut ::libc::c_long)
     -> ::libc::c_int;
    pub fn XGetWMSizeHints(arg1: *mut Display, arg2: Window,
                           arg3: *mut XSizeHints, arg4: *mut ::libc::c_long,
                           arg5: Atom) -> ::libc::c_int;
    pub fn XGetZoomHints(arg1: *mut Display, arg2: Window,
                         arg3: *mut XSizeHints) -> ::libc::c_int;
    pub fn XIntersectRegion(arg1: Region, arg2: Region, arg3: Region) ->
     ::libc::c_int;
    pub fn XConvertCase(arg1: KeySym, arg2: *mut KeySym, arg3: *mut KeySym);
    pub fn XLookupString(arg1: *mut XKeyEvent, arg2: *mut ::libc::c_char,
                         arg3: ::libc::c_int, arg4: *mut KeySym,
                         arg5: *mut XComposeStatus) -> ::libc::c_int;
    pub fn XMatchVisualInfo(arg1: *mut Display, arg2: ::libc::c_int,
                            arg3: ::libc::c_int, arg4: ::libc::c_int,
                            arg5: *mut XVisualInfo) -> ::libc::c_int;
    pub fn XOffsetRegion(arg1: Region, arg2: ::libc::c_int,
                         arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XPointInRegion(arg1: Region, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XPolygonRegion(arg1: *mut XPoint, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> Region;
    pub fn XRectInRegion(arg1: Region, arg2: ::libc::c_int,
                         arg3: ::libc::c_int, arg4: ::libc::c_uint,
                         arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn XSaveContext(arg1: *mut Display, arg2: XID, arg3: XContext,
                        arg4: *const ::libc::c_char) -> ::libc::c_int;
    pub fn XSetClassHint(arg1: *mut Display, arg2: Window,
                         arg3: *mut XClassHint) -> ::libc::c_int;
    pub fn XSetIconSizes(arg1: *mut Display, arg2: Window,
                         arg3: *mut XIconSize, arg4: ::libc::c_int) ->
     ::libc::c_int;
    pub fn XSetNormalHints(arg1: *mut Display, arg2: Window,
                           arg3: *mut XSizeHints) -> ::libc::c_int;
    pub fn XSetRGBColormaps(arg1: *mut Display, arg2: Window,
                            arg3: *mut XStandardColormap, arg4: ::libc::c_int,
                            arg5: Atom);
    pub fn XSetSizeHints(arg1: *mut Display, arg2: Window,
                         arg3: *mut XSizeHints, arg4: Atom) -> ::libc::c_int;
    pub fn XSetStandardProperties(arg1: *mut Display, arg2: Window,
                                  arg3: *const ::libc::c_char,
                                  arg4: *const ::libc::c_char, arg5: Pixmap,
                                  arg6: *mut *mut ::libc::c_char,
                                  arg7: ::libc::c_int, arg8: *mut XSizeHints)
     -> ::libc::c_int;
    pub fn XSetTextProperty(arg1: *mut Display, arg2: Window,
                            arg3: *mut XTextProperty, arg4: Atom);
    pub fn XSetWMClientMachine(arg1: *mut Display, arg2: Window,
                               arg3: *mut XTextProperty);
    pub fn XSetWMHints(arg1: *mut Display, arg2: Window, arg3: *mut XWMHints)
     -> ::libc::c_int;
    pub fn XSetWMIconName(arg1: *mut Display, arg2: Window,
                          arg3: *mut XTextProperty);
    pub fn XSetWMName(arg1: *mut Display, arg2: Window,
                      arg3: *mut XTextProperty);
    pub fn XSetWMNormalHints(arg1: *mut Display, arg2: Window,
                             arg3: *mut XSizeHints);
    pub fn XSetWMProperties(arg1: *mut Display, arg2: Window,
                            arg3: *mut XTextProperty,
                            arg4: *mut XTextProperty,
                            arg5: *mut *mut ::libc::c_char,
                            arg6: ::libc::c_int, arg7: *mut XSizeHints,
                            arg8: *mut XWMHints, arg9: *mut XClassHint);
    pub fn XmbSetWMProperties(arg1: *mut Display, arg2: Window,
                              arg3: *const ::libc::c_char,
                              arg4: *const ::libc::c_char,
                              arg5: *mut *mut ::libc::c_char,
                              arg6: ::libc::c_int, arg7: *mut XSizeHints,
                              arg8: *mut XWMHints, arg9: *mut XClassHint);
    pub fn Xutf8SetWMProperties(arg1: *mut Display, arg2: Window,
                                arg3: *const ::libc::c_char,
                                arg4: *const ::libc::c_char,
                                arg5: *mut *mut ::libc::c_char,
                                arg6: ::libc::c_int, arg7: *mut XSizeHints,
                                arg8: *mut XWMHints, arg9: *mut XClassHint);
    pub fn XSetWMSizeHints(arg1: *mut Display, arg2: Window,
                           arg3: *mut XSizeHints, arg4: Atom);
    pub fn XSetRegion(arg1: *mut Display, arg2: GC, arg3: Region) ->
     ::libc::c_int;
    pub fn XSetStandardColormap(arg1: *mut Display, arg2: Window,
                                arg3: *mut XStandardColormap, arg4: Atom);
    pub fn XSetZoomHints(arg1: *mut Display, arg2: Window,
                         arg3: *mut XSizeHints) -> ::libc::c_int;
    pub fn XShrinkRegion(arg1: Region, arg2: ::libc::c_int,
                         arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn XStringListToTextProperty(arg1: *mut *mut ::libc::c_char,
                                     arg2: ::libc::c_int,
                                     arg3: *mut XTextProperty) ->
     ::libc::c_int;
    pub fn XSubtractRegion(arg1: Region, arg2: Region, arg3: Region) ->
     ::libc::c_int;
    pub fn XmbTextListToTextProperty(display: *mut Display,
                                     list: *mut *mut ::libc::c_char,
                                     count: ::libc::c_int,
                                     style: XICCEncodingStyle,
                                     text_prop_return: *mut XTextProperty) ->
     ::libc::c_int;
    pub fn XwcTextListToTextProperty(display: *mut Display,
                                     list: *mut *mut wchar_t,
                                     count: ::libc::c_int,
                                     style: XICCEncodingStyle,
                                     text_prop_return: *mut XTextProperty) ->
     ::libc::c_int;
    pub fn Xutf8TextListToTextProperty(display: *mut Display,
                                       list: *mut *mut ::libc::c_char,
                                       count: ::libc::c_int,
                                       style: XICCEncodingStyle,
                                       text_prop_return: *mut XTextProperty)
     -> ::libc::c_int;
    pub fn XwcFreeStringList(list: *mut *mut wchar_t);
    pub fn XTextPropertyToStringList(arg1: *mut XTextProperty,
                                     arg2: *mut *mut *mut ::libc::c_char,
                                     arg3: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XmbTextPropertyToTextList(display: *mut Display,
                                     text_prop: *const XTextProperty,
                                     list_return:
                                         *mut *mut *mut ::libc::c_char,
                                     count_return: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XwcTextPropertyToTextList(display: *mut Display,
                                     text_prop: *const XTextProperty,
                                     list_return: *mut *mut *mut wchar_t,
                                     count_return: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn Xutf8TextPropertyToTextList(display: *mut Display,
                                       text_prop: *const XTextProperty,
                                       list_return:
                                           *mut *mut *mut ::libc::c_char,
                                       count_return: *mut ::libc::c_int) ->
     ::libc::c_int;
    pub fn XUnionRectWithRegion(arg1: *mut XRectangle, arg2: Region,
                                arg3: Region) -> ::libc::c_int;
    pub fn XUnionRegion(arg1: Region, arg2: Region, arg3: Region) ->
     ::libc::c_int;
    pub fn XWMGeometry(arg1: *mut Display, arg2: ::libc::c_int,
                       arg3: *const ::libc::c_char,
                       arg4: *const ::libc::c_char, arg5: ::libc::c_uint,
                       arg6: *mut XSizeHints, arg7: *mut ::libc::c_int,
                       arg8: *mut ::libc::c_int, arg9: *mut ::libc::c_int,
                       arg10: *mut ::libc::c_int, arg11: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn XXorRegion(arg1: Region, arg2: Region, arg3: Region) ->
     ::libc::c_int;
}
